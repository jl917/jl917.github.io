"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["7996"],{9897:function(e,t,n){n.r(t),n.d(t,{default:()=>c});var s=n(5893),r=n(65);function i(e){let t=Object.assign({h1:"h1",a:"a",h4:"h4",pre:"pre",code:"code",h3:"h3"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h1,{id:"vitest",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#vitest",children:"#"}),"vitest"]}),"\n",(0,s.jsxs)(t.h4,{id:"viteconfigjs",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#viteconfigjs",children:"#"}),"vite.config.js"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import { defineConfig } from "vite";\nimport path from "path";\nimport react from "@vitejs/plugin-react";\n\nexport default defineConfig({\n  root: "./src",\n  build: {\n    outDir: "../dist",\n    emptyOutDir: true,\n  },\n  resolve: {\n    alias: {\n      "@": path.resolve(__dirname, "./src"),\n    },\n  },\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: "jsdom",\n    setupFiles: "./test/setup.ts",\n    css: true,\n  },\n});\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"packagejson",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"}),"package.json"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "scripts": {\n    "test": "vitest",\n    "coverage": "vitest run --coverage"\n  },\n  "devDependencies": {\n    "@testing-library/react": "^13.3.0",\n    "@vitejs/plugin-react": "^1.1.4",\n    "jsdom": "^20.0.0",\n    "vite": "^2.7.13",\n    "vitest": "^0.22.1"\n  }\n}\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"srctestsetupts",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#srctestsetupts",children:"#"}),"src/test/setup.ts"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { expect } from "vitest";\n\nconst toMatchAllText = (props, textList) => {\n  let isMatchText = true;\n  let noMatchtextList = [];\n\n  for (const text of textList) {\n    if (!props.innerHTML.includes(text)) {\n      isMatchText = false;\n      noMatchtextList.push(text);\n    }\n  }\n  if (isMatchText) {\n    return {\n      message: () => "success",\n      pass: true,\n    };\n  }\n  return {\n    message: () => `not match some text "${noMatchtextList.join(", ")}"`,\n    pass: false,\n  };\n};\n\nexpect.extend({ toMatchAllText });\n'})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["note%2Ftest%2Fvitest.md"]={toc:[{id:"viteconfigjs",text:"vite.config.js",depth:4},{id:"packagejson",text:"package.json",depth:3},{id:"srctestsetupts",text:"src/test/setup.ts",depth:3}],title:"vitest",headingTitle:"vitest",frontmatter:{}}}}]);