"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["7278"],{9268:function(e,n,a){a.r(n),a.d(n,{default:()=>o});var t=a(5893),r=a(65);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"抽象工厂模式abstract-factory",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#抽象工厂模式abstract-factory",children:"#"}),"抽象工厂模式(Abstract Factory)"]}),"\n",(0,t.jsx)(n.p,{children:"抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"class Employee {\n  constructor(name) {\n    this.name = name;\n  }\n  say() {\n    console.log(`I am ${this.name}`);\n  }\n}\n\nclass EmployeeFactory {\n  constructor() {}\n  create(name) {\n    return new Employee(name);\n  }\n}\n\nexport { EmployeeFactory };\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const employeeFactory = new EmployeeFactory();\nconst dao = employeeFactory.create("DaoLang");\ndao.say();\n'})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}let o=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["algorithm%2Fpattern%2F01.md"]={toc:[],title:"抽象工厂模式(Abstract Factory)",headingTitle:"抽象工厂模式(Abstract Factory)",frontmatter:{}}}}]);