"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["7814"],{8239:function(t,s,e){e.r(s),e.d(s,{default:()=>c});var n=e(5893),r=e(65);function o(t){let s=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code"},(0,r.ah)(),t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.h1,{id:"原型模式prototype",children:[(0,n.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#原型模式prototype",children:"#"}),"原型模式(Prototype)"]}),"\n",(0,n.jsx)(s.p,{children:"原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:"class CustomerPrototype {\n  constructor(proto) {\n    this.proto = proto;\n  }\n  clone() {\n    const customer = new Customer();\n    customer.first = proto.first;\n    customer.last = protp.last;\n    customer.status = proto.status;\n    return customer;\n  }\n}\n\nclass Customer {\n  constructor(first, last, status) {\n    this.first = fisrt;\n    this.last = last;\n    this.status = status;\n  }\n  say() {\n    console.log(`name: ${this.first} ${this.last}, status: ${this.status}`);\n  }\n}\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-js",children:'const proto = new Customer("n/a", "n/a", "pending");\nconst prototype = new CustomerPrototype(proto);\nconst customer = prototype.clone();\ncustomer.say();\n'})})]})}function a(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),t.components);return s?(0,n.jsx)(s,Object.assign({},t,{children:(0,n.jsx)(o,t)})):o(t)}let c=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["algorithm%2Fpattern%2F04.md"]={toc:[],title:"原型模式(Prototype)",headingTitle:"原型模式(Prototype)",frontmatter:{}}}}]);