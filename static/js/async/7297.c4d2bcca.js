"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["7297"],{9400:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var i=r(5893),t=r(65);function s(e){let n=Object.assign({h1:"h1",a:"a",h3:"h3",p:"p",ol:"ol",li:"li",pre:"pre",code:"code",strong:"strong",img:"img",ul:"ul"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"fiber",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fiber",children:"#"}),"Fiber"]}),"\n",(0,i.jsxs)(n.h3,{id:"용어",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#용어",children:"#"}),"용어"]}),"\n",(0,i.jsx)(n.p,{children:"Fiber Architecture"}),"\n",(0,i.jsx)(n.p,{children:"Fiber Node, Fiber Tree, FiberRoot, rootFiber"}),"\n",(0,i.jsx)(n.p,{children:"Fiber Reconciler는 Fiber Node 기반으로 실현"}),"\n","\n",(0,i.jsxs)(n.h3,{id:"vdom에-대한-이해",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vdom에-대한-이해",children:"#"}),"Vdom에 대한 이해?"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Fiber 객체 자체가 Vdom이다."}),"\n",(0,i.jsx)(n.li,{children:"vitrual DOM은 React.createElement()로 return된 객체. fiber는 vdom 을 realdom으로 실현하는 일부분."}),"\n"]}),"\n","\n",(0,i.jsxs)(n.h3,{id:"fiber-아키텍처의-의미",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fiber-아키텍처의-의미",children:"#"}),"Fiber 아키텍처의 의미"]}),"\n",(0,i.jsxs)(n.p,{children:["fiber는 node단위를 한개 workUnit으로 비동기 이고 중단 가능한 업데이트를 실현(concurrent 모드, timeSlice실현.)\n","\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"데이터-구조",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#데이터-구조",children:"#"}),"데이터 구조"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// https://github.com/facebook/react/blob/16.8.6/packages/react-reconciler/src/ReactFiber.js\nfunction FiberNode(tag: WorkTag, pendingProps: mixed, key: null | string, mode: TypeOfMode) {\n  this.tag = tag; // fiber 대응하는 컴포넌트 유형 Function/Class/Host\n  this.key = key;\n  this.elementType = null; // type이랑 동일 하지만 일부 제외(예: React.memo사용시 제외)\n  this.type = null; // FC=>함수자체, CC=>클래스, HostComponent=>tagName\n  this.stateNode = null;\n\n  // 다른 fiber 연결용\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n\n  this.index = 0; // fiber관련 dom insert할때 인덱스.\n  this.ref = null;\n\n  // update 관련된 상태 관련 정보 저장.\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // 부작용에 대한 내용 저장.\n  this.effectTag = NoEffect;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  // 우선순위 관련 처리\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  // 해당 fiber 업데이트시 연관된 작업의 fiber(workInProgressFiber => currentFiber)\n  this.alternate = null;\n}\n"})}),"\n","\n",(0,i.jsxs)(n.h3,{id:"fiberdoublebuffer",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fiberdoublebuffer",children:"#"}),"Fiber",(0,i.jsx)(n.strong,{children:"DoubleBuffer"})]}),"\n",(0,i.jsx)(n.p,{children:"예를들어 canvas에서 화면을 그릴때 매프레임마다 ctx.clearRect로 이전 화면을 지운다."}),"\n",(0,i.jsx)(n.p,{children:"새로 그리는 화면 컴퓨팅 시간이 많이 필요할 경우 흰색 화면만 보여주는 경우(Flickering)가 있다."}),"\n",(0,i.jsx)(n.p,{children:"해당문제를 해결하기 위해서 메모리(cpu, gpu)에서 다음화면을 그릴때 까지 이전화면을 보여주고 화면이 완성된 후에 ctx.clearRect로 이전화면을 지우고 새화면을 교체해준다."}),"\n",(0,i.jsx)(n.p,{children:"이와같이 메모리에서 구성하고 바로 교체 해주는 방식을 DoubleBuffer라고 한다."}),"\n",(0,i.jsx)(n.p,{children:"current fiber ⇒ workInProgress fiber(alternate)"}),"\n","\n",(0,i.jsxs)(n.h3,{id:"root",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#root",children:"#"}),"Root"]}),"\n",(0,i.jsx)(n.p,{children:"fiberRoot(변하지 않음.) > rootFiber > App > div"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/jl917/s/master/img/2022/07/25/20220725213905.png",alt:""}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"jsx-to-fiber",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsx-to-fiber",children:"#"}),"JSX to Fiber"]}),"\n",(0,i.jsx)(n.p,{children:"JSX ⇒ BABEL ⇒ React.createElement ⇒ ReactElement ⇒ ReactDom.render ⇒ ReactDOM.legacyCreateRootFromDOMContainer ⇒ createFiberRoot"}),"\n","\n",(0,i.jsxs)(n.h3,{id:"fiber-생성순서",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fiber-생성순서",children:"#"}),"fiber 생성순서"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://raw.githubusercontent.com/jl917/s/master/img/2022/07/25/20220725214257.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"*React 자식요소가 only textNode일 경우 별도 fiber생성 하지 않는다. (isDirectTextChild)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<div>\x3c!-- 1 --\x3e\n  <header/>\x3c!-- 2 --\x3e\n    <h1>\x3c!-- 3 --\x3e\n      page Title\x3c!-- 4 --\x3e\n      <span></span>\x3c!-- 5 --\x3e\n    </h1>\n    <input />\x3c!-- 6 --\x3e\n  </header>\n  <div>contents</div>\x3c!-- 7 --\x3e\n  <footer>\x3c!-- 8 --\x3e\n    <div>\x3c!-- 9 --\x3e\n      <p>copyright</p>\x3c!-- 10 --\x3e\n      <p>email: aa@bb.com</p>\x3c!-- 11 --\x3e\n    </div>\n    <p>footer</p>\x3c!-- 12 --\x3e\n  </footer>\n</div>\n"})}),"\n","\n",(0,i.jsxs)(n.h3,{id:"참고",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#참고",children:"#"}),"참고"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/acdlite/react-fiber-architecture",rel:"noopener noreferrer",target:"_blank",children:"https://github.com/acdlite/react-fiber-architecture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react",rel:"noopener noreferrer",target:"_blank",children:"https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ZCuYPiUIONs",rel:"noopener noreferrer",target:"_blank",children:"https://www.youtube.com/watch?v=ZCuYPiUIONs"})}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s(e)}let a=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["note%2Freact%2Fsources%2F02.md"]={toc:[{id:"용어",text:"용어",depth:3},{id:"vdom에-대한-이해",text:"Vdom에 대한 이해?",depth:3},{id:"fiber-아키텍처의-의미",text:"Fiber 아키텍처의 의미",depth:3},{id:"데이터-구조",text:"데이터 구조",depth:3},{id:"fiberdoublebuffer",text:"Fiber**DoubleBuffer**",depth:3},{id:"root",text:"Root",depth:3},{id:"jsx-to-fiber",text:"JSX to Fiber",depth:3},{id:"fiber-생성순서",text:"fiber 생성순서",depth:3},{id:"참고",text:"참고",depth:3}],title:"Fiber",headingTitle:"Fiber",frontmatter:{}}}}]);