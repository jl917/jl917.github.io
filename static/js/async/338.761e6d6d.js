"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["338"],{8583:function(n,e,t){t.r(e),t.d(e,{default:()=>o});var r=t(5893),a=t(65);function l(n){let e=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",h3:"h3",p:"p"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"client",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#client",children:"#"}),"Client"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"npm install --save @apollo/client graphql\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"client-1",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#client-1",children:"#"}),"Client"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'import { ApolloClient, InMemoryCache } from "@apollo/client";\n\nconst client = new ApolloClient({\n  uri: "http://localhost:4000",\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: "no-cache",\n      errorPolicy: "ignore",\n    },\n    query: {\n      fetchPolicy: "no-cache",\n      errorPolicy: "all",\n    },\n  },\n});\n\nexport default client;\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"apolloprovider",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#apolloprovider",children:"#"}),"ApolloProvider"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById("app")\n);\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"mutation",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mutation",children:"#"}),"Mutation"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'import React, { useState } from "react";\nimport { Form, Input, Button, InputNumber } from "antd";\nimport { useMutation, gql } from "@apollo/client";\n\n// graphql부분(1)\nconst ADD_USER = gql`\n  mutation AddUser($first: String, $last: String, $email: String) {\n    addUser(first: $first, last: $last, email: $email) {\n      email\n    }\n  }\n`;\n\nconst Page = () => {\n  const [resetKey, setResetKey] = useState(0);\n  // graphql부분(2)\n  const [addUser, { data }] = useMutation(ADD_USER);\n\n  const onFinish = ({ first, last, email }) => {\n    // graphql부분(3)\n    addUser({ variables: { first, last, email } });\n    setResetKey(resetKey + 1);\n  };\n  return (\n    <Form\n      onFinish={onFinish}\n      labelCol={{ span: 4 }}\n      wrapperCol={{ span: 20 }}\n      initialValues={{\n        first: `dao${new Date().getTime()}`,\n        last: `lang${new Date().getTime()}`,\n        email: `daolang${new Date().getTime()}@gmail.com`,\n      }}\n      key={resetKey}\n    >\n      <Form.Item\n        name="first"\n        label="first"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name="last"\n        label="last"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name="email"\n        label="Email"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type="primary"\n          htmlType="submit"\n        >\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Page;\n'})}),"\n",(0,r.jsx)(e.p,{children:"Query"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'import React, { useCallback } from "react";\nimport { useQuery, gql } from "@apollo/client";\nimport { useDispatch, useSelector } from "react-redux";\nimport { setCount } from "./redux";\nimport { Table } from "antd";\n\n// graphql(1)\nconst GET_USERS = gql`\n  query Users {\n    users {\n      key: _id\n      name {\n        first\n        last\n      }\n      email\n    }\n  }\n`;\n\nconst columns = [\n  {\n    title: "Id",\n    dataIndex: "key",\n    key: "key",\n  },\n  {\n    title: "First",\n    dataIndex: "name",\n    key: "name",\n    render: (item) => item.first,\n  },\n  {\n    title: "Last",\n    dataIndex: "name",\n    key: "name",\n    render: (item) => item.first,\n  },\n  {\n    title: "Email",\n    dataIndex: "email",\n    key: "email",\n  },\n];\n\nconst Page = () => {\n  // graphql(2)\n  const { loading, error, data } = useQuery(GET_USERS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <Table\n        columns={columns}\n        dataSource={data.users}\n      />\n    </div>\n  );\n};\n\nexport default Page;\n'})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)}let o=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["note%2Fgraphql%2Fclient.md"]={toc:[{id:"client",text:"Client",depth:3},{id:"apolloprovider",text:"ApolloProvider",depth:3},{id:"mutation",text:"Mutation",depth:3}],title:"Client",headingTitle:"Client",frontmatter:{}}}}]);