"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["667"],{9309:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var t=s(5893),r=s(65);function a(e){let n=Object.assign({h1:"h1",a:"a",h4:"h4",pre:"pre",code:"code",h3:"h3",p:"p"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"babel",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel",children:"#"}),"babel"]}),"\n",(0,t.jsxs)(n.h4,{id:"sample-code",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sample-code",children:"#"}),"sample code"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default `function square(n) {\n  return n * n;\n}`;\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"parser",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parser",children:"#"}),"parser"]}),"\n",(0,t.jsx)(n.p,{children:"babel-parser(旧 Babylon) 是 Babel 的解析器。最初是 从 Acorn 项目 fork 出来的。Acorn 非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { parse } from "@babel/parser";\nimport code from "./code";\n\nconst ast = parse(code);\nconsole.log(JSON.stringify(ast, null, 2));\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"traverse",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#traverse",children:"#"}),"traverse"]}),"\n",(0,t.jsx)(n.p,{children:"Babel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { parse } from "@babel/parser";\nimport traverse from "@babel/traverse";\nimport code from "./code";\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (path.node.type === "Identifier" && path.node.name === "n") {\n      path.node.name = "x";\n    }\n  },\n});\n\nconsole.log(JSON.stringify(ast, null, 2));\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"types",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types",children:"#"}),"types"]}),"\n",(0,t.jsx)(n.p,{children:"Babel Types 模块是一个用于 AST 节点的 Lodash 式工具库（译注：Lodash 是一个 JavaScript 函数工具库，提供了基于函数式编程风格的众多工具函数）， 它包含了构造、验证以及变换 AST 节点的方法。 该工具库包含考虑周到的工具方法，对编写处理 AST 逻辑非常有用。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { parse } from "@babel/parser";\nimport traverse from "@babel/traverse";\nimport * as t from "@babel/types";\nimport code from "./code";\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (t.isIdentifier(path.node, { name: "n" })) {\n      path.node.name = "x";\n    }\n  },\n});\nconsole.log(JSON.stringify(ast, null, 2));\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"generator",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generator",children:"#"}),"generator"]}),"\n",(0,t.jsx)(n.p,{children:"Babel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { parse } from "@babel/parser";\nimport traverse from "@babel/traverse";\nimport * as t from "@babel/types";\nimport generate from "@babel/generator";\nimport code from "./code";\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (t.isIdentifier(path.node, { name: "n" })) {\n      path.node.name = "x";\n    }\n  },\n});\nconsole.log(generate(ast).code);\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"template",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#template",children:"#"}),"template"]}),"\n",(0,t.jsx)(n.p,{children:"它能让你编写字符串形式且带有占位符的代码来代替手动编码， 尤其是生成的大规模 AST 的时候。 在计算机科学中，这种能力被称为准引用（quasiquotes）。"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import template from "@babel/template";\nimport generate from "@babel/generator";\nimport * as t from "@babel/types";\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier("myModule"),\n  SOURCE: t.stringLiteral("my-module"),\n});\nconsole.log(generate(ast).code);\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"types-vistor",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#types-vistor",children:"#"}),"types-vistor"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// types\nconst EXPRESSION_TYPES = [];\nconst BINARY_TYPES = [];\nconst SCOPABLE_TYPES = [];\nconst BLOCKPARENT_TYPES = [];\nconst BLOCK_TYPES = [];\nconst STATEMENT_TYPES = [];\nconst TERMINATORLESS_TYPES = [];\nconst COMPLETIONSTATEMENT_TYPES = [];\nconst CONDITIONAL_TYPES = [];\nconst LOOP_TYPES = [];\nconst WHILE_TYPES = [];\nconst EXPRESSIONWRAPPER_TYPES = [];\nconst FOR_TYPES = [];\nconst FORXSTATEMENT_TYPES = [];\nconst FUNCTION_TYPES = [];\nconst FUNCTIONPARENT_TYPES = [];\nconst PUREISH_TYPES = [];\nconst DECLARATION_TYPES = [];\nconst PATTERNLIKE_TYPES = [];\nconst LVAL_TYPES = [];\nconst TSENTITYNAME_TYPES = [];\nconst LITERAL_TYPES = [];\nconst IMMUTABLE_TYPES = [];\nconst USERWHITESPACABLE_TYPES = [];\nconst METHOD_TYPES = [];\nconst OBJECTMEMBER_TYPES = [];\nconst PROPERTY_TYPES = [];\nconst UNARYLIKE_TYPES = [];\nconst PATTERN_TYPES = [];\nconst CLASS_TYPES = [];\nconst MODULEDECLARATION_TYPES = [];\nconst EXPORTDECLARATION_TYPES = [];\nconst MODULESPECIFIER_TYPES = [];\nconst PRIVATE_TYPES = [];\nconst FLOW_TYPES = [];\nconst FLOWTYPE_TYPES = [];\nconst FLOWBASEANNOTATION_TYPES = [];\nconst FLOWDECLARATION_TYPES = [];\nconst FLOWPREDICATE_TYPES = [];\nconst ENUMBODY_TYPES = [];\nconst ENUMMEMBER_TYPES = [];\nconst JSX_TYPES = [];\nconst TSTYPEELEMENT_TYPES = [];\nconst TSTYPE_TYPES = [];\nconst TSBASETYPE_TYPES = [];\n\n// operator\nconst LOGICAL_OPERATORS = [];\nconst UPDATE_OPERATORS = [];\nconst BOOLEAN_NUMBER_BINARY_OPERATORS = [];\nconst EQUALITY_BINARY_OPERATORS = [];\nconst COMPARISON_BINARY_OPERATORS = [];\nconst BOOLEAN_BINARY_OPERATORS = [];\nconst NUMBER_BINARY_OPERATORS = [];\nconst BINARY_OPERATORS = [];\nconst ASSIGNMENT_OPERATORS = [];\nconst BOOLEAN_UNARY_OPERATORS = [];\nconst NUMBER_UNARY_OPERATORS = [];\nconst STRING_UNARY_OPERATORS = [];\nconst UNARY_OPERATORS = [];\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["tools%2Fplugins%2Fbabel.md"]={toc:[{id:"sample-code",text:"sample code",depth:4},{id:"parser",text:"parser",depth:3},{id:"traverse",text:"traverse",depth:3},{id:"types",text:"types",depth:3},{id:"generator",text:"generator",depth:3},{id:"template",text:"template",depth:3},{id:"types-vistor",text:"types-vistor",depth:3}],title:"babel",headingTitle:"babel",frontmatter:{}}}}]);