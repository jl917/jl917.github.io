"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["6680"],{4565:function(n,e,t){t.r(e),t.d(e,{default:()=>c});var i=t(5893),s=t(65);function o(n){let e=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",p:"p",ol:"ol",li:"li"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"基础",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础",children:"#"}),"基础"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"// Text.svelte\n<p>\n  this is Text Component\n</p>\n\n// App.svelte\n<script>\n  import text from './Text.svelte'\n  const name = 'google'\n  const src = 'https://www.google.com/logos/doodles/2020/december-holidays-days-2-30-6753651837108830.3-law.gif'\n  const htmlText = '<strong>html</strong> parsing sample'\n<\/script>\n<div>\n  <h1 class=\"heading\">\n    hello {name}\n  </h1>\n  <div>\n    <img src={src} alt=\"{name} logo\" />\n  </div>\n  <p>\n    {@html htmlText}\n  </p>\n  <Text />\n</div>\n\n<style>\n  .heading{color:#ff0000}\n</style>\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// index.js\nimport App from './App.svelte';\n\nconst app = new App({\n	target: document.body,\n	props: {\n		// we'll learn about props later\n		answer: 42\n	}\n});\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"交互",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#交互",children:"#"}),"交互"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n	let count = 0;\n  $: doubled = count * 2;\n	const handleClick = () => count += 1;\n<\/script>\n<button on:click={handleClick}>\n	Click\n</button>\n\x3c!-- 推荐， 重复使用该组建时很友好 --\x3e\n<p>\n	{count} {doubled}\n</p>\n\x3c!-- 不使用也可以 --\x3e\n<p>\n	{count} {count * 2}\n</p>\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n	let count = 0;\n	let count2 = 0;\n  // 监听count更改时执行, 有声明就监听\n	$: console.log(`the count is ${count}`);\n  // 可以大括号打包\n  $: {\n    console.log(`the count is ${count}`);\n  }\n  // 也可以添加条件\n  $: if(count > 10){\n    console.log('count max')\n    count = 9\n  }\n\n	function handleClick() {\n		count += 1;\n	}\n	function handleClick2() {\n		count2 += 1;\n	}\n<\/script>\n\n<button on:click={handleClick}>\n	Clicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n\n<button on:click={handleClick2}>\n	Clicked {count2} {count2 === 1 ? 'time' : 'times'}\n</button>\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n	let numbers = [1,2,3,4];\n  $: length = numbers.length;\n  const addNumber = () => {\n    numbers = [...numbers, numbers.length + 1]\n    // 直接push 他不会导致组建更新\n    // nums.push(numbers.length + 1)\n  }\n<\/script>\n<button @on:click={addNumber}>\n  click {length}\n</button>\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"props",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#props",children:"#"}),"Props"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"\x3c!-- App.svelte --\x3e\n<script>\n	import People from './People.svelte';\n  const p1 = {\n    name: 'dao',\n    age: 20,\n  }\n<\/script>\n<People name=\"dao\" age={20} />\n<People {...p1} />\n\n\x3c!-- People.svelte --\x3e\n<script>\n  export const name = 'lang'; // default value\n  export const age;\n<\/script>\n<p>\n  name: {name}<br/>\n  age: {age}\n</p>\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"logic",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#logic",children:"#"}),"Logic"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\nlet isLogined = false;\nconst toggle = () => {\n	isLogined = !isLogined;\n}\nconst list = [\n  {\n    id: 'un01', name: 'dao', age: 12,\n  },\n  {\n    id: 'un02', name: 'lang', age: 22,\n  },\n]\n<\/script>\n<button on:click={toggle}>\n	{#if !isLogined}login{/if}\n	{#if isLogined}logout{/if}\n</button>\n<button on:click={toggle}>\n	{#if !isLogined}login\n	{:else}logout{/if}\n</button>\n<ul>\n  {#each list as item, i (item.id)} \x3c!-- 相当于react key --\x3e\n  	<li>{i} - {item.name}, {item.age}</li>\n  {/each}\n</ul>\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"promise",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#promise",children:"#"}),"Promise"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n	const getUser = async () => {\n		const response = await fetch('https://randomuser.me/api/');\n		if(response.status === 200){\n			return response.json()\n		}\n	}\n<\/script>\n\n{#await getUser()}\n	<div>loading...</div>\n	{:then data}\n	<div>\n		{data.results[0].gender} - {data.results[0].name.first}, {data.results[0].name.last}\n	</div>\n	{:catch error}\n	<div>\n		{error.message}\n	</div>\n{/await}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"event",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#event",children:"#"}),"Event"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"<script>\n	let count = 0;\n	const setCount = () => {\n		count += 1;\n	}\n<\/script>\n<h1>\n	{count}\n</h1>\n<button on:click|once={setCount}>\n	click\n</button>\n\x3c!-- 在某些框架中，出于性能原因，您可能会看到一些避免内联事件处理程序的建议，尤其是在循环内部。 该建议不适用于Svelte，无论您选择哪种形式，编译器都将始终做正确的事情。 --\x3e\n<button on:click={() => count += 1}>\n	click\n</button>\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"event-modifiers",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#event-modifiers",children:"#"}),"Event Modifiers"]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{}),(0,i.jsx)(e.th,{})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"preventDefault"}),(0,i.jsx)(e.td,{children:"运行处理程序之前调用event.preventDefault（）。 例如，对客户端表单处理有用。"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"stopPropagation"}),(0,i.jsx)(e.td,{children:"调用event.stopPropagation（），以防止事件到达下一个元素"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"passive"}),(0,i.jsx)(e.td,{children:"改进了触摸/滚轮事件的滚动性能（Svelte会在安全的地方自动添加它）"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"nonpassive"}),(0,i.jsx)(e.td,{children:"显式设置为passive：false"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"capture"}),(0,i.jsx)(e.td,{children:"在捕获阶段而不是冒泡阶段（）触发处理程序"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"once"}),(0,i.jsx)(e.td,{children:"首次运行处理程序后将其删除"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"self"}),(0,i.jsx)(e.td,{children:"仅当event.target是元素本身时才触发处理程序"})]})]})]}),"\n",(0,i.jsxs)(e.h4,{id:"component-event",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#component-event",children:"#"}),"Component Event"]}),"\n",(0,i.jsx)(e.p,{children:"与DOM事件不同，组件事件不会冒泡。 如果要在某个深度嵌套的组件上侦听事件，则中间组件必须转发该事件。"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"\x3c!-- App.svelte --\x3e\n<script>\n	import People from './People.svelte';\n	let name = 'lang';\n	let age = 5;\n	const getName = (event) => {\n		name = event.detail.name;\n		age = event.detail.age;\n	}\n<\/script>\n<People on:getName={getName} />\n<PeopleOuter on:getName={getName} />\n<div>\n	{name} {age}\n</div>\n\n\x3c!-- People.svelte --\x3e\n<script>\n	import {createEventDispatcher} from 'svelte';\n	const dispatch = createEventDispatcher();\n	const setName = () => {\n		dispatch('getName', {\n			name: 'daolang',\n			age: 12\n		})\n	}\n<\/script>\n<button on:click={setName}>\nclick\n</button>\n\n\x3c!-- PeopleOuter.svelte --\x3e\n<script>\n  import People from './People.svelte';\n<\/script>\n<People on:getName />\n\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"form-binding",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#form-binding",children:"#"}),"Form binding"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<script>\n	let formObj = {\n		username: \'\',\n		age: 10,\n		agree: false,\n		gender: \'male\',\n		country: \'korea\',\n		message: \'\',\n	}\n<\/script>\n\n<form>\n	<h3>Input</h3>\n	<label>username <input bind:value={formObj.username} /></label>\n	<h3>Range</h3>\n	<label>age <input bind:value={formObj.age} type="range" min={0} max={99} />{formObj.age}</label>\n	<h3>Radio</h3>\n	<label>male <input type="radio" bind:group={formObj.gender} value="male" /></label>\n	<label>famale <input type="radio" bind:group={formObj.gender} value="female" /></label>\n	<h3>Radio</h3>\n	<select bind:value={formObj.country}>\n		<option value="china">china</option>\n		<option value="japan">japan</option>\n		<option value="korea">korea</option>\n	</select>\n	<h3>Textarea</h3>\n	<textarea bind:value={formObj.message} />\n</form>\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"component-binding",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#component-binding",children:"#"}),"Component binding"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"\x3c!-- App.svelte --\x3e\n<script>\n	import Pad from './Pad.svelte'\n  let pin = ''\n  $: view = pin || 'enter pin'\n	\n  const handleSubmit = () => {\n    alert(`submit ${pin}`)\n  }\n<\/script>\n<h1>{view}\n</h1>\n<Pad bind:value={pin} on:submit={handleSubmit} />\n\x3c!-- Pad.svelte --\x3e\n<script>\n	import { createEventDispatcher } from 'svelte';\n	export let value = ''\n	const dispatch = createEventDispatcher();\n	const clickNum = (e) => value += e.target.innerText;\n	const clickClear = () => value = '';\n	const clickSubmit = () => dispatch('submit')\n<\/script>\n\n<div>\n	<button on:click={clickNum}>1</button>\n	<button on:click={clickNum}>2</button>\n	<button on:click={clickNum}>3</button>\n	<button on:click={clickNum}>4</button>\n	<button on:click={clickNum}>5</button>\n	<button on:click={clickNum}>6</button>\n	<button on:click={clickNum}>7</button>\n	<button on:click={clickNum}>8</button>\n	<button on:click={clickNum}>9</button>\n	<button on:click={clickClear}>clear</button>\n	<button on:click={clickNum}>0</button>\n	<button on:click={clickSubmit}>submit</button>\n</div>\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"lifecycle",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#lifecycle",children:"#"}),"Lifecycle"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"beforeUpdate"}),"\n",(0,i.jsx)(e.li,{children:"render"}),"\n",(0,i.jsx)(e.li,{children:"onMount"}),"\n",(0,i.jsx)(e.li,{children:"afterUpdate"}),"\n",(0,i.jsx)(e.li,{children:"onDestroy"}),"\n",(0,i.jsx)(e.li,{children:"unMount(onMount return function)"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:"\x3c!-- App.svelte --\x3e\n<script>\n	import Sub from './Sub.svelte';\n	let isShow = true\n	const toggle = () => isShow = !isShow;\n<\/script>\n<button on:click={toggle}>\n	click\n</button>\n{#if isShow}\n<Sub />\n{/if}\n\n\x3c!-- Sub.svelte --\x3e\n<script>\n	import { onMount, onDestroy, beforeUpdate, afterUpdate } from 'svelte';\n	let status = 'sub page'\n	onMount(() => {\n		console.log('mount')\n		return () => {\n			console.log('unmount')\n		}\n	})\n	// 销毁时运行 unmount 之前\n	onDestroy(() => {	\n		console.log('destroy')\n	})\n	// 数据更新前\n	beforeUpdate(() => {\n		console.log('before update')\n	})\n	// 数据更新后\n	afterUpdate(() => {\n		console.log('after update')\n	})\n	\n	const setContents = () => {\n		status = `sub page ${+new Date()}`\n	}\n<\/script>\n\n<p>\n	<span style=\"display: none\">{console.log('render')}</span>\n	{status}\n</p>\n<button on:click={setContents}>\n	update page contents\n</button>\n"})}),"\n",(0,i.jsx)(e.p,{children:"在Svelte中更新组件状态时，它不会立即更新DOM。 而是等到下一个微任务，看是否还有其他需要应用的更改，包括其他组件。 这样做避免了不必要的工作，并使浏览器可以更有效地对事物进行批处理。"})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(o,n)})):o(n)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["note%2Fsvelte%2F01.md"]={toc:[{id:"交互",text:"交互",depth:4},{id:"props",text:"Props",depth:4},{id:"logic",text:"Logic",depth:4},{id:"promise",text:"Promise",depth:4},{id:"event",text:"Event",depth:4},{id:"event-modifiers",text:"Event Modifiers",depth:4},{id:"component-event",text:"Component Event",depth:4},{id:"form-binding",text:"Form binding",depth:4},{id:"component-binding",text:"Component binding",depth:4},{id:"lifecycle",text:"Lifecycle",depth:4}],title:"基础",headingTitle:"基础",frontmatter:{}}}}]);