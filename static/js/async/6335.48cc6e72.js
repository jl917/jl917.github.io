"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["6335"],{6400:function(e,n,t){t.r(n),t.d(n,{default:()=>i});var r=t(5893),s=t(65);function o(e){let n=Object.assign({h4:"h4",a:"a",pre:"pre",code:"code",p:"p",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h4,{id:"函数组件-function-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数组件-function-component",children:"#"}),"函数组件 (Function component)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function Greeting(props) {\n  return <div>Hi {props.name}!</div>;\n}\nGreeting.defaultProps = {\n  name: "Guest",\n};\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"属性解构-destructuring-props",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#属性解构-destructuring-props",children:"#"}),"属性解构 (Destructuring props)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function Greeting({ name = "dao" }) {\n  return <div>Hi {props.name}!</div>;\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"jsx-中的属性展开-jsx-spread-attributes",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsx-中的属性展开-jsx-spread-attributes",children:"#"}),"JSX 中的属性展开 (JSX spread attributes)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function Greeting({ name, ...restProps }) {\n  return <div {...restProps}>Hi {name}!</div>;\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"合并解构属性和其它值-merge-destructured-props-with-other-values",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#合并解构属性和其它值-merge-destructured-props-with-other-values",children:"#"}),"合并解构属性和其它值 (Merge destructured props with other values)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function MyButton(props) {\n  return (\n    <button\n      className="btn"\n      {...props}\n    />\n  );\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"条件渲染-conditional-rendering",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#条件渲染-conditional-rendering",children:"#"}),"条件渲染 (Conditional rendering)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// 如果\n{\n  condition && <span>Rendered when `truthy`</span>;\n}\n// 除非\n{\n  condition || <span>Rendered when `falsy`</span>;\n}\n// 如果-否则\n{\n  condition ? <span>Rendered when `truthy`</span> : <span>Rendered when `falsy`</span>;\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"渲染属性-render-prop",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#渲染属性-render-prop",children:"#"}),"渲染属性 (Render prop)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const Width = ({ children }) => children(500);\n<Width>{(width) => <div>window is {width}</div>}</Width>;\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"代理组件-proxy-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代理组件-proxy-component",children:"#"}),"代理组件 (Proxy component)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const Button = props => <button type="button" {...props}>\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"样式组件-style-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#样式组件-style-component",children:"#"}),"样式组件 (Style component)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import classnames from "classnames";\nconst PrimaryBtn = props => <Btn {...props} primary />;\n\nconst Btn = ({ className, primary, ...props }) => (\n  <button\n    type="button"\n    className={classnames("btn", primary && "btn-primary", className)}\n    {...props}\n  />\n);\n\n<PrimaryBtn />\n<Btn primary />\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"组织事件-event-switch",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组织事件-event-switch",children:"#"}),"组织事件 (Event switch)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'handleEvent({type}) {\n  switch(type) {\n    case "click":\n      return require("./actions/doStuff")(/* action dates */)\n    case "mouseenter":\n      return this.setState({ hovered: true })\n    case "mouseleave":\n      return this.setState({ hovered: false })\n    default:\n      return console.warn(`No case for event type "${type}"`)\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"布局组件-layout-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#布局组件-layout-component",children:"#"}),"布局组件 (Layout component)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"<HorizontalSplit\n  leftSide={<SomeSmartComponent />}\n  rightSide={<AnotherSmartComponent />}\n/>;\nconst HorizontalSplit = ({ leftSide, rightSide }) => (\n  <FlexContainer>\n    <div>{leftSide}</div>\n    <div>{rightSide}</div>\n  </FlexContainer>\n);\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"容器组件-container-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#容器组件-container-component",children:"#"}),"容器组件 (Container component)"]}),"\n",(0,r.jsx)(n.p,{children:"容器用来获取数据然后渲染到子组件上，仅仅如此。 —Jason Bonta"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const CommentList = ({ comments }) => (\n  <ul>\n    {comments.map(comment => (\n      <li>\n        {comment.body}-{comment.author}\n      </li>\n    ))}\n  </ul>\n);\n\nconst CommentListContainer = () => {\n  useEffect(() => {\n    $.ajax({\n      url: \"/my-comments.json\",\n      dataType: 'json',\n      success: comments =>\n        this.setState({comments: comments});\n    })\n  },[])\n\n  return <CommentList comments={this.state.comments} />\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"高阶组件-higher-order-component",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高阶组件-higher-order-component",children:"#"}),"高阶组件 (Higher-order component)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"接受一个或多个组件作为输入"}),"\n",(0,r.jsx)(n.li,{children:"输出一个组件"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const WrapContainer = (Component) => {\n  return () => (\n    <Container>\n      <Component />\n    </Container>\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"受控组件",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#受控组件",children:"#"}),"受控组件"]}),"\n",(0,r.jsx)(n.p,{children:"input 的 value 和 state 同步"}),"\n",(0,r.jsxs)(n.h4,{id:"sub-components",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sub-components",children:"#"}),"sub Components"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const ListGroup = ({ children }) => <ul>{children}</ul>;\nconst List = () => (\n  <Fragment>\n    <li>1</li>\n    <li>2</li>\n  </Fragment>\n);\n\nList.group = ListGroup;\n\nconst App = () => (\n  <List.group>\n    <List />\n  </List.group>\n);\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"context",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#context",children:"#"}),"context"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const ContextCounter = React.createContext();\n\nconst App = () => (\n  <ContextCounter.Provider value={0}>\n    <Child />\n  </ContextCounter.Provider>\n);\n\nconst Child = () => {\n  const count = useContext(ContextCounter);\n  return <h1>{count}</h1>;\n};\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"createportal",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#createportal",children:"#"}),"createPortal"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import { createPortal } from "react-dom";\n\nconst Po = ({ children }) => {\n  return createPortal(children, document.getElementById("modal"));\n};\n\nexport default Po;\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"profiler",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#profiler",children:"#"}),"Profiler"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { Profiler, useState } from "react";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const onRender = (id, phase, actualDuration, baseDuration, startTime, commitTime, interactions) => {\n    // id: string - 发生提交的 Profiler 树的 id。 如果有多个 profiler，它能用来分辨树的哪一部分发生了“提交”。\n    // phase: "mount" | "update" - 判断是组件树的第一次装载引起的重渲染，还是由 props、state 或是 hooks 改变引起的重渲染。\n    // actualDuration: number - 本次更新在渲染 Profiler 和它的子代上花费的时间。 这个数值表明使用 memoization 之后能表现得多好。（例如 React.memo，useMemo，shouldComponentUpdate）。 理想情况下，由于子代只会因特定的 prop 改变而重渲染，因此这个值应该在第一次装载之后显著下降。\n    // baseDuration: number - 在 Profiler 树中最近一次每一个组件 render 的持续时间。 这个值估计了最差的渲染时间。（例如当它是第一次加载或者组件树没有使用 memoization）。\n    // startTime: number - 本次更新中 React 开始渲染的时间戳。\n    // commitTime: number - 本次更新中 React commit 阶段结束的时间戳。 在一次 commit 中这个值在所有的 profiler 之间是共享的，可以将它们按需分组。\n    // interactions: Set - 当更新被制定时，“interactions” 的集合会被追踪。（例如当 render 或者 setState 被调用时）。\n  };\n\n  return (\n    <Profiler\n      id="App"\n      onRender={onRender}\n    >\n      <div>{count}</div>\n      <button onClick={() => setCount(count + 1)}>sc</button>\n    </Profiler>\n  );\n};\n\nexport default App;\n'})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}let i=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["note%2Freact%2Fpattern.md"]={toc:[{id:"函数组件-function-component",text:"函数组件 (Function component)",depth:4},{id:"属性解构-destructuring-props",text:"属性解构 (Destructuring props)",depth:4},{id:"jsx-中的属性展开-jsx-spread-attributes",text:"JSX 中的属性展开 (JSX spread attributes)",depth:4},{id:"合并解构属性和其它值-merge-destructured-props-with-other-values",text:"合并解构属性和其它值 (Merge destructured props with other values)",depth:4},{id:"条件渲染-conditional-rendering",text:"条件渲染 (Conditional rendering)",depth:4},{id:"渲染属性-render-prop",text:"渲染属性 (Render prop)",depth:4},{id:"代理组件-proxy-component",text:"代理组件 (Proxy component)",depth:4},{id:"样式组件-style-component",text:"样式组件 (Style component)",depth:4},{id:"组织事件-event-switch",text:"组织事件 (Event switch)",depth:4},{id:"布局组件-layout-component",text:"布局组件 (Layout component)",depth:4},{id:"容器组件-container-component",text:"容器组件 (Container component)",depth:4},{id:"高阶组件-higher-order-component",text:"高阶组件 (Higher-order component)",depth:4},{id:"受控组件",text:"受控组件",depth:4},{id:"sub-components",text:"sub Components",depth:4},{id:"context",text:"context",depth:4},{id:"createportal",text:"createPortal",depth:4},{id:"profiler",text:"Profiler",depth:4}],title:"",headingTitle:"",frontmatter:{}}}}]);