"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["5028"],{4363:function(t,e,n){n.r(e),n.d(e,{default:()=>x});var r=n(5893),s=n(65);function l(t){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code"},(0,s.ah)(),t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"享元模式flyweight-pattern",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#享元模式flyweight-pattern",children:"#"}),"享元模式(Flyweight Pattern)"]}),"\n",(0,r.jsx)(e.p,{children:"主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'let textCount = 0;\nlet textAttrCount = 0;\n\nclass Text {\n  constructor() {\n    this.text = "";\n  }\n  add(text) {\n    this.text = text;\n    textCount++;\n  }\n}\n\nclass TextAttr {\n  constructor() {}\n  add(color, size) {\n    this.color = color;\n    this.size = size;\n    textAttrCount++;\n  }\n}\n\nclass TextFactory {\n  constructor() {\n    this.textObj = new Text();\n    this.resultText = [];\n  }\n  create(text, color, size) {\n    if (this.textObj.text != text) {\n      this.textObj = new Text();\n      this.textObj.add(text);\n    }\n    let textAttr = new TextAttr();\n    textAttr.add(color, size);\n    this.resultText.push({\n      id: this.textObj.text + textAttr.color + textAttr.size,\n      text: this.textObj.text,\n      color: textAttr.color,\n      size: textAttr.size,\n    });\n  }\n\n  get() {\n    return this.resultText;\n  }\n\n  getCount() {\n    return {\n      textCount,\n      textAttrCount,\n    };\n  }\n}\n\nexport default TextFactory;\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'let text01 = new TextFactory();\ntext01.create("hello world", "red", 14);\ntext01.create("hello world", "blue", 16);\ntext01.create("hello world", "green", 15);\ntext01.create("what the fuck~", "gray", 30);\ntext01.get();\ntext01.getCount();\n'})})]})}function o(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),t.components);return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}let x=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["algorithm%2Fpattern%2F11.md"]={toc:[],title:"享元模式(Flyweight Pattern)",headingTitle:"享元模式(Flyweight Pattern)",frontmatter:{}}}}]);