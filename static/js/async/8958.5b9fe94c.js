"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["8958"],{8132:function(e,r,s){s.r(r),s.d(r,{default:()=>d});var n=s(5893),a=s(65);function t(e){let r=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",h3:"h3"},(0,a.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h1,{id:"server",children:[(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#server",children:"#"}),"Server"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'module.exports = "db"; // https://randomuser.me/api/?results=50\n'})}),"\n",(0,n.jsxs)(r.h3,{id:"typedefs",children:[(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#typedefs",children:"#"}),"typeDefs"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'const { gql } = require("apollo-server");\n\nmodule.exports = gql`\n  type Name {\n    first: String\n    last: String\n  }\n  type User {\n    name: Name\n    email: String\n  }\n  type Query {\n    users: [User]\n  }\n  type Mutation {\n    addUser(first: String, last: String, email: String): User\n  }\n`;\n'})}),"\n",(0,n.jsxs)(r.h3,{id:"resolves",children:[(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#resolves",children:"#"}),"resolves"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'const db = require("./db");\n\nmodule.exports = {\n  Query: {\n    users: () => db.results,\n  },\n  Mutation: {\n    addUser: (obj, args, ctx) => {\n      console.log(args); // 받은 객체 저장.\n      return "등록 완료";\n    },\n  },\n};\n'})}),"\n",(0,n.jsxs)(r.h3,{id:"app",children:[(0,n.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#app",children:"#"}),"app"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:'const { ApolloServer, makeExecutableSchema } = require("apollo-server");\nconst typeDefs = require("./typeDefs");\nconst resolvers = require("./resolves");\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\nconst server = new ApolloServer({ schema });\n\n// The `listen` method launches a web server.\nserver.listen().then(({ url }) => {\n  console.log(`\uD83D\uDE80  Server ready at ${url}`);\n});\n'})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(t,e)})):t(e)}let d=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["web%2Fgraphql%2Fserver.md"]={toc:[{id:"typedefs",text:"typeDefs",depth:3},{id:"resolves",text:"resolves",depth:3},{id:"app",text:"app",depth:3}],title:"Server",headingTitle:"Server",frontmatter:{}}}}]);