"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["5766"],{62366:function(e,t,n){n.r(t);var c=n(85893),s=n(50065);function a(e){let t=Object.assign({h1:"h1",a:"a",h3:"h3",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h1,{id:"react-test-sample",children:[(0,c.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#react-test-sample",children:"#"}),"React Test Sample"]}),"\n",(0,c.jsxs)(t.h3,{id:"basic",children:[(0,c.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#basic",children:"#"}),"basic"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",meta:"",children:'// Button.jsx\nimport React, { useState } from "react";\nimport s from "./style.styl";\n\nconst Button = ({ text = "\uBC84\uD2BC" }) => {\n  const [isActive, setActive] = useState(false);\n  return (\n    <button\n      type="button"\n      className={isActive ? s.active : ""}\n      onClick={() => setActive(!isActive)}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n\n// Button.test.js\nimport React from "react";\nimport { shallow } from "enzyme";\nimport Button from "./";\n\ndescribe("\u6D4B\u8BD5\u7EC4\u4EF6", () => {\n  const component = shallow(<Button text="\uD655\uC778" />);\n\n  test("default componet", () => {\n    expect(component).toMatchSnapshot();\n    expect(component.props().className).toEqual("");\n  });\n  test("component clicked", () => {\n    expect(component).toMatchSnapshot();\n    component.find("button").at(0).simulate("click");\n    expect(component.props().className).toEqual("active");\n  });\n});\n'})}),"\n",(0,c.jsxs)(t.h3,{id:"redux",children:[(0,c.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#redux",children:"#"}),"redux"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-jsx",meta:"",children:'// page1/redux.jsx\nexport const NEXT_COUNT = "NEXT_COUNT";\nexport const PREV_COUNT = "PREV_COUNT";\n\nexport const setCount = (type) => ({\n  type: type === "next" ? NEXT_COUNT : PREV_COUNT,\n});\n\nexport const countReducer = (state = 0, action) => {\n  if (action.type === NEXT_COUNT) {\n    return state + 1;\n  }\n  if (action.type === PREV_COUNT) {\n    return state - 1;\n  }\n  return state;\n};\n\n// page1/redux.test.js\nimport { NEXT_COUNT, PREV_COUNT, setCount, countReducer } from "./redux";\n\ndescribe("PAGE1 \u6D4B\u8BD5redux", () => {\n  test("action creator test", () => {\n    expect(setCount("next")).toEqual({ type: NEXT_COUNT });\n    expect(setCount("prev")).toEqual({ type: PREV_COUNT });\n  });\n\n  test("reducer test", () => {\n    expect(countReducer(0, { type: NEXT_COUNT })).toEqual(1);\n    expect(countReducer(10, { type: NEXT_COUNT })).toEqual(11);\n    expect(countReducer(-10, { type: NEXT_COUNT })).toEqual(-9);\n\n    expect(countReducer(0, { type: PREV_COUNT })).toEqual(-1);\n    expect(countReducer(10, { type: PREV_COUNT })).toEqual(9);\n    expect(countReducer(-10, { type: PREV_COUNT })).toEqual(-11);\n  });\n});\n'})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,c.jsx)(t,Object.assign({},e,{children:(0,c.jsx)(a,e)})):a(e)}t.default=o,o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["web%2Ftest%2Freact.md"]={toc:[{id:"basic",text:"basic",depth:3},{id:"redux",text:"redux",depth:3}],title:"React Test Sample",frontmatter:{}}}}]);