"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["5557"],{3569:function(e,n,t){t.r(n),t.d(n,{default:()=>i});var a=t(5893),s=t(65);function r(e){let n=Object.assign({h1:"h1",a:"a",h3:"h3",ul:"ul",li:"li",p:"p",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"update",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update",children:"#"}),"Update"]}),"\n",(0,a.jsxs)(n.h3,{id:"update-활성화",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update-활성화",children:"#"}),"Update 활성화"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"ReactDOM.render"}),"\n",(0,a.jsx)(n.li,{children:"this.setState"}),"\n",(0,a.jsx)(n.li,{children:"this.forceUpdate"}),"\n",(0,a.jsx)(n.li,{children:"useState"}),"\n",(0,a.jsx)(n.li,{children:"useReducer"}),"\n"]}),"\n","\n",(0,a.jsxs)(n.h3,{id:"update-프로세스",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update-프로세스",children:"#"}),"Update 프로세스"]}),"\n",(0,a.jsx)(n.p,{children:"this.update.enqueueSetState 통해서 Update를 생성하고 실행한다."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"Update 활성화\n    |\n    v\nshared.pending 생성\n    |\n    v\n....\n    |\n    v\nupdateQueue 처리(completeWork)\n    |\n    v\n...\n"})}),"\n","\n",(0,a.jsxs)(n.h3,{id:"update객체",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update객체",children:"#"}),"Update객체"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// ClassComponent, HostRoot\nconst update = {\n  eventTime: "",\n  lane: "",\n  suspenseConfig: "",\n  tag: UpdateState, // CaptureUpdate, ForceUpdate, ReplaceState, UpdateState\n  payload: null, // ClassComponent this.setState args[0], HostRoot ReactDOM.render args[0]\n  callback: null, // ClassComponent this.setState args[1], HostRoot ReactDOM.render args[2]\n  next: null,\n};\n\n// FunctionComponent\nconst update = {\n  eventTime: "",\n  lane: "",\n  suspenseConfig: "",\n  action: "", // ????\n  eagerReducer: null, // useState는 basicStateReducer사용.\n  eagerState: null, // 리듀서를 통해 action의 결과값을 얻는다. basicStateReducer(baseState, action)\n  next: null,\n};\n\nfunction basicStateReducer(state, action) {\n  return typeof action === "function" ? action(state) : action;\n}\n'})}),"\n","\n",(0,a.jsxs)(n.h3,{id:"update-queue",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update-queue",children:"#"}),"Update Queue"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"baseState: 메모리에 임시 저장되는 값."}),"\n",(0,a.jsx)(n.li,{children:"memoizedState: 화면에 노출되는 값"}),"\n",(0,a.jsx)(n.li,{children:"shared.pending: 업데이트 활성화시 임시 저장하고 우선순위에 적합한 Update만 firstBaseUpdate뒤에 추가."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// ClassComponent\nconst Fiber = {\n  updateQueue: {\n    baseState: '',\n    firstBaseUpdate: Update,\n    lastBaseUpdate: Update,\n    shared: {\n      pending: Updates\n    }\n    effects: [] // update.callback 이 존재하는 경우만 배열에 추가\n  }\n  memoizedState: stateValue\n}\n\n// FunctionComponent\nconst Fiber = {\n  memoizedState: { // Hook\n    memoizedState: stateValue,\n    baseState: '',\n    baseQueue: Update,\n    queue: Updates,\n    next, // Hook list\n  }\n}\n"})}),"\n","\n",(0,a.jsxs)(n.h2,{id:"update-종류별",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update-종류별",children:"#"}),"update 종류별"]}),"\n",(0,a.jsxs)(n.h3,{id:"단일-task",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#단일-task",children:"#"}),"단일 Task"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => setCount(count + 1);\n  return <div onClick={onClick}>{count}</div>;\n};\n"})}),"\n","\n",(0,a.jsxs)(n.h3,{id:"batchupdate",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#batchupdate",children:"#"}),"batchUpdate"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const App = () => {\n  const [count, setCount] = useState(0);\n  const onClick1 = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n  const onClick2 = () => {\n    setCount((baseState) => baseState + 1);\n    setCount((baseState) => baseState + 1);\n    setCount(count + 1);\n    setCount((baseState) => baseState + 1);\n  };\n  const onClick3 = () => {\n    setTimeout(() => {\n      // concurrent mode일 경우 배치됨, legacy mode일 경우 3번 랜딩됨.\n      setCount(count + 1);\n      setCount(count + 1);\n      setCount(count + 1);\n    }, 0);\n  };\n  return (\n    <>\n      <h1>{count}</h1>\n      <div onClick={onClick1}>click1</div>\n      <div onClick={onClick2}>click2</div>\n      <div onClick={onClick3}>click3</div>\n    </>\n  );\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"high-priority-task",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#high-priority-task",children:"#"}),"high priority task"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const arr = [];\narr.length = 6000;\narr.fill(0);\n\nconst App = () => {\n  const btnRef = useRef(null);\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount((count) => count + 1);\n  };\n\n  useEffect(() => {\n    // 레거시 모드에서는 10, 11로 화면에 노출\n    // 동시성 모드에서는 1, 11로 화면에 노출(1차 우선순위 높은거 실행, 2차 순차적으로 실행.)\n    // [10_2, x+1_1]\n    setTimeout(() => {\n      setCount(count + 10);\n    }, 2000);\n    setTimeout(() => {\n      btnRef.current.click();\n    }, 2000);\n  }, []);\n  return (\n    <>\n      <h1>{count}</h1>\n      <div\n        onClick={onClick}\n        ref={btnRef}\n      >\n        click1\n      </div>\n      {arr.map(() => (\n        <div>{count}</div>\n      ))}\n    </>\n  );\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"복합적인-경우",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#복합적인-경우",children:"#"}),"복합적인 경우"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n"})}),"\n","\n",(0,a.jsxs)(n.h3,{id:"참고",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#참고",children:"#"}),"참고"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://wonism.github.io/react-updater/",rel:"noopener noreferrer",target:"_blank",children:"https://wonism.github.io/react-updater/"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js",rel:"noopener noreferrer",target:"_blank",children:"https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(r,e)})):r(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["note%2Freact%2Fsources%2F04.md"]={toc:[{id:"update-활성화",text:"Update 활성화",depth:3},{id:"update-프로세스",text:"Update 프로세스",depth:3},{id:"update객체",text:"Update객체",depth:3},{id:"update-queue",text:"Update Queue",depth:3},{id:"update-종류별",text:"update 종류별",depth:2},{id:"단일-task",text:"단일 Task",depth:3},{id:"batchupdate",text:"batchUpdate",depth:3},{id:"high-priority-task",text:"high priority task",depth:3},{id:"복합적인-경우",text:"복합적인 경우",depth:3},{id:"참고",text:"참고",depth:3}],title:"Update",headingTitle:"Update",frontmatter:{}}}}]);