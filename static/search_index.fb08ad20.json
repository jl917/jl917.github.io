[{"title":"抽象工厂模式(Abstract Factory)","content":"#\n\n抽象工厂模式（Abstract Factory\nPattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\nclass Employee {\n  constructor(name) {\n    this.name = name;\n  }\n  say() {\n    console.log(`I am ${this.name}`);\n  }\n}\n\nclass EmployeeFactory {\n  constructor() {}\n  create(name) {\n    return new Employee(name);\n  }\n}\n\nexport { EmployeeFactory };\n\n\nconst employeeFactory = new EmployeeFactory();\nconst dao = employeeFactory.create(\"DaoLang\");\ndao.say();\n","routePath":"/algorithm/pattern/01","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"构建者模式(Builder)","content":"#\n\n将对象构造与其表示分开\n\nclass Starbucks {\n  constructor() {}\n  create(builder) {\n    builder.step1();\n    builder.step2();\n    builder.step3();\n    return builder.get();\n  }\n}\n\nclass Americano {\n  constructor() {\n    this.water = null;\n    this.coffee = null;\n  }\n  addCoffee() {\n    this.coffee = \"20g\";\n  }\n  addWater() {\n    this.water = \"400ml\";\n  }\n}\n\nclass AmericanoBuilder {\n  constructor() {\n    this.drink = null;\n  }\n  step1() {\n    this.drink = new Americano();\n  }\n  step2() {\n    this.drink.addCoffee();\n  }\n  step3() {\n    this.drink.addWater();\n  }\n  get() {\n    return this.drink;\n  }\n}\n\nexport { Starbucks, AmericanoBuilder };\n\n\nlet starbucks = new Starbucks();\nlet americanoBuilder = new AmericanoBuilder();\nstarbucks.create(americanoBuilder);\n","routePath":"/algorithm/pattern/02","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"工厂方法模式(Factory Method)","content":"#\n\n创建多个派生类的实例\n\nclass Apple {\n  constructor(model) {\n    this.model = model;\n  }\n  get() {\n    return this.model;\n  }\n}\n\nclass AppleCreate {\n  constructor() {}\n  create(model) {\n    return new Apple(model);\n  }\n}\n\nexport default AppleCreate;\n\n\nlet appleCreate = new AppleCreate();\nappleCreate.create(\"iphone 7\");\n","routePath":"/algorithm/pattern/03","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"原型模式(Prototype)","content":"#\n\n原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\nclass CustomerPrototype {\n  constructor(proto) {\n    this.proto = proto;\n  }\n  clone() {\n    const customer = new Customer();\n    customer.first = proto.first;\n    customer.last = protp.last;\n    customer.status = proto.status;\n    return customer;\n  }\n}\n\nclass Customer {\n  constructor(first, last, status) {\n    this.first = fisrt;\n    this.last = last;\n    this.status = status;\n  }\n  say() {\n    console.log(`name: ${this.first} ${this.last}, status: ${this.status}`);\n  }\n}\n\n\nconst proto = new Customer(\"n/a\", \"n/a\", \"pending\");\nconst prototype = new CustomerPrototype(proto);\nconst customer = prototype.clone();\ncustomer.say();\n","routePath":"/algorithm/pattern/04","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"单例模式(Singleton)","content":"#\n\n确保一个类只有一个实例，并提供一个全局访问点。\n\n//普通单体\nlet Singleton1 = {\n  name: \"Apple\",\n  get() {\n    return this.name;\n  },\n};\n\n//有局部变量的单体\nlet Singleton2 = () => {\n  let _name = \"apple\";\n  let _color = \"red\";\n  return {\n    name: _name,\n    color: _color,\n  };\n};\n\nexport { Singleton1, Singleton2 };\n\n\nSingleton1.get();\nSingleton2();\n","routePath":"/algorithm/pattern/05","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"适配器模式(Adapter)","content":"#\n\n匹配不同类的接口\n\n// old api\nclass Mart {\n  constructor() {\n    this.cola = 3;\n    this.bread = 5;\n  }\n  getPrice(type, num) {\n    return this[type] * Math.floor(num);\n  }\n}\n\n// new api\nclass NewMart {\n  constructor() {\n    this.cola = 3;\n    this.bread = 5;\n  }\n  getTotalPrice(...rest) {\n    let _result = 0;\n    rest.forEach((e) => {\n      _result += this[e.type] * e.length;\n    });\n    return _result;\n  }\n}\n\n//adapter\nclass MartAdapter {\n  constructor() {}\n\n  getPrice(type, num) {\n    return new Mart().getPrice(type, num);\n  }\n\n  getTotalPrice(...rest) {\n    return new NewMart().getTotalPrice(...rest);\n  }\n}\n\nexport { Mart, NewMart, MartAdapter };\n\n\nlet martAdapter = new MartAdapter();\n//old\nmartAdapter.getPrice(\"cola\", 5);\n//new\nmartAdapter.getTotalPrice({ type: \"cola\", length: 3 }, { type: \"bread\", length: 2 });\n","routePath":"/algorithm/pattern/06","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"桥接模式(Bridge)","content":"#\n\n将抽象与其实现分离，以便两者可以独立变化。\n\n// input device\nclass Mouse {\n  constructor(output) {\n    this.output = output;\n  }\n  click() {\n    this.output.click();\n  }\n  move() {\n    this.output.move();\n  }\n}\n\n// output device\nclass Screen {\n  construcotr() {}\n  click() {\n    console.log(\"screen click\");\n  }\n  move() {\n    console.log(\"screen move\");\n  }\n}\nexport { Mouse, Screen };\n\n\nconst screen = new Screen();\nconst mouse = new Mouse(screen);\nmouse.click();\nmouse.move();\n","routePath":"/algorithm/pattern/07","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"组合模式(Composite Pattern)","content":"#\n\n又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了\n对象组的树形结构。","routePath":"/algorithm/pattern/08","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"装饰者模式(Decorator)","content":"#\n\n动态地将附加职责附加到对象。 装饰器为子类化提供了灵活的替代扩展功能。\n\nclass User {\n  constructor(name, password) {\n    this.name = name;\n    this.password = password;\n  }\n}\nclass DecoratorUser {\n  constructor(user, email, tel) {\n    this.name = user.name;\n    this.password = user.password;\n    this.email = email;\n    this.tel = tel;\n  }\n  get() {\n    return this;\n  }\n}\n\nexport { User, DecoratorUser };\n\n\nlet user = new User(\"dao\", \"1234\");\nlet decUser = new DecoratorUser(user, \"julong1988@naver.com\", \"15526719999\");\ndecUser.get();\n","routePath":"/algorithm/pattern/09","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"外观模式(Facade)","content":"#\n\n为子系统中的一组接口提供统一接口。 Façade 定义了一个更高级别的接口，使子系统更易于使用。\n\nclass s1 {\n  constructor() {}\n  get(name, score) {\n    return name == \"julong\" || score == 100;\n  }\n}\n\nclass s2 {\n  constructor() {}\n  get(score) {\n    return score >= 80;\n  }\n}\n\nclass s3 {\n  constructor() {}\n  get(score) {\n    return score >= 60;\n  }\n}\n\nclass Student {\n  constructor(name, score) {\n    this.name = name;\n    this.score = score;\n  }\n}\nclass CheckScore {\n  constructor(student) {\n    this.name = student.name;\n    this.score = student.score;\n    this.message = \"\";\n  }\n  result() {\n    if (new s1().get(this.name, this.score)) {\n      this.message = \"全球旅游\";\n    } else if (new s2().get(this.score)) {\n      this.message = \"挨打50大板\";\n    } else if (new s3().get(this.score)) {\n      this.message = \"强制移民去印度\";\n    } else {\n      this.message = \"死刑\";\n    }\n    return this;\n  }\n}\n\nexport { Student, CheckScore };\n\n\nlet s01 = new Student(\"julong\", 50);\nlet s01Check = new CheckScore(s01);\ns01Check.result();\n","routePath":"/algorithm/pattern/10","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"享元模式(Flyweight Pattern)","content":"#\n\n主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n\nlet textCount = 0;\nlet textAttrCount = 0;\n\nclass Text {\n  constructor() {\n    this.text = \"\";\n  }\n  add(text) {\n    this.text = text;\n    textCount++;\n  }\n}\n\nclass TextAttr {\n  constructor() {}\n  add(color, size) {\n    this.color = color;\n    this.size = size;\n    textAttrCount++;\n  }\n}\n\nclass TextFactory {\n  constructor() {\n    this.textObj = new Text();\n    this.resultText = [];\n  }\n  create(text, color, size) {\n    if (this.textObj.text != text) {\n      this.textObj = new Text();\n      this.textObj.add(text);\n    }\n    let textAttr = new TextAttr();\n    textAttr.add(color, size);\n    this.resultText.push({\n      id: this.textObj.text + textAttr.color + textAttr.size,\n      text: this.textObj.text,\n      color: textAttr.color,\n      size: textAttr.size,\n    });\n  }\n\n  get() {\n    return this.resultText;\n  }\n\n  getCount() {\n    return {\n      textCount,\n      textAttrCount,\n    };\n  }\n}\n\nexport default TextFactory;\n\n\nlet text01 = new TextFactory();\ntext01.create(\"hello world\", \"red\", 14);\ntext01.create(\"hello world\", \"blue\", 16);\ntext01.create(\"hello world\", \"green\", 15);\ntext01.create(\"what the fuck~\", \"gray\", 30);\ntext01.get();\ntext01.getCount();\n","routePath":"/algorithm/pattern/11","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"代理模式(Proxy)","content":"#\n\n为另一个对象提供代理或占位符以控制对它的访问。\n\nclass Cola {\n  constructor() {\n    this.length = 0;\n  }\n  buy(length) {\n    this.length = this.length + length;\n  }\n  get() {\n    return this.length;\n  }\n}\n\nclass ColaProxy {\n  constructor() {\n    this.buyCola = new Cola();\n    this.count = 0;\n  }\n  buy(length) {\n    this.buyCola.buy(length);\n    this.count++;\n  }\n  get() {\n    return this.buyCola.get();\n  }\n  getCount() {\n    return this.count;\n  }\n}\n\nexport { Cola, ColaProxy };\n","routePath":"/algorithm/pattern/12","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"职责链模式(Chain of Responsibility)","content":"#\n\n通过为多个对象提供处理请求的机会，避免将请求的发送者耦合到其接收者。 链接接收对象并沿链传递请求，直到对象处理它。\n\nclass Request {\n  constructor(amount) {\n    this.amount = amount;\n    console.log(\"Requested: $\" + amount + \"\\n\");\n  }\n\n  get(bill) {\n    const count = Math.floor(this.amount / bill);\n    this.amount -= count * bill;\n    console.log(\"Dispense \" + count + \" $\" + bill + \" bills\");\n    return this;\n  }\n}\n\n\nconst request = new Request(378);\nrequest.get(100).get(50).get(20).get(10).get(5).get(1);\n","routePath":"/algorithm/pattern/13","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"命令模式(Command)","content":"#\n\n请求以命令的形式包裹在对象中\n\nlet add = (...rest) => rest.reduce((total, num) => total + num);\nlet sub = (a, b) => a - b;\nlet mul = (a, b) => a * b;\nlet div = (a, b) => a / b;\n\nclass Calculator {\n  constructor() {}\n  add(...rest) {\n    return add(...rest);\n  }\n  sub(a, b) {\n    return sub(a, b);\n  }\n  mul(a, b) {\n    return mul(a, b);\n  }\n  div(a, b) {\n    return div(a, b);\n  }\n}\n\nexport default Calculator;\n\n\ncalculator.add(2, 4, 5);\ncalculator.sub(22, 13);\ncalculator.mul(3, 7);\ncalculator.div(9, 3);\n","routePath":"/algorithm/pattern/14","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"解释器模式(Interpreter)","content":"#\n\n一种在程序中包含语言元素的方法","routePath":"/algorithm/pattern/15","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"迭代器模式(Iterator)","content":"#\n\n提供一种顺序访问聚合对象元素的方法，而不会暴露其基础表示。\n\nclass Iterator {\n  constructor(items) {\n    this.index = 0;\n    this.items = items;\n  }\n  first() {\n    this.index = 0;\n    return this.items[0];\n  }\n  next() {\n    this.index++;\n    return this.items[this.index];\n  }\n  hasNext() {\n    return this.items.length - 1 > this.index;\n  }\n  reset() {\n    this.index = 0;\n  }\n  each(callback) {\n    for (let i = 0; i < this.items.length; i++) {\n      callback(this.items[i]);\n    }\n  }\n}\n\n\nconst items = [\"one\", 2, \"circle\", true, \"Applepie\"];\nconst iter = new Iterator(items);\n\nconsole.log(iter.first());\nconsole.log(iter.next());\nconsole.log(iter.next());\nconsole.log(iter.next());\nconsole.log(iter.hasNext());\nconsole.log(iter.next());\n\niter.each(function (e) {\n  console.log(e);\n});\n","routePath":"/algorithm/pattern/16","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"中介者模式(Mediator)","content":"#\n\n定义类之间的简化通信\n\nclass User {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  sendMessage(target, message) {\n    target.addMessage(this.name, message);\n  }\n}\n\nclass ChatRoom {\n  constructor(crname) {\n    this.crname = crname;\n    this.message = [];\n  }\n  addMessage(name, message) {\n    this.message.unshift({ name, message });\n  }\n  showMessage() {\n    return this.message;\n  }\n}\nexport { User, ChatRoom };\n\n\nlet user1 = new User(\"julong\", \"23\");\nlet user2 = new User(\"dao\", \"32\");\nlet devRoom = new ChatRoom(\"devroom\");\nuser1.sendMessage(devRoom, \"hello\");\nuser1.sendMessage(devRoom, \"hi~  what\");\nuser2.sendMessage(devRoom, \"halou ju long \");\ndevRoom.showMessage();\n","routePath":"/algorithm/pattern/17","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"备忘录模式(Memento)","content":"#\n\n可以使用此模式的一个例子是将物件回复到其先前的状态\n\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  hydrate() {\n    return { ...this };\n  }\n\n  deydreate({ name, age }) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nclass Store {\n  constructor() {\n    this.store = {};\n  }\n\n  add(key, value) {\n    this.store[key] = value;\n  }\n  get(key) {\n    return this.store[key];\n  }\n}\n\n\nconst dao = new Person(\"dao\", 12);\nconst lang = new Person(\"lang\", 30);\nconst store = new Store();\n\nstore.add(1, dao.hydrate());\nstore.add(2, lang.hydrate());\n\ndao.name = \"newdao\";\nlang.name = \"newlang\";\n\nconsole.log(dao);\nconsole.log(lang);\n\ndao.deydreate(store.get(1));\nlang.deydreate(store.get(2));\nconsole.log(dao);\nconsole.log(lang);\n","routePath":"/algorithm/pattern/18","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"观察者模式(Observer)","content":"#\n\n定义对象之间的一对多依赖关系，以便当一个对象更改状态时，将自动通知和更新其所有依赖项。\n\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n  sendPrice(target, price) {\n    target.addPrice(price);\n  }\n  getPrice(target) {\n    return target.getPrice();\n  }\n}\n\nclass Auction {\n  constructor() {\n    this.price = 0;\n    this.sellState = true;\n  }\n  addPrice(price) {\n    this.sellState ? (price > this.price ? (this.price = price) : \"\") : \"\";\n  }\n  getPrice() {\n    return this.price;\n  }\n  closeSell() {\n    this.sellState = false;\n  }\n}\n\nexport { User, Auction };\n\n\nlet user1 = new User(\"julong\");\nlet user2 = new User(\"dao\");\nlet auction = new Auction();\nuser1.sendPrice(auction, 12);\nuser2.sendPrice(auction, 32);\nuser1.getPrice(auction);\nauction.closeSell();\nuser2.sendPrice(auction, 36);\nuser1.getPrice(auction);\n","routePath":"/algorithm/pattern/19","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"状态模式(State)","content":"#\n\n在状态发生变化时改变对象的行为\n\n/*\nstate\n0 销售中\n1 订单成功\n2 商品转到物流\n3 物流发送\n*/\nclass System {\n  constructor() {\n    this.state = 0;\n  }\n  setState(state) {\n    this.state = state;\n  }\n}\n\nclass Sales {\n  constructor() {}\n  confirmOrder(target) {\n    target.state == 1 ? target.setState(2) : \"\";\n  }\n}\n\nclass Logistics {\n  constructor() {}\n  complet(target) {\n    target.state == 2 ? target.setState(3) : \"\";\n  }\n}\n\nclass Client {\n  constructor() {}\n  buy(target) {\n    target.state == 0 ? target.setState(1) : \"\";\n  }\n}\n\nexport { System, Sales, Logistics, Client };\n\n\nlet system = new System();\nlet client = new Client(\"julong\");\nlet sales = new Sales(\"sale1\");\nlet logistics = new Logistics(\"l1\");\nclient.buy(system);\nsales.confirmOrder(system);\nlogistics.complet(system);\n","routePath":"/algorithm/pattern/20","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"策略模式(Strategy)","content":"#\n\n将算法封装在类中\n\nclass Market1 {\n  constructor() {\n    this.products = {\n      cola: {\n        price: 3,\n        length: 20,\n      },\n    };\n  }\n\n  caculate(obj) {\n    return this.products[obj.name].price * obj.length;\n  }\n}\n\nclass Market2 {\n  constructor() {\n    this.products = {\n      cola: {\n        price: 2.5,\n        length: 20,\n      },\n    };\n  }\n\n  caculate(obj) {\n    return this.products[obj.name].price * obj.length;\n  }\n}\n\nclass Shop {\n  constructor(market) {\n    this.market = market;\n  }\n\n  caculate(obj) {\n    return this.market.caculate(obj);\n  }\n}\n\nexport { Shop, Market1, Market2 };\n\n\nlet market1 = new Shop(new Market1());\nlet market2 = new Shop(new Market2());\nmarket1.caculate({ name: \"cola\", length: 3 });\nmarket2.caculate({ name: \"cola\", length: 3 });\n","routePath":"/algorithm/pattern/21","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"模板方法模式(Template Method)","content":"#","routePath":"/algorithm/pattern/22","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"访问者模式(Visitor)","content":"#","routePath":"/algorithm/pattern/23","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"Structures","content":"#\n\n\nStack#\n\nfunction Stack() {\n  let items = [];\n  // 添加元素\n  this.push = (element) => (items = [...items, element]);\n  // 删除元素\n  this.pop = () => items.pop();\n  // 返回顶元素\n  this.peek = () => items[items.length - 1];\n  // 是否为空\n  this.isEmpty = () => items.length === 0;\n  // 清空\n  this.clear = () => (items = []);\n  // 元素个数\n  this.size = () => items.length;\n  // 打印\n  this.print = () => items;\n}\n\n\n\nQueue#\n\nfunction Queue() {\n  let items = [];\n  // 添加元素\n  this.enqueue = (element) => (items = [...items, element]);\n  // 删除元素\n  this.dequeue = () => items.shift();\n  // 第一个元素\n  this.front = () => items[0];\n  // 是否为空\n  this.isEmpty = () => items.length === 0;\n  // 元素个数\n  this.size = () => items.length;\n  // 打印\n  this.print = () => items;\n}\n\nfunction PriorityQueue() {\n  let items = [];\n  // 添加元素\n  this.enqueue = (element, priority) => {\n    const obj = { element, priority };\n    for (let i = 0; i < items.length; i++) {\n      // 根据重要度插入到特定位置\n      if (priority > items[i].priority) {\n        return (items = [...items.slice(0, i), obj, ...items.slice(i)]);\n      }\n    }\n    return (items = [...items, obj]);\n    // 速度慢\n    // items = [...items, obj].sort((a,b) => b.priority - a.priority)\n  };\n  // 删除元素\n  this.dequeue = () => items.shift();\n  // 第一个元素\n  this.front = () => items[0];\n  // 是否为空\n  this.isEmpty = () => items.length === 0;\n  // 元素个数\n  this.size = () => items.length;\n  // 打印\n  this.print = () => items;\n}\n\n\n\nLinkedList#\n\nfunction LinkedList() {\n  function Node(element) {\n    this.element = element;\n    this.next = null;\n  }\n  let length = 0;\n  let head;\n\n  // 尾部添加\n  this.append = (value) => {\n    const element = new Node(value);\n    if (head) {\n      let current = head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = element;\n    } else {\n      head = element;\n    }\n    length++;\n  };\n\n  // 特定位置插入\n  this.insert = (position, value) => {\n    const element = new Node(value);\n    let index = 1;\n    let current = head;\n    let tmp;\n\n    while (index < position) {\n      current = current.next;\n      index++;\n    }\n    length++;\n    if (position === 0) {\n      element.next = current;\n      head = element;\n    } else {\n      tmp = current.next;\n      current.next = element;\n      current.next.next = tmp;\n    }\n  };\n\n  // 特定位置移除一项\n  this.removeAt = (position) => {\n    let index = 0;\n    let previos;\n    let current = head;\n\n    while (index < position) {\n      previos = current;\n      current = current.next;\n      index++;\n    }\n    previos.next = current.next;\n\n    length--;\n  };\n\n  // 移除一项\n  this.remove = (value) => {\n    let previos;\n    let current = head;\n    while (current.element !== value) {\n      previos = current;\n      current = current.next;\n    }\n    previos.next = current.next;\n    length--;\n  };\n\n  // 返回索引\n  this.indexOf = (value) => {\n    let index = 0;\n    let current = head;\n    while (current.element !== value) {\n      current = current.next;\n      index++;\n    }\n    return index;\n  };\n\n  // 是否为空\n  this.isEmpty = () => length === 0;\n\n  // 元素个数\n  this.size = () => length;\n\n  // 获取链头\n  this.getHead = () => head.element;\n\n  // 打印\n  this.print = () => head;\n}\n\n\n\nSet#\n\nfunction NS_Set(a, b) {\n  // 并集\n  this.union = () => [...new Set(a.concat(b))];\n\n  // 交集\n  this.intersection = () => a.filter((e) => b.includes(e));\n\n  // 差集\n  this.difference = () => a.filter((e) => !b.includes(e));\n\n  // 子集\n  this.subset = () => b.every((e) => a.includes(e));\n}\n\n\n\nTree#\n\nfunction BinarySearchTree() {\n  function Node(element) {\n    this.element = element;\n    this.left = null;\n    this.right = null;\n  }\n  let root;\n\n  // 添加值\n  this.insert = (element) => {\n    const node = new Node(element);\n    let current = root;\n\n    if (!root) {\n      return (root = node);\n    }\n\n    while (current.element !== node.element) {\n      if (current.element > node.element) {\n        current.left ? (current = current.left) : (current.left = node);\n      }\n\n      if (current.element < node.element) {\n        current.right ? (current = current.right) : (current.right = node);\n      }\n    }\n    return ''\n  };\n\n  // 搜索\n  this.search = (element) => {\n    let current = root;\n\n    while (current) {\n      if (current.element === element) {\n        return true;\n      }\n      current = current[current.element > element ? 'left' : 'right'];\n    }\n\n    return false;\n  };\n\n  // 最小值\n  this.min = (current = root) => {\n    while (current.left) {\n      current = current.left;\n    }\n    return current.element;\n  };\n\n  // 最大值\n  this.max = (current = root) => {\n    while (current.right) {\n      current = current.right;\n    }\n    return current.element;\n  };\n\n  // 删除元素\n  this.remove = (element, isAll = true) => {\n    let current = root;\n    let previos = {\n      node: root,\n      type: 'left',\n    };\n\n    if (root.element === element) {\n      return console.log('root无法删除');\n    }\n\n    while (current) {\n      if (current.element === element) {\n        // 删除整个节点或者无子元素\n        if (isAll || (current.left === null && current.right === null)) {\n          return (previos.node[previos.type] = null);\n        }\n\n        if (current.left !== null && current.right !== null) {\n          // 两个子节点\n          // 替换为右侧节点中最小值并保持原先的lr\n          // const value = this.min(current.right)\n          // 替换为左侧节点中最大值并保持原先的lr\n          const value = this.max(current.left);\n          this.remove(value, true);\n          previos.node[previos.type].element = value;\n        } else {\n          // 一个子节点\n          previos.node[previos.type] = current[current.left || current.right];\n        }\n        return '';\n        //\n      }\n      previos = {\n        node: current,\n        type: current.element > element ? 'left' : 'right',\n      };\n      current = current[current.element > element ? 'left' : 'right'];\n    }\n\n    return false;\n  };\n\n  // 中序遍历\n  this.inOrderTraverse = () => {\n    function fn(node) {\n      if (node.left) {\n        fn(node.left);\n      }\n      console.log(node.element);\n      if (node.right) {\n        fn(node.right);\n      }\n    }\n    fn(root);\n  };\n  // 先序遍历\n  this.preOrderTraverse = () => {\n    function fn(node) {\n      console.log(node.element);\n      if (node.left) {\n        fn(node.left);\n      }\n\n      if (node.right) {\n        fn(node.right);\n      }\n    }\n    fn(root);\n  };\n  // 后序遍历7\n  this.postOrderTraverse = () => {\n    function fn(node) {\n      if (node.left) {\n        fn(node.left);\n      }\n      if (node.right) {\n        fn(node.right);\n      }\n      console.log(node.element);\n    }\n    fn(root);\n  };\n\n  this.print = () => console.log(JSON.stringify(root, null, 2));\n}\n","routePath":"/algorithm/structures","lang":"","toc":[{"text":"Stack","id":"stack","depth":2,"charIndex":3},{"text":"Queue","id":"queue","depth":2,"charIndex":395},{"text":"LinkedList","id":"linkedlist","depth":2,"charIndex":1421},{"text":"Set","id":"set","depth":2,"charIndex":3156},{"text":"Tree","id":"tree","depth":2,"charIndex":3446}],"frontmatter":{},"version":""},{"title":"ollama","content":"#\n\n\n명령어#\n\n명령어                     기능 요약\nollama --help           전체 명령어 및 옵션 확인\nollama --version        버전 정보 확인\nollama serve            Ollama 서버 시작\nollama pull <모델>        모델 다운로드만 수행\nollama run <모델>         모델 다운로드 + 실행 (대화 세션)\nollama list             로컬 모델 목록 출력\nollama ps               현재 실행 중인 모델 목록 확인\nollama stop <모델>        실행 중 모델 종료\nollama rm <모델>          모델 삭제\nollama show <모델>        모델 메타 데이터 보기\nollama cp <src> <dst>   모델 복제\nollama push <모델>        모델을 레지스트리로 업로드","routePath":"/artificialIntelligence/ollama","lang":"","toc":[{"text":"명령어","id":"명령어","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Hello","content":"#\n\n:::giphy xTiTngMMCIt7FramOc :::","routePath":"/hello/","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"Portfolio","content":"#\n\n\nLibrary#\n\nJECO#\n\n별도의 셋팅이 필요없는 React 개발 환경을 만들어 보고 싶어서 도전했던 프로젝트\n\n * npm: https://www.npmjs.com/package/jeco\n * github: https://github.com/jl917/jeco\n\nJNPKG#\n\nNPM 패키지를 편하게 만들기 위해서 만들었던 좋은 도구이고 semantic-release가 포함되어서 초기 관리가 굉장히 편리\n\n * npm: https://www.npmjs.com/package/jnpkg\n * github: https://github.com/jl917/jnpkg\n\nJBIN#\n\nNODE 기반 CLI를 누구나 만들수 있도록 도와주는 빌드도구\n\n * npm: https://www.npmjs.com/package/@julong/jbin\n * github: https://github.com/jl917/jbin\n\nCHECKER#\n\n프로젝트 품질향상을 위한 도구로 eslint, stylelint, markdownlint, htmlhint를 포함\n\n * npm: https://www.npmjs.com/package/@julong/checker\n * github: https://github.com/jl917/checker\n\nESlint Watch#\n\nESLint를 번들러에 포함시키지 않고 별도로 비동기처리 함으로써 개발환경을 개선하고자 만들었던 프로젝트\n\n * npm: https://www.npmjs.com/package/@julong/eslint-watch\n * github: https://github.com/jl917/eslintWatch\n\nmicro-frontend-utils#\n\n마이크로 프론트엔드 구축할때 React 또는 Vue의 mount, unmount를 도와주는 유틸\n\n * npm: https://www.npmjs.com/package/@julong/micro-frontend-utils\n * github: https://github.com/jl917/micro-frontend-utils\n\n\nPlugin#\n\nbabel-plugin-add-optional-chaining#\n\n일부환경에 필요한 기능으로서 옵셔널 체이닝을 자동으로 추가해서 TypeError 오류를 발생 최소화\n\n * npm: https://www.npmjs.com/package/babel-plugin-add-optional-chaining\n * github: https://github.com/jl917/babel-plugin-add-optional-chaining\n\nrspress-plugin-sitemap#\n\nSEO 검색엔진에 필요한 사이트맵 자동생성 플러그인\n\n * npm: https://www.npmjs.com/package/rspress-plugin-sitemap\n * github: https://github.com/jl917/rspress-plugin-sitemap\n\nrspress-plugin-clarity#\n\nMicrosoft Clarity 연동을 위한 플러그인\n\n * npm: https://www.npmjs.com/package/rspress-plugin-clarity\n * github: https://github.com/jl917/rspress-plugin-clarity\n\nvite-plugin-jsx-remove-attrs#\n\nvite 개발환경에서 빌드시 불필요한 속성을 제거해주는 플러그인\n\n * npm: https://www.npmjs.com/package/@julong/vite-plugin-jsx-remove-attrs\n * github: https://github.com/jl917/vite-plugin-jsx-remove-attrs\n\nwebpack-plugin-runtime-assets#\n\n마이크로 프론트엔드 개발시 runtime에 꼭 필요한 js파일만 가져오는 플러그인\n\n * npm: https://www.npmjs.com/package/@julong/webpack-plugin-runtime-assets\n * github: https://github.com/jl917/webpack-plugin-runtime-assets\n\nwinston-mongodb#\n\nexpress 서버에서 winston 사용시 관련로그를 mongodb에 저장하는 플러그인\n\n * npm: https://www.npmjs.com/package/@julong/winston-mongodb\n * github: https://github.com/jl917/winston-mongodb","routePath":"/hello/portfolio","lang":"","toc":[{"text":"Library","id":"library","depth":2,"charIndex":3},{"text":"JECO","id":"jeco","depth":4,"charIndex":13},{"text":"JNPKG","id":"jnpkg","depth":4,"charIndex":153},{"text":"JBIN","id":"jbin","depth":4,"charIndex":321},{"text":"CHECKER","id":"checker","depth":4,"charIndex":457},{"text":"ESlint Watch","id":"eslint-watch","depth":4,"charIndex":631},{"text":"micro-frontend-utils","id":"micro-frontend-utils","depth":4,"charIndex":814},{"text":"Plugin","id":"plugin","depth":2,"charIndex":1018},{"text":"babel-plugin-add-optional-chaining","id":"babel-plugin-add-optional-chaining","depth":4,"charIndex":1027},{"text":"rspress-plugin-sitemap","id":"rspress-plugin-sitemap","depth":4,"charIndex":1266},{"text":"rspress-plugin-clarity","id":"rspress-plugin-clarity","depth":4,"charIndex":1442},{"text":"vite-plugin-jsx-remove-attrs","id":"vite-plugin-jsx-remove-attrs","depth":4,"charIndex":1619},{"text":"webpack-plugin-runtime-assets","id":"webpack-plugin-runtime-assets","depth":4,"charIndex":1828},{"text":"winston-mongodb","id":"winston-mongodb","depth":4,"charIndex":2050}],"frontmatter":{},"version":""},{"title":"Social","content":"#\n\n * https://github.com/jl917\n * https://codesandbox.io/u/jl917\n * https://www.npmjs.com/~julong\n * https://leetcode.cn/u/julong1988/","routePath":"/hello/social","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"Software","content":"#\n\n\n개발용#\n\n이름                   링크\nZsh                  https://ohmyz.sh/\nHomebrew             https://brew.sh/\nGit 다운로드             https://git-scm.com/download/mac\nGit SSH 키 생성         https://git-scm.com/book/zh/v2/服务器上的-Git-生成-SSH-公钥\nNode.js              https://formulae.brew.sh/formula/node\nPict                 brew install pict\nVisual Studio Code   https://code.visualstudio.com/\nVS Code 설정           https://code.visualstudio.com/docs/setup/mac\nSpectacle            https://github.com/eczarny/spectacle/releases\nVSCodium             https://vscodium.com/\nSmart JSON Editor    http://www.smartjsoneditor.com/\nGitHub Desktop       https://desktop.github.com/\nNVM                  https://github.com/nvm-sh/nvm/tree/master\nStudio 3T            https://studio3t.com/download/\nCursor               https://cursor.sh/\nPicGo                https://molunerfinn.com/PicGo/\nChrome 베타            https://www.google.com/chrome/beta/\nChrome 한국어           https://www.google.com/intl/ko/chrome/\nPostman              https://www.postman.com/downloads/?utm_source=postman-home\nNotion               https://www.notion.so/ko-kr\nGas Mask             https://github.com/2ndalpha/gasmask\nreqable              https://reqable.com/en-US/\nOphiuchi             https://www.ophiuchi.dev/\nDebugtron            https://github.com/pd4d10/debugtron\ntrae                 https://www.trae.ai/\nrust                 https://rust-lang.org/learn/get-started/\nyoutubedownload      https://ytdn.netlify.app/#mac\n\n\nAI#\n\n| 이름 | 링크 | | ollama | https://ollama.com/download | | chatbox |\nhttps://chatboxai.app/en | | anythingllm | https://anythingllm.com/desktop |\n\n\n개인용#\n\n이름          링크\nIINA        https://iina.io/\nMotrix      https://motrix.app/\nFileZilla   https://filezilla-project.org/\nWireshark   https://www.wireshark.org/\nInfuse      https://apps.apple.com/kr/app/infuse-비디오-플레이어/id1136220934\nPicView     https://picview.org/\n\n\n설정#\n\nalias pip=/usr/bin/pip3\nalias python=/usr/bin/python3\n\necho 'export PATH=/opt/homebrew/bin:$PATH' >> ~/.zshrc\n\ngit config --global user.name \"JuLong\"\ngit config --global user.email julong1988@naver.com\nnpm install -g http-server\ncd ~/\nmkdir .ssh\ncd .ssh\nssh-keygen -o\ncat ~/.ssh/id_rsa.pub\n\nxattr -cr /Applications/PicGo.app\nsudo spctl --master-disable\n\ndefaults write com.apple.finder AppleShowAllFiles -bool true\nkillall Finder\n\n## npm set\nnpm set init-author-name 'jl917'\nnpm set init-author-email 'julong1988@naver.com'\nnpm set init-author-url 'https://jl917.github.io'\nnpm set init-license 'MIT'\n\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n\n\n# .zshrc\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\nexport ZSH=\"$HOME/.oh-my-zsh\"\nZSH_THEME=\"robbyrussell\"\nplugins=(git)\nsource $ZSH/oh-my-zsh.sh\nexport PATH=/opt/homebrew/bin:$PATH\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\nautoload -U add-zsh-hook\nload-nvmrc() {\n  local nvmrc_path\n  nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n  if [ -n \"$nvmrc_path\" ]; then\n    local nvmrc_node_version\n    nvmrc_node_version=$(nvm version \"$(cat \"${nvmrc_path}\")\")\n\n    if [ \"$nvmrc_node_version\" = \"N/A\" ]; then\n      nvm install\n    elif [ \"$nvmrc_node_version\" != \"$(nvm version)\" ]; then\n      nvm use\n    fi\n  elif [ -n \"$(PWD=$OLDPWD nvm_find_nvmrc)\" ] && [ \"$(nvm version)\" != \"$(nvm version default)\" ]; then\n    echo \"Reverting to nvm default version\"\n    nvm use default\n  fi\n}\n\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n\n\n\n\n\n기타 설치#\n\nbrew install python\n","routePath":"/hello/software","lang":"","toc":[{"text":"개발용","id":"개발용","depth":2,"charIndex":3},{"text":"AI","id":"ai","depth":2,"charIndex":1483},{"text":"개인용","id":"개인용","depth":2,"charIndex":1632},{"text":"설정","id":"설정","depth":2,"charIndex":1902},{"text":"기타 설치","id":"기타-설치","depth":2,"charIndex":3668}],"frontmatter":{},"version":""},{"title":"ESC/POS 프린터 명령어 문서","content":"#\n\n\n기본 제어 문자#\n\n * LF (\\x0a): 라인 피드 (줄바꿈)\n * FS (\\x1c): 필드 구분자\n * FF (\\x0c): 폼 피드 (페이지 넘김)\n * GS (\\x1d): 그룹 구분자\n * DLE (\\x10): 데이터 링크 이스케이프\n * EOT (\\x04): 전송 종료\n * NUL (\\x00): Null 문자\n * ESC (\\x1b): 이스케이프 시퀀스 시작\n * TAB (\\x74): 탭\n * EOL (\\n): 줄 끝\n\n\n피드 제어 시퀀스#\n\n * CTL_LF (\\x0a): 인쇄 후 줄바꿈\n * CTL_GLF (\\x4a\\x00): 줄 간격 없이 인쇄 및 용지 공급\n * CTL_FF (\\x0c): 폼 피드\n * CTL_CR (\\x0d): 캐리지 리턴\n * CTL_HT (\\x09): 수평 탭\n * CTL_VT (\\x0b): 수직 탭\n\n\n문자 간격#\n\n * CS_DEFAULT (\\x1b\\x20\\x00): 기본 문자 간격으로 설정\n * CS_SET (\\x1b\\x20): 문자 간격 설정\n\n\n줄 간격#\n\n * LS_DEFAULT (\\x1b\\x32): 기본 줄 간격으로 설정\n * LS_SET (\\x1b\\x33): 줄 간격 설정\n\n\n하드웨어 제어#\n\n * HW_INIT (\\x1b\\x40): 버퍼 데이터 삭제 및 모드 초기화\n * HW_SELECT (\\x1b\\x3d\\x01): 프린터 선택\n * HW_RESET (\\x1b\\x3f\\x0a\\x00): 프린터 하드웨어 리셋\n\n\n금전함 제어#\n\n * CD_KICK_2 (\\x1b\\x70\\x00\\x19\\x78): 2번 핀으로 펄스 신호 전송\n * CD_KICK_5 (\\x1b\\x70\\x01\\x19\\x78): 5번 핀으로 펄스 신호 전송\n\n\n여백 설정#\n\n * BOTTOM (\\x1b\\x4f): 하단 여백 설정\n * LEFT (\\x1b\\x6c): 좌측 여백 설정\n * RIGHT (\\x1b\\x51): 우측 여백 설정\n\n\n용지 컷팅#\n\n * PAPER_FULL_CUT (\\x1d\\x56\\x00): 용지 완전 절단\n * PAPER_PART_CUT (\\x1d\\x56\\x01): 용지 부분 절단\n * PAPER_CUT_A (\\x1d\\x56\\x41): A 타입 부분 절단\n * PAPER_CUT_B (\\x1d\\x56\\x42): B 타입 부분 절단\n * STAR_FULL_CUT (\\x1B\\x64\\x02): STAR 프린터용 완전 절단\n\n\n텍스트 포맷#\n\n\n기본 포맷#\n\n * TXT_NORMAL (\\x1b\\x21\\x00): 일반 텍스트\n * TXT_2HEIGHT (\\x1b\\x21\\x10): 2배 높이 텍스트\n * TXT_2WIDTH (\\x1b\\x21\\x20): 2배 너비 텍스트\n * TXT_4SQUARE (\\x1b\\x21\\x30): 2배 높이 및 너비 텍스트\n * STAR_TXT_EMPHASIZED (\\x1B\\x45): STAR 프린터용 강조 텍스트\n * STAR_CANCEL_TXT_EMPHASIZED (\\x1B\\x46): STAR 프린터용 강조 취소\n\n\n텍스트 스타일#\n\n * TXT_UNDERL_OFF (\\x1b\\x2d\\x00): 밑줄 해제\n * TXT_UNDERL_ON (\\x1b\\x2d\\x01): 1점 밑줄 설정\n * TXT_UNDERL2_ON (\\x1b\\x2d\\x02): 2점 밑줄 설정\n * TXT_BOLD_OFF (\\x1b\\x45\\x00): 굵은 글씨 해제\n * TXT_BOLD_ON (\\x1b\\x45\\x01): 굵은 글씨 설정\n * TXT_ITALIC_OFF (\\x1b\\x35): 이탤릭체 해제\n * TXT_ITALIC_ON (\\x1b\\x34): 이탤릭체 설정\n\n\n글꼴 설정#\n\n * TXT_FONT_A (\\x1b\\x4d\\x00): A 글꼴\n * TXT_FONT_B (\\x1b\\x4d\\x01): B 글꼴\n * TXT_FONT_C (\\x1b\\x4d\\x02): C 글꼴\n\n\n정렬#\n\n * TXT_ALIGN_LT (\\x1b\\x61\\x00): 왼쪽 정렬\n * TXT_ALIGN_CT (\\x1b\\x61\\x01): 가운데 정렬\n * TXT_ALIGN_RT (\\x1b\\x61\\x02): 오른쪽 정렬\n\n\nSTAR 프린터 정렬#\n\n * STAR_TXT_ALIGN_LA (\\x1B\\x1D\\x61\\x00): 왼쪽 정렬\n * STAR_TXT_ALIGN_CA (\\x1B\\x1D\\x61\\x01): 가운데 정렬\n * STAR_TXT_ALIGN_RA (\\x1B\\x1D\\x61\\x02): 오른쪽 정렬\n\n\n바코드 포맷#\n\n\n텍스트 위치#\n\n * BARCODE_TXT_OFF (\\x1d\\x48\\x00): HRI 문자 표시 안함\n * BARCODE_TXT_ABV (\\x1d\\x48\\x01): HRI 문자 위쪽 표시\n * BARCODE_TXT_BLW (\\x1d\\x48\\x02): HRI 문자 아래쪽 표시\n * BARCODE_TXT_BTH (\\x1d\\x48\\x03): HRI 문자 위아래 표시\n\n\n바코드 글꼴#\n\n * BARCODE_FONT_A (\\x1d\\x66\\x00): A 글꼴\n * BARCODE_FONT_B (\\x1d\\x66\\x01): B 글꼴\n\n\n바코드 타입#\n\n * BARCODE_UPC_A (\\x1d\\x6b\\x00): UPC-A\n * BARCODE_UPC_E (\\x1d\\x6b\\x01): UPC-E\n * BARCODE_EAN13 (\\x1d\\x6b\\x02): EAN13\n * BARCODE_EAN8 (\\x1d\\x6b\\x03): EAN8\n * BARCODE_CODE39 (\\x1d\\x6b\\x04): CODE39\n * BARCODE_ITF (\\x1d\\x6b\\x05): ITF\n * BARCODE_NW7 (\\x1d\\x6b\\x06): NW7\n * BARCODE_CODE93 (\\x1d\\x6b\\x48): CODE93\n * BARCODE_CODE128 (\\x1d\\x6b\\x49): CODE128\n\n\n2D 코드 포맷#\n\n\n타입#\n\n * TYPE_PDF417: PDF417 바코드\n * TYPE_DATAMATRIX: Data Matrix\n * TYPE_QR: QR 코드\n\n\nQR 코드 오류 수정 레벨#\n\n * QR_LEVEL_L: 7% 오류 수정\n * QR_LEVEL_M: 15% 오류 수정\n * QR_LEVEL_Q: 25% 오류 수정\n * QR_LEVEL_H: 30% 오류 수정\n\n\n이미지 포맷#\n\n * S_RASTER_N: 일반 크기 래스터 이미지\n * S_RASTER_2W: 2배 너비 래스터 이미지\n * S_RASTER_2H: 2배 높이 래스터 이미지\n * S_RASTER_Q: 4배 크기 래스터 이미지\n\n\n비트맵 포맷#\n\n * BITMAP_S8: 8-bit 단일 밀도\n * BITMAP_D8: 8-bit 이중 밀도\n * BITMAP_S24: 24-bit 단일 밀도\n * BITMAP_D24: 24-bit 이중 밀도\n\n\n색상 설정#\n\n * 0 (\\x1b\\x72\\x00): 검정색\n * 1 (\\x1b\\x72\\x01): 빨간색\n * REVERSE (\\x1dB1): 색상 반전 (흰색 텍스트, 검은 배경)\n * UNREVERSE (\\x1dB0): 색상 반전 해제 (검은 텍스트, 흰색 배경)","routePath":"/mark/escpos","lang":"","toc":[{"text":"기본 제어 문자","id":"기본-제어-문자","depth":2,"charIndex":3},{"text":"피드 제어 시퀀스","id":"피드-제어-시퀀스","depth":2,"charIndex":246},{"text":"문자 간격","id":"문자-간격","depth":2,"charIndex":423},{"text":"줄 간격","id":"줄-간격","depth":2,"charIndex":508},{"text":"하드웨어 제어","id":"하드웨어-제어","depth":2,"charIndex":586},{"text":"금전함 제어","id":"금전함-제어","depth":2,"charIndex":720},{"text":"여백 설정","id":"여백-설정","depth":2,"charIndex":837},{"text":"용지 컷팅","id":"용지-컷팅","depth":2,"charIndex":937},{"text":"텍스트 포맷","id":"텍스트-포맷","depth":2,"charIndex":1166},{"text":"기본 포맷","id":"기본-포맷","depth":3,"charIndex":1176},{"text":"텍스트 스타일","id":"텍스트-스타일","depth":3,"charIndex":1460},{"text":"글꼴 설정","id":"글꼴-설정","depth":3,"charIndex":1753},{"text":"정렬","id":"정렬","depth":3,"charIndex":1868},{"text":"STAR 프린터 정렬","id":"star-프린터-정렬","depth":3,"charIndex":1991},{"text":"바코드 포맷","id":"바코드-포맷","depth":2,"charIndex":2150},{"text":"텍스트 위치","id":"텍스트-위치","depth":3,"charIndex":2160},{"text":"바코드 글꼴","id":"바코드-글꼴","depth":3,"charIndex":2365},{"text":"바코드 타입","id":"바코드-타입","depth":3,"charIndex":2454},{"text":"2D 코드 포맷","id":"2d-코드-포맷","depth":2,"charIndex":2814},{"text":"타입","id":"타입","depth":3,"charIndex":2826},{"text":"QR 코드 오류 수정 레벨","id":"qr-코드-오류-수정-레벨","depth":3,"charIndex":2910},{"text":"이미지 포맷","id":"이미지-포맷","depth":2,"charIndex":3028},{"text":"비트맵 포맷","id":"비트맵-포맷","depth":2,"charIndex":3157},{"text":"색상 설정","id":"색상-설정","depth":2,"charIndex":3276}],"frontmatter":{},"version":""},{"title":"Conventional Commits","content":"#\n\n\n참고#\n\n * https://www.conventionalcommits.org/en/v1.0.0/\n\n컨벤션 스타일#\n\n * @commitlint/config-angular\n * @commitlint/config-conventional\n * @commitlint/config-lerna-scopes\n * @commitlint/config-nx-scopes\n * @commitlint/config-patternplate\n * conventional-changelog-lint-config-atom\n * conventional-changelog-lint-config-canonical\n * commitlint-config-jira","routePath":"/mark/guideline/commits","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3},{"text":"컨벤션 스타일","id":"컨벤션-스타일","depth":4,"charIndex":59}],"frontmatter":{},"version":""},{"title":"Front-End Checklist","content":"#\n\n\n참고#\n\n * https://github.com/thedaviddias/Front-End-Checklist","routePath":"/mark/guideline/frontend-checklist","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Nodejs Best Practices","content":"#\n\n\n참고#\n\n * https://github.com/goldbergyoni/nodebestpractices/tree/master","routePath":"/mark/guideline/node","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Project Guidelines","content":"#\n\n\n참고#\n\n * https://github.com/elsewhencode/project-guidelines","routePath":"/mark/guideline/project","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Code Review(js/ts)","content":"#\n\n * 새로운 종속성 검토\n * 라이브러리 중복 방지\n * 가져오기 관행 검증\n * 번역 검증(새로 추가된 영역이 제대로 지역화되었는지 확인)\n * 적절한 타이핑 적용\n * 명명 규칙 확인\n * 부울 접두사 사용(부울 의도를 명확히 하기 위해 is, are 또는 should 사용)\n * 함수 이름은 함수가 수행하거나 반환하는 내용을 설명해야 합니다.\n * 지나치게 복잡한 로직 주의\n * 장황한 코드 간소화\n * 모호한 코드에 대한 문의\n * 하드코딩된 값 사용 금지(경로, 이름, 값을 상수 또는 구성으로 이동)\n * 이전 버전과의 호환성 유지\n * 반복적인 로직 제거\n * 폼 유효성 검사 확인\n * 누락되었거나 처리되지 않은 try/catch 블록 확인\n * 비동기 작업이 효율적이고 올바르게 처리되는지 확인\n * 이전 개발 경험을 활용하여 코드 개선 방향 제시","routePath":"/mark/guideline/review","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"Semantic Versioning","content":"#\n\n\n참고#\n\n * https://semver.org/","routePath":"/mark/guideline/semver","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Javascript Testing Best Practices","content":"#\n\n\n참고#\n\n * https://github.com/goldbergyoni/javascript-testing-best-practices","routePath":"/mark/guideline/test","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"Web Content Accessibility Guidelines","content":"#\n\n\n참고#\n\n * http://www.kwacc.or.kr/WAI/wcag21/","routePath":"/mark/guideline/wcag","lang":"","toc":[{"text":"참고","id":"참고","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"npm packages","content":"Mark#\n\n * 得物商家客服从 Electron 迁移到 Tauri 的技术实践\n * RFC: JSON Merge\n * Web 3D 引擎 galacean\n * Deeper Dive Into React\n * source-map\n * source-map 설명\n * source-map-visualization\n * WHATWG-Standards\n * Google Style Guides(html, css, js, ts ...)\n * AngularJS Git Commit Message Conventions\n * 贡献者公约 Contributor Covenant Translations\n * Github Community Guidelines\n * JavaScript Standard Style\n * Fake Images\n * Dynamic DummyImage Generator\n * JavaScript Patterns\n * creativecommons\n * Test your front-end against a real API\n * JSON Schema Validator\n * Emmet\n * ColorSpace\n * Google SEO\n * Web Platform Incubator Community Group\n * The HTTP Archive Tracks How the Web is Built\n * Tauri VS Electron 启动性能 PK\n\n\nEducation#\n\n * fullstackopen\n * Rust Course\n * Rusty Book\n\n\nReact core#\n\n * https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkzMjIxNTcyMA==&action=getalbu\n   m&album_id=1783121402896678912&subscene=159&subscene=&scenenote=https%3A%2F%2\n   Fmp.weixin.qq.com%2Fs%2FUC022AC-O506ueFykZyWbQ&nolastread=1#wechat_redirect\n * https://react.iamkasong.com/\n * https://www.qinguanghui.com/\n\n\nnpm packages#\n\n * https://www.npmjs.com/package/jsbarcode\n * https://www.npmjs.com/package/qrcode\n * https://www.npmjs.com/package/dexie\n * https://www.npmjs.com/package/localforage\n * https://www.npmjs.com/search?q=node-schedule\n * https://www.npmjs.com/package/numeral\n * https://www.npmjs.com/package/currency.js\n * https://www.npmjs.com/package/print-js\n * https://www.npmjs.com/package/jsonpath-plus\n * https://www.npmjs.com/package/jimp\n * https://www.npmjs.com/package/mitt\n * https://www.npmjs.com/package/realm\n * https://www.npmjs.com/package/lozad\n * https://www.npmjs.com/package/zeromq\n * https://www.npmjs.com/package/gcoord\n * https://jsrepo.dev/\n * https://github.com/DavidHDev/react-bits\n * https://www.npmjs.com/package/fs-extra\n * https://www.npmjs.com/package/keytar\n * https://www.npmjs.com/package/archiver\n * https://www.npmjs.com/package/wcwidth","routePath":"/mark/","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"编程词汇","content":"#\n\n\nA#\n\n英文                                   译法 1        译法 2   译法 3\na block of pointers                  一块指针        一组指针   \nabbreviation                         缩略语                \nabstract                             抽象的                \nabstract syntax tree, AST            抽象语法树              \nabstraction                          抽象                 \nabstraction barrier                  抽象屏障        抽象阻碍   \nabstraction of function calls        函数调用抽象             \naccess                               访问          存取     \naccess function                      访问函数        存取函数   \naccumulator                          累加器                \nactivate                             激活                 \nad hoc                               专设                 \nadapter                              适配器                \naddress                              地址                 \nalgebraic data type                  代数数据类型             \nalgorithm                            算法                 \nalias                                别名                 \nallocate                             分配          配置     \nalternative                          备选                 \namortized analysis                   平摊分析               \nanaphoric                            指代                 \nannotation                           注解                 \nanonymous function                   匿名函数               \nantecedent                           前提          前件     先决条件\nappend                               追加          拼接     \napplication                          应用          应用程序   \napplication framework                应用框架               \napplication program interface, API   应用程序编程接口           \napplication service provider, ASP    应用程序服务提供商          \napplicative                          应用序                \nargument                             参数          自变量    实际参数/实参\narithmetic                           算术                 \narray                                数组                 \nartificial intelligence, AI          人工智能               \nassemble                             组合                 \nassembly                             汇编                 \nassignment                           赋值                 \nassignment operator                  赋值操作符              \nassociated                           关联的                \nassociation list, alist              关联列表               \natom                                 原子                 \natomic                               原子的                \natomic value                         原子型值               \nattribute                            属性          特性     \naugmented                            扩充                 \nautomatic memory management          自动内存管理             \nautomatically infer                  自动推导               \nautometa theory                      自动机理论              \nauxiliary                            辅助                 \n\n\nB#\n\n英文                          译法 1      译法 2     译法 3\nbackquote                   反引用                \nbacktrace                   回溯                 \nbackward compatible         向下兼容               \nbandwidth                   带宽                 \nbase case                   基本情形               \nbase class                  基类                 \nBayes' theorem              贝叶斯定理              \nbest viable function        最佳可行函式    最佳可行函数   \nBezier curve                贝塞尔曲线              \nbignum                      大数                 \nbinary operator             二元操作符              \nbinary search               二分查找      二分搜索     二叉搜索\nbinary search tree          二叉搜索树              \nbinary tree                 二叉树                \nbinding                     绑定                 \nbinding vector              绑定向量               \nbit                         位         比特       \nbit manipulation            位操作                \nblack box abstraction       黑箱抽象               \nblock                       块         区块       \nblock structure             块结构       区块结构     \nblock name                  代码块名字              \nBlub paradox                Blub 困境            \nbody                        体         主体       \nboilerplate                 公式化       样板       \nbookkeeping                 簿记                 \nboolean                     布尔                 \nborder                      边框                 \nbottom-up design            自底向上的设计            \nbottom-up programming       自底向上编程             \nbound                       边界                 \nbounds checking             边界检查               \nbox notation                箱子表示法              \nbrace                       花括弧       花括号      \nbracket                     方括弧       方括号      \nbranch                      分支        跳转       \nbreadth-first               广度优先               \nbreadth-first search, BFS   广度优先搜索             \nbreakpoint                  断点                 \nbrevity                     简洁                 \nbuffer                      缓冲区                \nbuffer overflow attack      缓冲区溢出攻击            \nbug                         臭虫                 \nbuilding                    创建                 \nbuilt-in                    内置                 \nbyte                        字节                 \nbytecode                    字节码                \n\n\nC#\n\n英文                                译法 1               译法 2      译法 3\ncache                             缓存                           \ncall                              调用                           \ncallback                          回调                           \nCamelCase                         驼峰式大小写                       \ncandidate function                候选函数                         \ncapture                           捕捉                           \ncase                              分支                           \ncharacter                         字符                           \nchecksum                          校验和                          \nchild class                       子类                           \nchoke point                       滞塞点                          \nchunk                             块                            \ncircular definition               循环定义                         \nclarity                           清晰                           \nclass                             类                  类别        \nclass declaration                 类声明                          \nclass library                     类库                           \nclient                            客户                 客户端       \nclipboard                         剪贴板                          \nclone                             克隆                           \nclosed world assumption           封闭世界假定                       \nclosure                           闭包                           \nclutter                           杂乱                           \ncode                              代码                           \ncode bloat                        代码膨胀                         \ncollection                        收集器                复合类型      \ncolumn                            行                  栏         \ncolumn-major order                行主序                          \ncomma                             逗号                           \ncommand-line                      命令行                          \ncommand-line interface, CLI       命令行界面                        \nCommon Lisp Object System, CLOS   Common Lisp 对象系统             \nCommon Gateway Interface, CGI     通用网关接口                       \ncompatible                        兼容                           \ncompilation                       编译                           \ncompilation parameter             编译参数                         \ncompile                           编译                           \ncompile inline                    内联编译                         \ncompile time                      编译期                          \ncompiled form                     编译后的形式                       \ncompiler                          编译器                          \ncomplex                           复杂                           \ncomplexity                        复杂度                          \ncompliment                        补集                           \ncomponent                         组件                           \ncomposability                     可组合性                         \ncomposition                       组合                 组合函数      \ncompound value                    复合数据               复合值       \ncompression                       压缩                           \ncomputation                       计算                           \ncomputer                          计算机                          \nconcatenation                     串接                           \nconcept                           概念                           \nconcrete                          具体                           \nconcurrency                       并发                           \nconcurrent                        并发                           \nconditional                       条件式                          \nconditional variable              条件变量                         \nconfiguration                     配置                           \nconnection                        连接                           \ncons                              构造                           \ncons cell                         构元                 cons 单元   \nconsequent                        结果                 推论        \nconsistent                        一致性                          \nconstant                          常量                           \nconstraint                        约束                           \nconstraint programming            约束式编程                        \ncontainer                         容器                           \ncontent-based filtering           基于内容的过滤                      \ncontext                           上下文                语境        环境\ncontinuation                      延续性                          \ncontinuous integration, CI        持续集成                         \ncontrol                           控件                           \ncooperative multitasking          协作式多任务                       \ncopy                              拷贝                           \ncorollary                         推论                           \ncoroutine                         协程                           \ncorruption                        程序崩溃                         \ncrash                             崩溃                           \ncreate                            创建                           \ncrystallize                       固化                           \ncurly                             括弧状的                         \ncurried                           柯里的                          \ncurrying                          柯里化                          \ncursor                            光标                           \ncurvy                             卷曲的                          \ncycle                             周期                           \n\n\nD#\n\n英文                                                 译法 1           译法 2     译法 3\ndangling pointer                                   迷途指针           野指针      \nDefense Advanced Research Projects Agency, DARPA   美国国防部高级研究计划局            \ndata                                               数据                      \ndata structure                                     数据结构                    \ndata type                                          数据类型                    \ndata-driven                                        数据驱动                    \ndatabase                                           数据库                     \ndatabase schema                                    数据库模式                   \ndatagram                                           数据报文                    \ndead lock                                          死锁                      \ndebug                                              调试                      \ndebugger                                           调试器                     \ndebugging                                          调试                      \ndeclaration                                        声明                      \ndeclaration forms                                  声明形式                    \ndeclarative                                        声明式            说明式      \ndeclarative knowledge                              声明式知识          说明式知识    \ndeclarative programming                            声明式编程          说明式编程    \ndeclarativeness                                    可声明性                    \ndeclaring                                          声明                      \ndeconstruction                                     解构                      \ndeduction                                          推导             推断       \ndefault                                            缺省             默认       \ndefer                                              推迟                      \ndeficiency                                         缺陷             不足       \ndefine                                             定义                      \ndefinition                                         定义                      \ndelegate                                           委托                      \ndelegation                                                                 \ndellocate                                          释放                      \ndemarshal                                          散集                      \ndeprecated                                         废弃                      \ndepth-first                                        深度优先                    \ndepth-first search, DFS                            深度优先搜索                  \nderived                                            派生                      \nderived class                                      派生类                     \ndesign pattern                                     设计模式                    \ndesignator                                         指示符                     \ndestructive                                        破坏性的                    \ndestructive function                               破坏性函数                   \ndestructuring                                      解构                      \ndevice driver                                      硬件驱动程序                  \ndimensions                                         维度                      \ndirective                                          指令                      \ndirective                                          指示符                     \ndirectory                                          目录                      \ndisk                                               盘                       \ndispatch                                           分派             派发       \ndistributed computing                              分布式计算                   \nDLL hell                                           DLL 地狱                  \ndocument                                           文档                      \ndotted list                                        点状列表                    \ndotted-pair notation                               带点尾部表示法        带点尾部记法   \nduplicate                                          复本                      \ndynamic binding                                    动态绑定                    \ndynamic extent                                     动态范围                    \ndynamic languages                                  动态语言                    \ndynamic scope                                      动态作用域                   \ndynamic type                                       动态类型                    \n\n\nE#\n\n英文                        译法 1    译法 2   译法 3\neffect                    效果             \nefficiency                效率             \nefficient                 高效             \nelaborate                                \nelucidating                              \nembedded language         嵌入式语言          \nemulate                   仿真             \nencapsulation             封装             \nenum                      枚举             \nenumeration type          枚举类型           \nenumrators                枚举器            \nenvironment               环境             \nequal                     相等             \nequality                  相等性            \nequation                  方程             \nequivalence               等价性            \nerror message             错误信息           \nerror-checking            错误检查           \nescaped                   逃脱      溢出     \nescape character          转义字符           \nevaluate                  求值      评估     \nevaluation                求值             \nevent                     事件             \nevent driven              事件驱动           \nexception                 异常             \nexception handling        异常处理           \nexception specification   异常规范           \nexit                      退出             \nexpendable                可扩展的           \nexplicit                  显式             \nexploratory programming   探索式编程          \nexport                    导出      引出     \nexpression                表达式            \nexpressive power          表达能力           \nextensibility             可扩展性           \nextent                    范围      程度     \nexternal representation   外部表示法          \nextreme programming       极限编程           \n\n\nF#\n\n英文                        译法 1     译法 2     译法 3\nfactorial                 阶乘                \nfamily                    （类型的）系            \nfeasible                  可行的               \nfeature                   特色                \nfield                     字段       栏位       \nfile                      文件                \nfile handle               文件句柄              \nfill pointer              填充指针              \nfineo-grained             细粒度               \nfirmware                  固件                \nfirst-class               第一类的     第一级的     一等的\nfirst-class function      第一级函数    第一类函数    一等函数\nfirst-class object        第一类的对象   第一级的对象   一等公民\nfixed-point               不动点               \nfixnum                    定长数      定点数      \nflag                      标记                \nflash                     闪存                \nflexibility               灵活性               \nfloating-point            浮点数               \nfloating-point notation   浮点数表示法            \nflush                     刷新                \nfold                      折叠                \nfont                      字体                \nforce                     迫使                \nform                      形式                \nform                      表单                \nformal parameter          形参                \nformal relation           形式关系              \nforward                   转发                \nforward references                          \nfractal                   分形                \nfractions                 派系                \nframework                 框架                \nfreeware                  自由软件              \nfunction                  函数                \nfunction literal          函数字面常量            \nfunction object           函数对象              \nfunctional arguments      函数型参数             \nfunctional programming    函数式编程             \nfunctionality             功能性               \n\n\nG#\n\n英文                              译法 1       译法 2   译法 3\ngame                            游戏                \ngarbage                         垃圾                \ngarbage collection              垃圾回收              \ngarbage collector               垃圾回收器             \ngeneralized                     泛化                \ngeneralized variable            广义变量              \ngenerate                        生成                \ngenerator                       生成器               \ngeneric                         通用的        泛化的    \ngeneric algorithm               通用算法       泛型算法   \ngeneric function                通用函数              \ngeneric programming             通用编程       泛型编程   \ngenrative programming           生产式编程             \nglobal                          全局的               \nglobal declaration              全局声明              \nglue program                    胶水程序              \ngoto                            跳转                \ngraphical user interface, GUI   图形用户界面            \ngreatest common divisor         最大公因数             \nGreenspun's tenth rule          格林斯潘第十定律          \n\n\nH#\n\n英文                                  译法 1      译法 2   译法 3\nhack                                破解               \nhacker                              黑客               \nhandle                              处理器       处理程序   句柄\nhard disk                           硬盘               \nhard-wire                                            \nhardware                            硬件               \nhash tables                         哈希表       散列表    \nheader                              头部               \nheader file                         头文件              \nheap                                堆                \nhelper                              辅助函数      辅助方法   \nheuristic                           启发式              \nhigh-order                          高阶               \nhigher-order function               高阶函数             \nhigher-order procedure              高阶过程             \nhyperlink                           超链接              \nHyperText Markup Language, HTML     超文本标记语言          \nHyperText Transfer Protocol, HTTP   超文本传输协议          \n\n\nI#\n\n英文                                    译法 1      译法 2   译法 3\nidentical                             一致               \nidentifier                            标识符              \nidentity                              同一性              \nill type                              类型不正确            \nillusion                              错觉               \nimperative                            命令式              \nimperative programming                命令式编程            \nimplement                             实现               \nimplementation                        实现               \nimplicit                              隐式               \nimport                                导入               \nincremental testing                   增量测试             \nindent                                缩排        缩进     \nindentation                           缩排        缩进     \nindented                              缩排        缩进     \nindention                             缩排        缩进     \ninfer                                 推导               \ninfinite loop                         无限循环             \ninfinite recursion                    无限递归             \ninfinite precision                    无限精度             \ninfix                                 中序               \ninformation                           信息               \ninformation technology, IT            信息技术             \ninheritance                           继承               \ninitialization                        初始化              \ninitialize                            初始化              \ninline                                内联               \ninline expansion                      内联展开             \ninner class                           内嵌类              \ninner loop                            内层循环             \ninput                                 输入               \ninstances                             实例               \ninstantiate                           实例化              \ninstructive                           教学性的             \ninstrument                            记录仪              \ninteger                               整数               \nintegrate                             集成               \ninteractive language                  交互式语言            \ninteractive programming environment   交互式编程环境          \ninteractive testing                   交互式测试            \ninteracts                             交互               \ninterface                             接口               \nintermediate form                     过渡形式      中间形式   \ninternal                              内部               \ninternet                              互联网       因特网    \ninterpolation                         插值               \ninterpret                             解释               \ninterpreter                           解释器              \ninterrupt                             中止        中断     \nintersection                          交集               \ninter-process communication, IPC      进程间通信            \ninvariants                            约束条件             \ninvoke                                调用               \nitem                                  项                \niterate                               迭代               \niteration                             迭代的              \niterative                             迭代的              \niterator                              迭代器              \n\n\nJ#\n\n英文                          译法 1     译法 2   译法 3\njagged                      锯齿状的            \njob control language, JCL   作业控制语言          \njudicious                   明智的             \n\n\nK#\n\n英文                 译法 1    译法 2   译法 3\nkernel             核心             \nkernel language    核心语言           \nkeyword argument   关键字参数          \nkeywords           关键字            \nkludge             蹩脚             \n\n\nL#\n\n英文                                译法 1        译法 2     译法 3\nlambda calculus                   lambda 演算            \nlarval startup                    雏形创业公司               \nlaser                             激光                   \nlatitude                                               \nlayout                            版型                   \nlazy                              惰性                   \nlazy evaluation                   惰性求值                 \nlegacy software                   历史遗留软件               \nleverage                          杠杆          (动词)利用   \nlexical                           词法的                  \nlexical analysis                  词法分析                 \nlexical closure                   词法闭包                 \nlexical scope                     词法作用域                \nLanguage For Smart People, LFSP   聪明人的语言               \nlibrary                           库           函数库      函式库\nlifetime                          生命期                  \nlinear iteration                  线性迭代                 \nlinear recursion                  线性递归                 \nlink                              链接          连接       \nlinker                            连接器                  \nlist                              列表                   \nlist operation                    列表操作                 \nliteral                           字面                   \nliteral constant                  字面常量                 \nliteral representation            字面量                  \nload                              装载          加载       \nloader                            装载器         加载器      \nlocal                             局部的         局域的      \nlocal declarations                局部声明                 \nlocal function                    局部函数        局域函数     \nlocal variable                    局部变量        局域变量     \nlocality                          局部性                  \nloop                              循环                   \nlvalue                            左值                   \n\n\nM#\n\n英文                              译法 1      译法 2     译法 3\nmachine instruction             机器指令               \nmachine language                机器语言               \nmachine language code           机器语言代码             \nmachine learning                机器学习               \nmacro                           宏                  \nmailing list                    邮件列表               \nmainframes                      大型机                \nmaintain                        维护                 \nmanifest typing                 显式类型               \nmanipulator                     操纵器                \nmapping                         映射                 \nmapping functions               映射函数               \nmarshal                         列集                 \nmath envy                       对数学家的妒忌            \nmember                          成员                 \nmemorizing                      记忆化                \nmemory                          内存                 \nmemory allocation               内存分配               \nmemory leaks                    内存泄漏               \nmenu                            菜单                 \nmessage                         消息                 \nmessage-passing                 消息传递               \nmeta-                           元-                 \nmeta-programming                元编程                \nmetacircular                    元循环                \nmethod                          方法                 \nmethod combination              方法组合      方法组合机制   \nmicro                           微                  \nmiddleware                      中间件                \nmigration                       （数据库）迁移            \nminimal network                 最小网络               \nmirror                          镜射                 \nmismatch type                   类型不匹配              \nmodel                           模型                 \nmodem                           调制解调器              \nmodifier                        修饰符                \nmodularity                      模块性                \nmodule                          模块                 \nmonad                           单子                 \nmonkey patch                    猴子补丁               \nmonomorphic type language       单型语言               \nMoore's law                     摩尔定律               \nmouse                           鼠标                 \nmulti-task                      多任务                \nmultiple values                 多值                 \nmutable                         可变的                \nmutex                           互斥锁                \nMultiple Virtual Storage, MVS   多重虚拟存储             \n\n\nN#\n\n英文                            译法 1      译法 2   译法 3\nnamespace                     命名空间             \nnative                        本地的              \nnative code                   本地码              \nnatural language              自然语言             \nnatural language processing   自然语言处理           \nnested                        嵌套               \nnested class                  嵌套类              \nnetwork                       网络               \nnewline                       换行        新行     \nnon-deterministic choice      非确定性选择           \nnon-strict                    非严格              \nnon-strict evaluation         非严格求值            \nnondeclarative                                 \nnondestructive version        非破坏性的版本          \nnumber crunching              数字密集运算           \n\n\nO#\n\n英文                            译法 1      译法 2   译法 3\nobject                        对象               \nobject code                   目标代码             \nobject-oriented               面向对象             \nobject-oriented programming   面向对象编程           \nOccam's razor                 奥卡姆剃刀原则          \non the fly                    运行中       执行时    \nonline                        在线               \nopen source                   开放源码             \noperand                       操作对象             \noperating system, OS          操作系统             \noperation                     操作               \noperator                      操作符              \noptimization                  优化               \noptimization of tail calls    尾调用优化            \noption                        选项               \noptional                      可选的       选择性的   \noptional argument             选择性参数            \nordinary                      常规的              \northogonality                 正交性              \noverflow                      溢出               \noverhead                      额外开销             \noverload                      重载               \noverride                      覆写               \n\n\nP#\n\n英文                             译法 1     译法 2      译法 3\npackage                        包                  \npair                           点对                 \npalindrome                     回文                 \nparadigm                       范式                 \nparallel                       并行                 \nparallel computer              并行计算机              \nparam                          参数                 \nparameter                      参数       形式参数/形参   \nparen-matching                 括号匹配               \nparent class                   父类                 \nparentheses                    括号                 \nParkinson's law                帕金森法则              \nparse                          解析                 \nparse tree                     解析树      分析树       \nparser                         解析器                \npartial application            部分应用               \npartial applied                分步代入的              \npartial function application   部分函数应用             \nparticular ordering            部分有序               \npass by adress                 按址传递     传址        \npass by reference              按引用传递    传引用       \npass by value                  按值传递     传值        \npath                           路径                 \npattern                        模式                 \npattern match                  模式匹配               \nperform                        执行                 \nperformance                    性能                 \nperformance-critical                              \npersistence                    持久性                \nphrenology                     相面                 \nphysical                       物理的                \npipe                           管道                 \npixel                          像素                 \nplaceholder                    占位符                \nplanning                       计划                 \nplatform                       平台                 \npointer                        指针                 \npointer arithmetic             指针运算               \npoll                           轮询                 \npolymorphic                    多态                 \npolymorphism                   多态                 \npolynomial                     多项式的               \npool                           池                  \nport                           端口                 \nportable                       可移植性               \nportal                         门户                 \npositional parameters          位置参数               \npostfix                        后序                 \nprecedence                     优先级                \nprecedence list                优先级列表              \npreceding                      前述的                \npredicate                      判断式      谓词        \npreemptive multitasking        抢占式多任务             \npremature design               过早设计               \npreprocessor                   预处理器               \nprescribe                      规定                 \nprime                          素数                 \nprimitive                      原语                 \nprimitive recursive            主递归                \nprimitive type                 原生类型               \nprincipal type                 主要类型               \nprint                          打印                 \nprinted representation         打印表示法              \nprinter                        打印机                \npriority                       优先级                \nprocedure                      过程                 \nprocedurual                    过程化的               \nprocedurual knowledge          过程式知识              \nprocess                        进程                 \nprocess priority               进程优先级              \nproductivity                   生产力                \nprofile                        评测                 \nprofiler                       评测器      性能分析器     \nprogrammer                     程序员                \nprogramming                    编程                 \nprogramming language           编程语言               \nproject                        项目                 \nprompt                         提示符                \nproper list                    正规列表               \nproperty                       属性                 \nproperty list                  属性列表               \nprotocol                       协议                 \nprototype                      原型                 \npseudo code                    伪码                 \npseudo instruction             伪指令                \npurely functional language     纯函数式语言             \npushdown stack                 下推栈                \n\n\nQ#\n\n英文                      译法 1   译法 2   译法 3\nqualified               修饰的    带前缀的   \nqualifier               修饰符           \nquality                 质量            \nquality assurance, QA   质量保证          \nquery                   查询            \nquery language          查询语言          \nqueue                   队列            \nquote                   引用            \nquoted form             引用形式          \n\n\nR#\n\n英文                                           译法 1         译法 2   译法 3\nrace condition                               条件竞争         竞态条件   \nradian                                       弧度                  \nRedundant Array of Independent Disks, RAID   冗余独立磁盘阵列            \nraise                                        引起                  \nrandom number                                随机数                 \nrange                                        范围           区间     \nrank                                         （矩阵）秩        排名     \nrapid prototyping                            快速原型开发              \nrational database                            关系数据库               \nraw                                          未经处理的               \nread                                         读取                  \nread-evaluate-print loop, REPL               读取-求值-打印循环          \nread-macro                                   读取宏                 \nrecord                                       记录                  \nrecursion                                    递归                  \nrecursive                                    递归的                 \nrecursive case                               递归情形                \nrefactor                                     重构                  \nrefer                                        参考                  \nreference                                    引用           参考     \nreferential transparency                     引用透明                \nrefine                                       精化                  \nreflection                                   反射           映像     \nregister                                     寄存器                 \nregistry creep                               注册表蠕变               \nregular expression                           正则表达式               \nrepresent                                    表现                  \nrequest                                      请求                  \nresolution                                   解析度                 \nresolve                                      解析                  \nrest parameter                               剩余参数                \nreturn                                       返回           回车     \nreturn value                                 返回值                 \nreuse of software                            代码重用                \nright associative                            右结合                 \nReduced Instruction Set Computer, RISC       精简指令系统计算机           \nrobust                                       健壮                  \nrobustness                                   健壮性          鲁棒性    \nroutine                                      例程                  \nrouting                                      路由                  \nrow-major order                              列主序                 \nremote procedure call, RPC                   远程过程调用              \nrun-length encoding                          游程编码                \nrun-time typing                              运行期类型               \nruntime                                      运行期                 \nrvalue                                       右值                  \n\n\nS#\n\n英文                                 译法 1            译法 2    译法 3\nS-expression                       S-表达式                   \nsave                               储存                      \nSecure Sockets Layer, SSL          安全套接字层                  \nscaffold                           脚手架             鹰架      \nscalar type                        标量                      \nscan                               扫描                      \nschedule                           调度                      \nscheduler                          调度程序                    \nscope                              作用域                     \nSCREAMING_SNAKE_CASE               尖叫式蛇底大写                 \nscreen                             屏幕                      \nscripting language                 脚本语言                    \nsearch                             查找              搜寻      \nsegment of instructions            指令片段                    \nsemantics                          语义                      \nsemaphore                          信号量                     \nsemicolon                          分号                      \nsequence                           序列                      \nsequential                         循序的             顺序的     \nsequential collection literals                             \nserial                             串行                      \nserialization                      序列化                     \nseries                             串行              级数      \nserver                             服务器                     \nshadowing                          隐蔽了                     \nsharp                              犀利的                     \nsharp-quote                        升引号                     \nshortest path                      最短路径                    \nSICP                               《计算机程序的构造与解释》           \nside effect                        副作用                     \nsignature                          签名                      \nsimple vector                      简单向量                    \nsimulate                           模拟                      \nSingle Point of Truth, SPOT        真理的单点性                  \nsingle-segment                     单段的                     \nsketch                             草图              初步框架    \nslash                              斜线                      \nslot                               槽                       \nsmart pointer                      智能指针                    \nsnake_case                         蛇底式小写                   \nsnapshot                           屏幕截图                    \nsocket                             套接字                     \nsoftware                           软件                      \nsolution                           方案                      \nsource code                        源代码                     \nspace leak                         内存泄漏                    \nspaghetti                          面条式代码           意面式代码   \nspaghetti stack                    意面式栈            面条式栈    \nspam                               垃圾邮件                    \nspec                               规格                      \nspecial form                       特殊形式                    \nspecial variable                   特殊变量                    \nspecialization                     特化                      \nspecialize                         特化                      \nspecialized array                  特化数组                    \nspecification                      规格说明            规范      \nsplitter                           切分窗口                    \nsprite                             精灵图                     \nsquare                             平方                      \nsquare root                        平方根                     \nsquash                             碰撞                      \nstack                              栈                       \nstack frame                        栈帧                      \nstakeholder                                                \nstandard library                   标准函式库                   \nstate machine                      状态机                     \nstatement                          陈述              语句      \nstatic type                        静态类型                    \nstatic type system                 静态类型系统                  \nstatus                             状态                      \nstore                              保存                      \nstream                             流                       \nstrict                             严格                      \nstrict evaluation                  严格求值                    \nstring                             字串              字符串     \nstring template                    字串模版                    \nstrong type                        强类型                     \nstructural recursion               结构递归                    \nstructured values                  结构型值                    \nsubroutine                         子程序                     \nsubset                             子集                      \nsubstitution                       代换                      \nsubstitution model                 代换模型                    \nsubtype                            子类型                     \nsuperclass                         基类                      \nsuperfluous                        多余的                     \nsupertype                          超集                      \nsupport                            支持                      \nsuspend                            挂起                      \nswapping values                    交换变量的值                  \nsymbol                             符号                      \nsymbolic computation               符号计算                    \nsyntax                             语法                      \nsystem administrator               系统管理员                   \nsystem administrator disease       系统管理员综合症                \nSystem Network Architecture, SNA   系统网络体系                  \n\n\nT#\n\n英文                   译法 1          译法 2   译法 3\n(database)table      数据表                  \ntable                表格                   \ntag                  标签            标记     \ntail-recursion       尾递归                  \ntail-recursive       尾递归的                 \nTAOCP                《计算机程序设计艺术》          \ntarget               目标                   \ntaxable operators    需节制使用的操作符            \ntaxonomy             分类法                  \ntemplate             模版                   \ntemporary object     临时对象                 \ntesting              测试                   \ntext                 文本                   \ntext file            文本文件                 \nthread               线程                   \nthread safe          线程安全                 \nthree-valued logic   三值逻辑                 \nthrow                抛出            丢掷     引发\nthrowaway program    一次性程序                \ntimestamp            时间戳                  \ntoken                词法记号          语义单位   语元\ntop-down design      自顶向下的设计              \ntop-level            顶层                   \ntrace                追踪                   \ntrailing space       行尾空白                 \ntransaction          事务                   \ntransition network   转移网络                 \ntransparent          透明的                  \ntraverse             遍历                   \ntree                 树                    \ntree recursion       树形递归                 \ntrigger              触发器                  \ntuple                元组                   \nTuring machine       图灵机                  \nTuring complete      图灵完备                 \ntypable              类型合法                 \ntype                 类型                   \ntype constructor     类构造器                 \ntype declaration     类型声明                 \ntype hierarchy       类型层级                 \ntype inference       类型推导                 \ntype name            类型名                  \ntype safe            类型安全                 \ntype signature       类型签名                 \ntype synonym         类型别名                 \ntype variable        类型变量                 \ntyping               类型指派          输入     \n\n\nU#\n\n英文                              译法 1      译法 2   译法 3\nuser interface, UI              用户界面             \nunary                           一元的              \nunderflow                       下溢               \nunification                     合一        统一     \nunion                           并集               \nuniversally quantify            全局量化             \nunqualfied                      未修饰的             \nunwinding                                        \nuptime                          运行时间             \nUniform Resource Locator, URL   统一资源定位符          \nuser                            用户               \nutilities                       实用函数             \n\n\nV#\n\n英文                       译法 1    译法 2   译法 3\nvalidate                 验证             \nvalidator                验证器            \nvalue constructor        值构造器           \nvaporware                朦胧件            \nvariable                 变量             \nvariable capture         变量捕捉           \nvariadic input           可变输入           \nvariant                  变种             \nventure capitalist, VC   风险投资商          \nvector                   向量             \nviable function          可行函数           \nvideo                    视频             \nview                     视图             \nvirtual function         虚函数            \nvirtual machine          虚拟机            \nvirtual memory           虚内存            \nvolatile                 挥发             \nvowel                    元音             \n\n\nW#\n\n英文                                       译法 1    译法 2   译法 3\nwarning message                          警告信息           \nweb server                               网络服务器          \nweight                                   权值      权重     \nwell type                                类型正确           \nwildcard                                 通配符            \nwindow                                   窗口             \nword                                     单词      字      \nwrapper                                  包装器     包装     \nWhat You See Is What You Get, WYSIWYG    所见即所得          \nWhat You See Is What You Want, WYSIWYW   所见即所想          \n\n\nX#\n\n\nY#\n\n英文             译法 1   译法 2   译法 3\nY combinator   Y组合子          \n\n\nZ#\n\n英文             译法 1    译法 2   译法 3\nZ-expression   Z-表达式          \nzero-indexed   零索引的           \n\n\n专业名词#\n\n英文                      译法 1   译法 2   译法 3\nThe Paradox of Choice   选择谬论          \n\n> 文章来源：https://github.com/JuanitoFatas/Computer-Science-Glossary/blob/master/dic\n> t.textile","routePath":"/mark/word","lang":"","toc":[{"text":"A","id":"a","depth":2,"charIndex":3},{"text":"B","id":"b","depth":2,"charIndex":2874},{"text":"C","id":"c","depth":2,"charIndex":5192},{"text":"D","id":"d","depth":2,"charIndex":10836},{"text":"E","id":"e","depth":2,"charIndex":15406},{"text":"F","id":"f","depth":2,"charIndex":17054},{"text":"G","id":"g","depth":2,"charIndex":18920},{"text":"H","id":"h","depth":2,"charIndex":20001},{"text":"I","id":"i","depth":2,"charIndex":21039},{"text":"J","id":"j","depth":2,"charIndex":24353},{"text":"K","id":"k","depth":2,"charIndex":24543},{"text":"L","id":"l","depth":2,"charIndex":24763},{"text":"M","id":"m","depth":2,"charIndex":26736},{"text":"N","id":"n","depth":2,"charIndex":29294},{"text":"O","id":"o","depth":2,"charIndex":30072},{"text":"P","id":"p","depth":2,"charIndex":31234},{"text":"Q","id":"q","depth":2,"charIndex":35732},{"text":"R","id":"r","depth":2,"charIndex":36132},{"text":"S","id":"s","depth":2,"charIndex":39244},{"text":"T","id":"t","depth":2,"charIndex":45074},{"text":"U","id":"u","depth":2,"charIndex":47152},{"text":"V","id":"v","depth":2,"charIndex":47812},{"text":"W","id":"w","depth":2,"charIndex":48601},{"text":"X","id":"x","depth":2,"charIndex":49238},{"text":"Y","id":"y","depth":2,"charIndex":49243},{"text":"Z","id":"z","depth":2,"charIndex":49313},{"text":"专业名词","id":"专业名词","depth":2,"charIndex":49416}],"frontmatter":{},"version":""},{"title":"Client","content":"#\n\nnpm install --save @apollo/client graphql\n\n\n\nClient#\n\n\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"no-cache\",\n      errorPolicy: \"ignore\",\n    },\n    query: {\n      fetchPolicy: \"no-cache\",\n      errorPolicy: \"all\",\n    },\n  },\n});\n\nexport default client;\n\n\n\nApolloProvider#\n\nrender(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById(\"app\")\n);\n\n\n\nMutation#\n\n\n\n\n\n// graphql부분(1)\nconst ADD_USER = gql`\n  mutation AddUser($first: String, $last: String, $email: String) {\n    addUser(first: $first, last: $last, email: $email) {\n      email\n    }\n  }\n`;\n\nconst Page = () => {\n  const [resetKey, setResetKey] = useState(0);\n  // graphql부분(2)\n  const [addUser, { data }] = useMutation(ADD_USER);\n\n  const onFinish = ({ first, last, email }) => {\n    // graphql부분(3)\n    addUser({ variables: { first, last, email } });\n    setResetKey(resetKey + 1);\n  };\n  return (\n    <Form\n      onFinish={onFinish}\n      labelCol={{ span: 4 }}\n      wrapperCol={{ span: 20 }}\n      initialValues={{\n        first: `dao${new Date().getTime()}`,\n        last: `lang${new Date().getTime()}`,\n        email: `daolang${new Date().getTime()}@gmail.com`,\n      }}\n      key={resetKey}\n    >\n      <Form.Item\n        name=\"first\"\n        label=\"first\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"last\"\n        label=\"last\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"email\"\n        label=\"Email\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n        >\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default Page;\n\n\nQuery\n\n\n\n\n\n\n\n// graphql(1)\nconst GET_USERS = gql`\n  query Users {\n    users {\n      key: _id\n      name {\n        first\n        last\n      }\n      email\n    }\n  }\n`;\n\nconst columns = [\n  {\n    title: \"Id\",\n    dataIndex: \"key\",\n    key: \"key\",\n  },\n  {\n    title: \"First\",\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (item) => item.first,\n  },\n  {\n    title: \"Last\",\n    dataIndex: \"name\",\n    key: \"name\",\n    render: (item) => item.first,\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\",\n  },\n];\n\nconst Page = () => {\n  // graphql(2)\n  const { loading, error, data } = useQuery(GET_USERS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <Table\n        columns={columns}\n        dataSource={data.users}\n      />\n    </div>\n  );\n};\n\nexport default Page;\n","routePath":"/note/graphql/client","lang":"","toc":[{"text":"Client","id":"client-1","depth":3,"charIndex":-1},{"text":"ApolloProvider","id":"apolloprovider","depth":3,"charIndex":372},{"text":"Mutation","id":"mutation","depth":3,"charIndex":554}],"frontmatter":{},"version":""},{"title":"GraphQL","content":"#\n\n * GraphQL 是一种协议和一种 API 查询语言(实现数据查询的 runtime), 通常基于 http 协议\n * GraphQL 是客户端和服务器之间通信的规范。\n\n\n优点#\n\n\n1.提高开发速度#\n\n * 可以减少发出请求\n * 单个调用来获取所需数据\n * 减少延迟， 还能降低服务器的压力\n * GraphQL 具有自文档的特点\n\n\n2.提升开发者体验#\n\n * 更少的时间思考如何获取数据\n * 在使用 Apollo 时，只需要在 UI 中声明数据\n * 数据和 UI 放在一起，阅读代码和编写代码都变得更方便了\n * GraphQL 之于数据， 就如 React 之于 UI\n\n\n3.将复杂的 API 进行简化和标准化#\n\n * 可以按照需求自由组合和嵌套对象\n * 对于每个对象都能够获得所需的数据，不多也不少\n\n\n4.提升安全性#\n\n * 需要进行 schema 验证，而且是强类型的，因为这是它规范的一部分。\n * 它可以频繁更新，而不会因为引入了新类型造成重大变更。\n\n\n设计原则#\n\n * 分层(查询字段层次分明。字段嵌套在其他字段当中，查询字段的结构与其返回的数据结构相似)\n * 以产品为中心(客户端所需的数据，以及客户端支持的语言和 runtime)\n * 强类型(每个数据点在模版当中都有其特定的类型，并且均会进行验证)\n * 客户端指定查询(服务器提供功能供客户端使用)\n * 类型自查(能够查询 GraphQL 服务器的类型检测系统)\n\n\nREST 缺点#\n\n * 过量获取\n * 缺乏灵活性\n\n\n术语#\n\n * SEQL(Structured English Query Language) - 结构化英文查询语言\n * SQL(Structured Query Language) - 结构化查询语言\n * SDL(Schema Definition Language) - 模版定义语言\n * scalar type - 标量类型（String, Int, Boolean, ID, Float）\n * ID(Identity Document)","routePath":"/note/graphql/","lang":"","toc":[{"text":"优点","id":"优点","depth":2,"charIndex":92},{"text":"1.提高开发速度","id":"1提高开发速度","depth":3,"charIndex":98},{"text":"2.提升开发者体验","id":"2提升开发者体验","depth":3,"charIndex":178},{"text":"3.将复杂的 API 进行简化和标准化","id":"3将复杂的-api-进行简化和标准化","depth":3,"charIndex":303},{"text":"4.提升安全性","id":"4提升安全性","depth":3,"charIndex":372},{"text":"设计原则","id":"设计原则","depth":2,"charIndex":453},{"text":"REST 缺点","id":"rest-缺点","depth":2,"charIndex":644},{"text":"术语","id":"术语","depth":2,"charIndex":673}],"frontmatter":{},"version":""},{"title":"Query","content":"#\n\n\n工具#\n\n 1. GraphiQL (http://snowtooth.herokuapp.com/graphql)\n\n 2. GraphQL Playground (https://www.graphqlbin.com/)\n    \n    $ brew cask install praphql-playground\n    \n\n\n公共 API （https://github.com/APIs-guru/graphql-apis）#\n\n\n内置类型#\n\n * Int\n * FLoat\n * String\n * Boolean\n * ID\n\n参考： http://snowtooth.moonhighway.com\n\n\n查询字段 query#\n\n## Basic\nquery liftsAndTrails {\n  liftCount(status: OPEN)\n  allLifts {\n    name\n    status\n  }\n  allTrails {\n    name\n    diffculty\n  }\n}\n## NameSpace\nquery liftsAndTrails {\n  open: liftCount(status: OPEN)\n  chairlifts: allLifts {\n    name\n    status\n  }\n  skiSlopes: allTrails {\n    name\n    diffculty\n  }\n}\n\n\n\n片段 Fragment#\n\nfragment liftInfo on Lift {\n  name\n  status\n  capacity\n  night\n  elevationGain\n}\nfragment trailInfo on Trail {\n  name\n  difficulty\n}\n\nquery {\n  Lift(id: \"jazz-cat\") {\n    ...liftInfo\n    trailAccess {\n      ...trailInfo\n    }\n  }\n  Trail(id: \"river-run\") {\n    ...trailInfo\n    accessedByLifts {\n      ...liftInfo\n    }\n  }\n}\n\n\n\n变更 mutation#\n\nmutation createSong {\n  addSong(title: \"No Scrubs\", numberOne: true, performerName: \"TLC\") {\n    id\n    title\n    numberOne\n  }\n}\n\n\n\n订阅 subscription#\n\nsubscription {\n  liftStatusChange {\n    name\n    capacity\n    status\n  }\n}\n\n## 修改\nmutation closeLift {\n  setLiftStatus(id: \"astra-express\", status: HOLD) {\n    name\n    status\n  }\n}\n\n\n\n自检 inrospection ???#\n\nquery {\n  __schema {\n    types {\n      name\n      description\n    }\n  }\n}\n\nquery {\n  __type(name: \"Lift\") {\n    name\n    fields {\n      name\n      description\n      type {\n        name\n      }\n    }\n  }\n}\n","routePath":"/note/graphql/query","lang":"","toc":[{"text":"工具","id":"工具","depth":3,"charIndex":3},{"text":"公共 API （https://github.com/APIs-guru/graphql-apis）","id":"公共-api-httpsgithubcomapis-gurugraphql-apis","depth":3,"charIndex":171},{"text":"内置类型","id":"内置类型","depth":3,"charIndex":225},{"text":"查询字段 query","id":"查询字段-query","depth":3,"charIndex":315},{"text":"片段 Fragment","id":"片段-fragment","depth":3,"charIndex":640},{"text":"变更 mutation","id":"变更-mutation","depth":3,"charIndex":983},{"text":"订阅 subscription","id":"订阅-subscription","depth":3,"charIndex":1130},{"text":"自检 inrospection ???","id":"自检-inrospection-","depth":3,"charIndex":1333}],"frontmatter":{},"version":""},{"title":"SCHEMA","content":"#\n\n你要对 API 包含的数据类型进行统筹，讨论并正式确定下来。 这种类型的集合就是后端程序员所熟知的 schema\n\nschema 优先是一种设计方法论，遵循它可以使团队保持一致的数据类型。\n\n\nTYPE#\n\ntype Photo {\n  id: ID! # 非空字段 non-nullable\n  name: String!\n  url: String!\n  description: String\n}\n\n\n\n标量类型 scalar#\n\nhttps://www.npmjs.com/package/graphql-custom-types\n\nscalar DataTime\ntype Photo {\n  id: ID!\n  name: String!\n  url: String!\n  description: String\n  created: DateTime!\n}\n\n\n\n\nconst myCustomScalarType = new GraphQLScalarType({\n  name: \"MyCustomScalar\",\n  description: \"Description of my custom scalar type\",\n  serialize(value) {\n    let result;\n    // 从服务端发送给客户端的数据\n    return result;\n  },\n  parseValue(value) {\n    // 从客户端接收的数据\n    let result;\n    return result;\n  },\n  parseLiteral(ast) {\n    switch (ast.kind) {\n    }\n  },\n});\n\nconst schemaString = `\nscalar MyCustomScalar\n\ntype Foo {\n  aField: MyCustomScalar\n}\n\ntype Query {\n  foo: Foo\n}\n`;\n\n\n\n枚举 enum#\n\nenum PhotoCategory {\n  SELFIE\n  PORTRAIT\n  ACTION\n  LANDSCAPE\n  GRAPHIC\n}\n\n\n\n列表 list#\n\n[String]\n[Int] # 可空的整数值列表\n# [] => ok, [null,1,2] => ok\n[Int!] # 不可空的整数值列表\n# [] => ok, [null,1,2] => error\n[Int]! # 可空的整数值非空列表\n# [] => error, [null,1,2] => ok\n[Int!]! # 不可空的整数值非空列表\n# [] => error, [null,1,2] => error\n\n\n\n连接 Linked#\n\n一对一#\n\ntype User {\n\tusername: ID!\n\tname: String\n\tavatar: String\n}\ntype Photo {\n\tid: ID!\n\turl: String!\n\tdescription: String\n\tcreated: DateTime!\n\tpostedBy: User!\n}\n\n\n一对多#\n\ntype User {\n\tusername: ID!\n\tname: String\n\tavatar: String\n\tphotos: [Photo!]\n}\ntype Photo {\n\tid: ID!\n\turl: String!\n\tdescription: String\n\tcreated: DateTime!\n\tpostedBy: User!\n}\n\n\n多对多？？#\n\n直通类型#\n\ntype User {\n\tusername: ID!\n\tname: String\n\tavatar: String\n}\ntype User {\n\tfriends [User!]!\n}\n\n\n\n联合类型 union type#\n\n\n接口 interface#\n\n\n参数 argument#\n\ntype Query {\n\t# 查询\n\tUser(id: ID!): User!\n\t# 筛选\n\tallPhotos(category: PhotoCategory): [Photo!]!\n}\n\n\n#\n\n\n输入#","routePath":"/note/graphql/schema","lang":"","toc":[{"text":"TYPE","id":"type","depth":3,"charIndex":99},{"text":"标量类型 scalar","id":"标量类型-scalar","depth":3,"charIndex":207},{"text":"枚举 enum","id":"枚举-enum","depth":3,"charIndex":864},{"text":"列表 list","id":"列表-list","depth":3,"charIndex":951},{"text":"连接 Linked","id":"连接-linked","depth":3,"charIndex":1179},{"text":"一对一","id":"一对一","depth":4,"charIndex":1191},{"text":"一对多","id":"一对多","depth":4,"charIndex":1354},{"text":"多对多？？","id":"多对多","depth":4,"charIndex":1535},{"text":"直通类型","id":"直通类型","depth":4,"charIndex":1543},{"text":"联合类型 union type","id":"联合类型-union-type","depth":3,"charIndex":1644},{"text":"接口 interface","id":"接口-interface","depth":3,"charIndex":1663},{"text":"参数 argument","id":"参数-argument","depth":3,"charIndex":1679},{"text":"","id":"","depth":4,"charIndex":1791},{"text":"输入","id":"输入","depth":3,"charIndex":-1}],"frontmatter":{},"version":""},{"title":"Server","content":"#\n\nmodule.exports = \"db\"; // https://randomuser.me/api/?results=50\n\n\n\ntypeDefs#\n\nconst { gql } = require(\"apollo-server\");\n\nmodule.exports = gql`\n  type Name {\n    first: String\n    last: String\n  }\n  type User {\n    name: Name\n    email: String\n  }\n  type Query {\n    users: [User]\n  }\n  type Mutation {\n    addUser(first: String, last: String, email: String): User\n  }\n`;\n\n\n\nresolves#\n\nconst db = require(\"./db\");\n\nmodule.exports = {\n  Query: {\n    users: () => db.results,\n  },\n  Mutation: {\n    addUser: (obj, args, ctx) => {\n      console.log(args); // 받은 객체 저장.\n      return \"등록 완료\";\n    },\n  },\n};\n\n\n\napp#\n\nconst { ApolloServer, makeExecutableSchema } = require(\"apollo-server\");\nconst typeDefs = require(\"./typeDefs\");\nconst resolvers = require(\"./resolves\");\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\nconst server = new ApolloServer({ schema });\n\n// The `listen` method launches a web server.\nserver.listen().then(({ url }) => {\n  console.log(`🚀  Server ready at ${url}`);\n});\n","routePath":"/note/graphql/server","lang":"","toc":[{"text":"typeDefs","id":"typedefs","depth":3,"charIndex":69},{"text":"resolves","id":"resolves","depth":3,"charIndex":376},{"text":"app","id":"app","depth":3,"charIndex":607}],"frontmatter":{},"version":""},{"title":"Doctype","content":"#\n\n\nDoctype#\n\n<!doctype html>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\n\n\nmeta#\n\n<meta charset=\"UTF-8\">\n\n<!-- 页面关键词 -->\n<meta name=\"keywords\" content=\"\"/>\n<!-- 页面描述 -->\n<meta name=\"description\" content=\"网站介绍\"/>\n<meta name =\"viewport\" content =\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\">\n\n<!-- 优先使用 IE 最新版本和 Chrome -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n\n<!-- mobile -->\n<!-- 忽略数字自动识别为电话号码； -->\n<meta name=\"format-detection\" content=\"telephone=no\" />\n<!-- 忽略数字自动识别为邮箱 -->\n<meta name=\"format-detection\" content=\"email=no\">\n\n<!-- ios -->\n<!-- 添加到主屏后设置状态栏的背景颜色； -->\n<meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n<!-- 添加到主屏后的标题（iOS 6 新增） -->\n<meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n<!-- 启动WebApp全屏模式； -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n\n<!-- 搜索引擎抓取 -->\n<meta name=\"robots\" content=\"index,follow\"/>\n\n<!-- sns 社交标签 begin -->\n<!-- 参考微博API -->\n<meta property=\"og:type\" content=\"类型\" />\n<meta property=\"og:url\" content=\"URL地址\" />\n<meta property=\"og:title\" content=\"标题\" />\n<meta property=\"og:image\" content=\"图片\" />\n<meta property=\"og:description\" content=\"描述\" />\n<!-- sns 社交标签 end -->\n\n<!-- Theme Color for Chrome, Firefox OS and Opera -->\n<meta name=\"theme-color\" content=\"#4285f4\">\n\n<!-- Windows Phone -->\n<meta name=\"msapplication-navbutton-color\" content=\"#4285f4\">\n\n<!-- Security -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'\">\n<meta http-equiv=\"X-Content-Type-Options\" content=\"nosniff\">\n\n<!-- PWA -->\n<link rel=\"manifest\" href=\"/manifest.json\">\n<meta name=\"mobile-web-app-capable\" content=\"yes\">\n\n<!-- Favicon -->\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\">\n<link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#5bbad5\">\n<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n\n<!-- DNS Prefetch -->\n<link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\">\n<link rel=\"dns-prefetch\" href=\"//www.google-analytics.com\">\n\n<!-- Preconnect -->\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin>\n\n\n\nlink#\n\n<!-- iOS 图标 begin -->\n<link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n<!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n<!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n<!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n<!-- iOS 图标 end -->\n\n<!-- iOS 启动画面 begin -->\n<link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n<!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n<link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n<!-- iPad 竖屏 1536x2008（Retina） -->\n<link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n<!-- iPad 横屏 1024x748（标准分辨率） -->\n<link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n<!-- iPad 横屏 2048x1496（Retina） -->\n\n<link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n<!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n<link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n<!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n<link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n<!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n<!-- iOS 启动画面 end -->\n","routePath":"/note/html/doctype","lang":"","toc":[{"text":"Doctype","id":"doctype-1","depth":3,"charIndex":-1},{"text":"meta","id":"meta","depth":3,"charIndex":206},{"text":"link","id":"link","depth":3,"charIndex":2289}],"frontmatter":{},"version":""},{"title":"HTML Entity","content":"#\n\n\nASCII Characters (Printable)#\n\n인쇄 가능한 문자만 표시되며 제어 문자(0-31)는 시각적 표현이 없으므로 HTML 페이지에 있어서는 안 됩니다.\n\nCHARACTER   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\n                                          Space\n!                         !               Exclamation mark\n\"                         \"               Quotation mark\n#                         #               Number sign\n$                         $               Dollar sign\n%                         %               Percent sign\n&           &             &               Ampersand\n'                         '               Apostrophe\n(                         (               Opening/Left Parenthesis\n)                         )               Closing/Right Parenthesis\n*                         *               Asterisk\n+                         +               Plus sign\n,                         ,               Comma\n-                         -               Hyphen\n.                         .               Period\n/                         /               Slash\n0                         0               Digit 0\n1                         1               Digit 1\n2                         2               Digit 2\n3                         3               Digit 3\n4                         4               Digit 4\n5                         5               Digit 5\n6                         6               Digit 6\n7                         7               Digit 7\n8                         8               Digit 8\n9                         9               Digit 9\n:                         :               Colon\n;                         ;               Semicolon\n<           <             <               Less-than\n=                         =               Equals sign\n>           >             >               Greater than\n?                         ?               Question mark\n@                         @               At sign\nA                         A               Uppercase A\nB                         B               Uppercase B\nC                         C               Uppercase C\nD                         D               Uppercase D\nE                         E               Uppercase E\nF                         F               Uppercase F\nG                         G               Uppercase G\nH                         H               Uppercase H\nI                         I               Uppercase I\nJ                         J               Uppercase J\nK                         K               Uppercase K\nL                         L               Uppercase L\nM                         M               Uppercase M\nN                         N               Uppercase N\nO                         O               Uppercase O\nP                         P               Uppercase P\nQ                         Q               Uppercase Q\nR                         R               Uppercase R\nS                         S               Uppercase S\nT                         T               Uppercase T\nU                         U               Uppercase U\nV                         V               Uppercase V\nW                         W               Uppercase W\nX                         X               Uppercase X\nY                         Y               Uppercase Y\nZ                         Z               Uppercase Z\n[                         [               Opening/Left square bracket\n\\                         \\               Backslash\n]                         ]               Closing/Right square bracket\n^                         ^               Caret\n_                         _               Underscore\n`                         `               Grave accent\na                         a               Lowercase a\nb                         b               Lowercase b\nc                         c               Lowercase c\nd                         d               Lowercase d\ne                         e               Lowercase e\nf                         f               Lowercase f\ng                         g               Lowercase g\nh                         h               Lowercase h\ni                         i               Lowercase i\nj                         j               Lowercase j\nk                         k               Lowercase k\nl                         l               Lowercase l\nm                         m               Lowercase m\nn                         n               Lowercase n\no                         o               Lowercase o\np                         p               Lowercase p\nq                         q               Lowercase q\nr                         r               Lowercase r\ns                         s               Lowercase s\nt                         t               Lowercase t\nu                         u               Lowercase u\nv                         v               Lowercase v\nw                         w               Lowercase w\nx                         x               Lowercase x\ny                         y               Lowercase y\nz                         z               Lowercase z\n{                         {               Opening/Left curly brace\n|                         |               Vertical bar\n}                         }               Closing/Right curly brace\n~                         ~               Tilde\n\n\nISO 8859-1 Characters#\n\n지원되는 ISO-8859-1 문자의 전체 목록 이름은 대소문자를 구분하므로 대문자를 원할 경우 이름도 대문자로 시작해야 합니다.\n\nCHARACTER   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\n                                          Space\n!                         !               Exclamation mark\n\"                         \"               Quotation mark\n#                         #               Number sign\n$                         $               Dollar sign\n%                         %               Percent sign\n&           &             &               Ampersand\n'                         '               Apostrophe\n(                         (               Opening/Left Parenthesis\n)                         )               Closing/Right Parenthesis\n*                         *               Asterisk\n+                         +               Plus sign\n,                         ,               Comma\n-                         -               Hyphen\n.                         .               Period\n/                         /               Slash\n0                         0               Digit 0\n1                         1               Digit 1\n2                         2               Digit 2\n3                         3               Digit 3\n4                         4               Digit 4\n5                         5               Digit 5\n6                         6               Digit 6\n7                         7               Digit 7\n8                         8               Digit 8\n9                         9               Digit 9\n:                         :               Colon\n;                         ;               Semicolon\n<           <             <               Less-than\n=                         =               Equals sign\n>           >             >               Greater than\n?                         ?               Question mark\n@                         @               At sign\nA                         A               Uppercase A\nB                         B               Uppercase B\nC                         C               Uppercase C\nD                         D               Uppercase D\nE                         E               Uppercase E\nF                         F               Uppercase F\nG                         G               Uppercase G\nH                         H               Uppercase H\nI                         I               Uppercase I\nJ                         J               Uppercase J\nK                         K               Uppercase K\nL                         L               Uppercase L\nM                         M               Uppercase M\nN                         N               Uppercase N\nO                         O               Uppercase O\nP                         P               Uppercase P\nQ                         Q               Uppercase Q\nR                         R               Uppercase R\nS                         S               Uppercase S\nT                         T               Uppercase T\nU                         U               Uppercase U\nV                         V               Uppercase V\nW                         W               Uppercase W\nX                         X               Uppercase X\nY                         Y               Uppercase Y\nZ                         Z               Uppercase Z\n[                         [               Opening/Left square bracket\n\\                         \\               Backslash\n]                         ]               Closing/Right square bracket\n^                         ^               Caret\n_                         _               Underscore\n`                         `               Grave accent\na                         a               Lowercase a\nb                         b               Lowercase b\nc                         c               Lowercase c\nd                         d               Lowercase d\ne                         e               Lowercase e\nf                         f               Lowercase f\ng                         g               Lowercase g\nh                         h               Lowercase h\ni                         i               Lowercase i\nj                         j               Lowercase j\nk                         k               Lowercase k\nl                         l               Lowercase l\nm                         m               Lowercase m\nn                         n               Lowercase n\no                         o               Lowercase o\np                         p               Lowercase p\nq                         q               Lowercase q\nr                         r               Lowercase r\ns                         s               Lowercase s\nt                         t               Lowercase t\nu                         u               Lowercase u\nv                         v               Lowercase v\nw                         w               Lowercase w\nx                         x               Lowercase x\ny                         y               Lowercase y\nz                         z               Lowercase z\n{                         {               Opening/Left curly brace\n|                         |               Vertical bar\n}                         }               Closing/Right curly brace\n~                         ~               Tilde\n\n\nISO-8859-1 Symbols#\n\nHTML에서 지원되는 ISO-8859-1 기호의 전체 목록입니다.\n\nSYMBOL   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\n                                       Non-breaking space\n¡        ¡             ¡               Inverted exclamation mark\n¢        ¢             ¢               Cent\n£        £             £               Pound\n¤        ¤             ¤               Currency\n¥        ¥             ¥               Yen\n¦        ¦             ¦               Broken vertical bar\n§        §             §               Section\n¨        ¨             ¨               Spacing diaeresis\n©        ©             ©               Copyright\nª        ª             ª               Feminine ordinal indicator\n«        «             «               Opening/Left angle quotation mark\n¬        ¬             ¬               Negation\n­        ­             ­               Soft hyphen\n®        ®             ®               Registered trademark\n¯        ¯             ¯               Spacing macron\n°        °             °               Degree\n±        ±             ±               Plus or minus\n²        ²             ²               Superscript 2\n³        ³             ³               Superscript 3\n´        ´             ´               Spacing acute\nµ        µ             µ               Micro\n¶        ¶             ¶               Paragraph\n¸        ¸             ¸               Spacing cedilla\n¹        ¹             ¹               Superscript 1\nº        º             º               Masculine ordinal indicator\n»        »             »               Closing/Right angle quotation mark\n¼        ¼             ¼               Fraction 1/4\n½        ½             ½               Fraction 1/2\n¾        ¾             ¾               Fraction 3/4\n¿        ¿             ¿               Inverted question mark\n×        ×             ×               Multiplication\n÷        ÷             ÷               Divide\n\n\nMath Symbols#\n\nHTML에서 지원되는 모든 수학 기호의 전체 목록입니다.\n\nSYMBOL   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\n∀        ∀             ∀               For all\n∂        ∂             ∂               Part\n∃        ∃             ∃               Exist\n∅        ∅             ∅               Empty\n∇        ∇             ∇               Nabla\n∈        ∈             ∈               Is in\n∉        ∉             ∉               Not in\n∋        ∋             ∋               Ni\n∏        ∏             ∏               Product\n∑        ∑             ∑               Sum\n−        −             −               Minus\n∗        ∗             ∗               Asterisk (Lowast)\n√        √             √               Square root\n∝        ∝             ∝               Proportional to\n∞        ∞             ∞               Infinity\n∠        ∠             ∠               Angle\n∧        ∧             ∧               And\n∨        ∨             ∨               Or\n∩        ∩             ∩               Cap\n∪        ∪             ∪               Cup\n∫        ∫             ∫               Integral\n∴        ∴             ∴               Therefore\n∼        ∼             ∼               Similar to\n≅        ≅             ≅               Congurent to\n≈        ≈             ≈               Almost equal\n≠        ≠             ≠               Not equal\n≡        ≡             ≡               Equivalent\n≤        ≤             ≤               Less or equal\n≥        ≥             ≥               Greater or equal\n⊂        ⊂             ⊂               Subset of\n⊃        ⊃             ⊃               Superset of\n⊄        ⊄             ⊄               Not subset of\n⊆        ⊆             ⊆               Subset or equal\n⊇        ⊇             ⊇               Superset or equal\n⊕        ⊕             ⊕               Circled plus\n⊗        ⊗             ⊗               Circled times\n⊥        ⊥             ⊥               Perpendicular\n⋅        ⋅             ⋅               Dot operator\n\n\nGreek Letters#\n\nHTML에서 지원되는 모든 그리스 문자의 전체 목록입니다.\n\nLETTER   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\nΑ        Α             Α               Alpha\nΒ        Β             Β               Beta\nΓ        Γ             Γ               Gamma\nΔ        Δ             Δ               Delta\nΕ        Ε             Ε               Epsilon\nΖ        Ζ             Ζ               Zeta\nΗ        Η             Η               Eta\nΘ        Θ             Θ               Theta\nΙ        Ι             Ι               Iota\nΚ        Κ             Κ               Kappa\nΛ        Λ             Λ               Lambda\nΜ        Μ             Μ               Mu\nΝ        Ν             Ν               Nu\nΞ        Ξ             Ξ               Xi\nΟ        Ο             Ο               Omicron\nΠ        Π             Π               Pi\nΡ        Ρ             Ρ               Rho\nΣ        Σ             Σ               Sigma\nΤ        Τ             Τ               Tau\nΥ        Υ             Υ               Upsilon\nΦ        Φ             Φ               Phi\nΧ        Χ             Χ               Chi\nΨ        Ψ             Ψ               Psi\nΩ        Ω             Ω               Omega\nα        α             α               alpha\nβ        β             β               beta\nγ        γ             γ               gamma\nδ        δ             δ               delta\nε        ε             ε               epsilon\nζ        ζ             ζ               zeta\nη        η             η               eta\nθ        θ             θ               theta\nι        ι             ι               iota\nκ        κ             κ               kappa\nλ        λ             λ               lambda\nμ        μ             μ               mu\nν        ν             ν               nu\nξ        ξ             ξ               xi\nο        ο             ο               omicron\nπ        π             π               pi\nρ        ρ             ρ               rho\nς        ς             ς               sigmaf\nσ        σ             σ               sigma\nτ        τ             τ               tau\nυ        υ             υ               upsilon\nφ        φ             φ               phi\nχ        χ             χ               chi\nψ        ψ             ψ               psi\nω        ω             ω               omega\nϑ        ϑ             ϑ               Theta symbol\nϒ        ϒ             ϒ               Upsilon symbol\nϖ        ϖ             ϖ               Pi symbol\n\n\nMiscellaneous HTML entities#\n\n기타 HTML 엔터티 목록입니다.\n\nSYMBOL   ENTITY NAME   ENTITY NUMBER   DESCRIPTION\nŒ        Œ             Œ               Uppercase ligature OE\nœ        œ             œ               Lowercase ligature OE\nŠ        Š             Š               Uppercase S with caron\nš        š             š               Lowercase S with caron\nŸ        Ÿ             Ÿ               Capital Y with diaeres\nƒ        ƒ             ƒ               Lowercase with hook\nˆ        ˆ             ˆ               Circumflex accent\n˜        ˜             ˜               Tilde\n                                       En space\n                                       Em space\n                                       Thin space\n‌        ‌             ‌               Zero width non-joiner\n‍        ‍             ‍               Zero width joiner\n‎        ‎             ‎               Left-to-right mark\n‏        ‏             ‏               Right-to-left mark\n–        –             –               En dash\n—        —             —               Em dash\n‘        ‘             ‘               Left single quotation mark\n’        ’             ’               Right single quotation mark\n‚        ‚             ‚               Single low-9 quotation mark\n“        “             “               Left double quotation mark\n”        ”             ”               Right double quotation mark\n„        „             „               Double low-9 quotation mark\n†        †             †               Dagger\n‡        ‡             ‡               Double dagger\n•        •             •               Bullet\n…        …             …               Horizontal ellipsis\n‰        ‰             ‰               Per mille\n′        ′             ′               Minutes (Degrees)\n″        ″             ″               Seconds (Degrees)\n‹        ‹             ‹               Single left angle quotation\n›        ›             ›               Single right angle quotation\n‾        ‾             ‾               Overline\n€        €             €               Euro\n™        ™             ™               Trademark\n←        ←             ←               Left arrow\n↑        ↑             ↑               Up arrow\n→        →             →               Right arrow\n↓        ↓             ↓               Down arrow\n↔        ↔             ↔               Left right arrow\n↵        ↵             ↵               Carriage return arrow\n⌈        ⌈             ⌈               Left ceiling\n⌉        ⌉             ⌉               Right ceiling\n⌊        ⌊             ⌊               Left floor\n⌋        ⌋             ⌋               Right floor\n◊        ◊             ◊               Lozenge\n♠        ♠             ♠               Spade\n♣        ♣             ♣               Club\n♥        ♥             ♥               Heart\n♦        ♦             ♦               Diamond","routePath":"/note/html/entity","lang":"","toc":[{"text":"ASCII Characters (Printable)","id":"ascii-characters-printable","depth":2,"charIndex":3},{"text":"ISO 8859-1 Characters","id":"iso-8859-1-characters","depth":2,"charIndex":5281},{"text":"ISO-8859-1 Symbols","id":"iso-8859-1-symbols","depth":2,"charIndex":10560},{"text":"Math Symbols","id":"math-symbols","depth":2,"charIndex":12458},{"text":"Greek Letters","id":"greek-letters","depth":2,"charIndex":14414},{"text":"Miscellaneous HTML entities","id":"miscellaneous-html-entities","depth":2,"charIndex":16838}],"frontmatter":{},"version":""},{"title":"IndexedDB","content":"#\n\n\n特点#\n\n * 键值对储存。\n * 异步\n * 支持事物(transaction)\n * 同源限制\n * 储存空间大\n * 支持二进制\n\n\n基本概念#\n\n * 数据库：IDBDatabase 对象\n * 对象仓库：IDBObjectStore 对象\n * 索引： IDBIndex 对象\n * 事务： IDBTransaction 对象\n * 操作请求：IDBRequest 对象\n * 指针： IDBCursor 对象\n * 主键集合：IDBKeyRange 对象\n\n\n打开数据库#\n\nconst request = window.indexedDB.open(\"dbname\", 1);\n// error事件表示打开数据库失败。\nrequest.onerror = function (event) {\n  console.log(\"数据库打开报错\");\n};\n// success事件表示成功打开数据库。\nrequest.onsuccess = function (event) {\n  console.log(request.result);\n  console.log(\"数据库打开成功\");\n};\n// 如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded。\nrequest.onupgradeneeded = function (event) {\n  console.log(event.target.result);\n};\n\n\n\n新建数据库#\n\nrequest.onupgradeneeded = function (event) {\n  const db = event.target.result;\n  const objectStore = db.createObjectStore(\"person\", { keyPath: \"id\" });\n\n  // 自动生成主键\n  // const objectStore = db.createObjectStore('person', { autoIncrement: true });\n\n  // 创建索引\n  objectStore.createIndex(\"name\", \"name\", { unique: false });\n  objectStore.createIndex(\"email\", \"email\", { unique: true });\n};\n\n\n\n新增数据#\n\n通过 objectStore 对象的 add()方法，向表格写入一条记录。\n\nfunction add() {\n  var request = db\n    .transaction([\"person\"], \"readwrite\")\n    .objectStore(\"person\")\n    .add({ id: 1, name: \"张三\", age: 24, email: \"zhangsan@example.com\" });\n\n  request.onsuccess = function (event) {\n    console.log(\"数据写入成功\");\n  };\n\n  request.onerror = function (event) {\n    console.log(\"数据写入失败\");\n  };\n}\n\n\n\n读取数据#\n\n读取数据也是通过事务完成。 objectStore.get()方法用于读取数据，参数是主键的值。\n\nfunction read() {\n  var transaction = db.transaction([\"person\"]);\n  var objectStore = transaction.objectStore(\"person\");\n  var request = objectStore.get(1);\n\n  request.onerror = function (event) {\n    console.log(\"事务失败\");\n  };\n\n  request.onsuccess = function (event) {\n    if (request.result) {\n      console.log(request.result);\n    } else {\n      console.log(\"未获得数据记录\");\n    }\n  };\n}\n\n\n\n遍历数据#\n\n新建指针对象的 openCursor()方法是一个异步操作，所以要监听 success 事件。\n\nfunction readAll() {\n  var objectStore = db.transaction(\"person\").objectStore(\"person\");\n\n  objectStore.openCursor().onsuccess = function (event) {\n    var cursor = event.target.result;\n\n    if (cursor) {\n      console.log(cursor);\n      cursor.continue();\n    } else {\n      console.log(\"没有更多数据了！\");\n    }\n  };\n}\n\n\n\n更新数据#\n\nput()方法自动更新了主键为 1 的记录。\n\nfunction update() {\n  var request = db\n    .transaction([\"person\"], \"readwrite\")\n    .objectStore(\"person\")\n    .put({ id: 1, name: \"李四\", age: 35, email: \"lisi@example.com\" });\n\n  request.onsuccess = function (event) {\n    console.log(\"数据更新成功\");\n  };\n\n  request.onerror = function (event) {\n    console.log(\"数据更新失败\");\n  };\n}\n\n\n\n删除数据#\n\nIDBObjectStore.delete()方法用于删除记录。\n\nfunction remove() {\n  var request = db.transaction([\"person\"], \"readwrite\").objectStore(\"person\").delete(1);\n\n  request.onsuccess = function (event) {\n    console.log(\"数据删除成功\");\n  };\n}\n\n\n\n使用索引#\n\nvar transaction = db.transaction([\"person\"], \"readonly\");\nvar store = transaction.objectStore(\"person\");\nvar index = store.index(\"name\");\nvar request = index.get(\"李四\");\n\nrequest.onsuccess = function (e) {\n  var result = e.target.result;\n  if (result) {\n    // ...\n  } else {\n    // ...\n  }\n};\n\n\n\nhtml#\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <button class=\"add\">add</button>\n      <button class=\"get\">get</button>\n      <button class=\"getall\">getall</button>\n\n      <button class=\"put\">put</button>\n\n      <button class=\"del\">del</button>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.0.min.js\"></script>\n    <script>\n      $(function () {\n        let db;\n\n        const request = window.indexedDB.open(\"dbname\", 2);\n        // error事件表示打开数据库失败。\n        request.onerror = function (event) {\n          console.log(\"数据库打开报错\");\n        };\n        // success事件表示成功打开数据库。\n        request.onsuccess = function (event) {\n          db = request.result;\n          console.log(request.result);\n          console.log(\"数据库打开成功\");\n        };\n        // 如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded。\n        request.onupgradeneeded = function (event) {\n          console.log(event.target.result);\n          db = event.target.result;\n          if (!db.objectStoreNames.contains(\"person\")) {\n            const objectStore = db.createObjectStore(\"person\", { keyPath: \"id\" });\n            objectStore.createIndex(\"name\", \"name\", { unique: false });\n            objectStore.createIndex(\"email\", \"email\", { unique: true });\n          }\n          console.log(111);\n        };\n\n        $(\".add\").click(function () {\n          let req = db\n            .transaction([\"person\"], \"readwrite\")\n            .objectStore(\"person\")\n            .add({ id: new Date().getTime(), name: \"张三\", age: 24, email: `${new Date().getTime()}+a@.com` });\n\n          req.onsuccess = function (event) {\n            console.log(\"数据写入成功\");\n          };\n\n          req.onerror = function (event) {\n            console.log(\"数据写入失败\");\n          };\n        });\n\n        $(\".get\").click(function () {\n          var transaction = db.transaction([\"person\"]);\n          var objectStore = transaction.objectStore(\"person\");\n          var req = objectStore.get(1);\n\n          req.onerror = function (event) {\n            console.log(\"事务失败\");\n          };\n\n          req.onsuccess = function (event) {\n            if (req.result) {\n              console.log(req.result);\n            } else {\n              console.log(\"未获得数据记录\");\n            }\n          };\n        });\n\n        $(\".getall\").click(function () {\n          var objectStore = db.transaction([\"person\"], \"readwrite\").objectStore(\"person\");\n\n          objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n\n            if (cursor) {\n              console.log(cursor);\n              cursor.continue();\n            } else {\n              console.log(\"没有更多数据了！\");\n            }\n          };\n        });\n\n        $(\".put\").click(function () {\n          var req = db.transaction([\"person\"], \"readwrite\").objectStore(\"person\").put({ id: 1, name: \"李四\" });\n\n          req.onsuccess = function (event) {\n            console.log(\"数据更新成功\");\n          };\n\n          req.onerror = function (event) {\n            console.log(\"数据更新失败\");\n          };\n        });\n\n        $(\".del\").click(function () {\n          var req = db.transaction([\"person\"], \"readwrite\").objectStore(\"person\").delete(1587451687741);\n\n          req.onsuccess = function (event) {\n            console.log(\"数据删除成功\");\n          };\n        });\n      });\n    </script>\n  </body>\n</html>\n","routePath":"/note/html/indexedDB","lang":"","toc":[{"text":"特点","id":"特点","depth":3,"charIndex":3},{"text":"基本概念","id":"基本概念","depth":3,"charIndex":73},{"text":"打开数据库","id":"打开数据库","depth":3,"charIndex":239},{"text":"新建数据库","id":"新建数据库","depth":3,"charIndex":645},{"text":"新增数据","id":"新增数据","depth":3,"charIndex":1042},{"text":"读取数据","id":"读取数据","depth":3,"charIndex":1417},{"text":"遍历数据","id":"遍历数据","depth":3,"charIndex":1863},{"text":"更新数据","id":"更新数据","depth":3,"charIndex":2236},{"text":"删除数据","id":"删除数据","depth":3,"charIndex":2595},{"text":"使用索引","id":"使用索引","depth":3,"charIndex":2824},{"text":"html","id":"html","depth":3,"charIndex":3127}],"frontmatter":{},"version":""},{"title":"Web Storage","content":"#\n\n\nlocalStorage, sessionStorage#\n\nlocalStorage.setItem(\"myCat\", \"Tom\");\nlocalStorage.getItem(\"myCat\");\nlocalStorage.removeItem(\"myCat\");\nlocalStorage.clear();\n\n\n\nsetItem 값 모니터링#\n\nconst orignalSetItem = localStorage.setItem;\n\nlocalStorage.setItem = function (key, newValue) {\n  let setItemEvent = new Event(\"setItemEvent\");\n  setItemEvent.value = localStorage.getItem(key); // 필요에 따라 사용.\n  setItemEvent.newValue = newValue;\n  setItemEvent.key = key;\n  window.dispatchEvent(setItemEvent);\n  orignalSetItem.apply(this, arguments);\n};\n\nwindow.addEventListener(\"setItemEvent\", function (e) {\n  console.log(e);\n});\n\n\n\ncookie#\n\n// 读取Cookie\ndocument.cookie;\n\n// 基本\ndocument.cookie = \"name=Raymond\";\n// 动态使用\ndocument.cookie = \"name=\" + encodeURIComponent(name);\n// 创建2个cookie\ndocument.cookie = \"name=Raymond\";\ndocument.cookie = \"age=43\";\n// 设置过期\ndocument.cookie = \"name=Raymond; expires=Fri, 31 Dec 9999 23:59:59 GMT\";\n// 设置子域名访问\ndocument.cookie = \"name=Raymond; domail=app.guryong.cc\";\n\n// 删除Cookie 只需把时间设置为过去的时间\ndocument.cookie = \"name=Raymond; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n","routePath":"/note/html/storage","lang":"","toc":[{"text":"localStorage, sessionStorage","id":"localstorage-sessionstorage","depth":2,"charIndex":3},{"text":"setItem 값 모니터링","id":"setitem-값-모니터링","depth":2,"charIndex":162},{"text":"cookie","id":"cookie","depth":3,"charIndex":612}],"frontmatter":{},"version":""},{"title":"Markup Tag","content":"#\n\nElements 이 페이지는 태그를 사용해 만들 수 있는 모든 HTML 요소의 목록을 제공합니다. 필요로 하는 요소를 쉽게 찾을 수 있도록\n기능별로 분류했으며, 각각의 요소 참조 페이지 사이드바에서는 사전 순으로 정렬된 목록도 확인할 수 있습니다.\n\n\n메인 루트#\n\n요소     설명\nhtml   HTML 문서의 루트(최상위 요소)를 나타내므로 root 요소라고도 합니다. 다른 모든 요소는 이 요소의\n       자손이어야 합니다.\n\n\n문서 메타데이터#\n\n메타데이터는 스타일, 스크립트, 각종 소프트웨어검색 엔진, 브라우저 등의 탐색 및 렌더링을 도와줄 데이터 등 페이지에 대한 정보를 가집니다.\n스타일과 스크립트 메타데이터는 페이지 안에서 정의할 수도 있고, 해당하는 정보를 가진 다른 파일로 링크할 수도 있습니다.\n\n요소      설명\nbase    문서의 모든 상대 URL에 사용할 기본 URL을 지정합니다. 문서에는 이러한 요소가 하나만 있을 수\n        있습니다.\nhead    제목 스크립트 및 스타일 시트와 같은 문서에 대한 기계 판독 가능 정보(메타데이터)를 포함합니다.\nlink    현재 문서와 외부 리소스 간의 관계를 지정합니다. 이 요소는 CSS에 연결하는 데 가장 일반적으로 사용되지만\n        무엇보다도 사이트 아이콘(\"favicon\" 스타일 아이콘과 홈 화면용 아이콘 및 모바일 장치의 앱)을\n        설정하는 데도 사용됩니다.\nmeta    base, link, script, style, title과 같은 다른 메타관련 요소로 나타낼 수 없는\n        메타데이터를 나타냅니다.\nstyle   문서 또는 문서의 일부에 대한 스타일 정보를 포함합니다. 이 요소를 포함하는 문서의 내용에 적용되는 CSS를\n        포함합니다\ntitle   browser의 제목 표시줄 또는 페이지의 탭에 표시되는 문서의 제목을 정의합니다. 텍스트만 포함합니다.\n        요소 내의 태그는 무시됩니다.\n\n\n섹션 루트#\n\n요소     설명\nbody   HTML 문서의 내용을 나타냅니다. 문서에는 이러한 요소가 하나만 있을 수 있습니다.\n\n\n콘텐츠 섹션#\n\n콘텐츠 섹션 요소를 사용하면 문서 콘텐츠를 논리적 조각으로 구성할 수 있습니다. 섹션 요소를 사용하여 머리글 및 바닥글 탐색, 콘텐츠 섹션을\n식별하는 머리글 요소를 포함하여 페이지 콘텐츠에 대한 광범위한 개요를 만듭니다.\n\n요소                       설명\naddress                  가까운 HTML 요소의 사람, 단체, 조직 등에 대한 연락처 정보를 나타냅니다.\narticle                  문서, 페이지, 애플리케이션, 또는 사이트 안에서 독립적으로 구분해 배포하거나 재사용할 수 있는 구획을\n                         나타냅니다. 사용 예제로 게시판과 블로그 글, 매거진이나 뉴스 기사 등이 있습니다.\naside                    문서의 주요 내용과 간접적으로만 연관된 부분을 나타냅니다. 주로 사이드바 혹은 콜아웃 박스로 표현합니다.\nfooter                   가장 가까운 섹션 콘텐츠나 섹션 루트의 푸터를 나타냅니다. 푸터는 일반적으로 섹션의 작성자, 저작권 정보,\n                         관련 문서 등의 내용을 담습니다.\nheader                   소개 및 탐색에 도움을 주는 콘텐츠를 나타냅니다. 제목, 로고, 검색 폼, 작성자 이름 등의 요소도 포함할\n                         수 있습니다.\nh1, h2, h3, h4, h5, h6   6단계의 구획 제목을 나타냅니다. 구획 단계는 h1이 가장 높고 h6은 가장 낮습니다.\nmain                     문서 body의 주요 콘텐츠를 나타냅니다. 주요 콘텐츠 영역은 문서의 핵심 주제나 앱의 핵심 기능에\n                         직접적으로 연결됐거나 확장하는 콘텐츠로 이루어집니다.\nnav                      문서의 부분 중 현재 페이지 내, 또는 다른 페이지로의 링크를 보여주는 구획을 나타냅니다. 자주 쓰이는\n                         예제는 메뉴, 목차, 색인입니다.\nsection                  HTML 문서의 독립적인 구획을 나타내며, 더 적합한 의미를 가진 요소가 없을 때 사용합니다. 보통\n                         <section>은 제목을 포함하지만, 항상 그런 것은 아닙니다.\n\n\n텍스트 콘텐츠#\n\nHTML 텍스트 콘텐츠를 사용하여 여는 body와 닫는 </body> 태그 사이의 블록이나 콘텐츠 구획을 정리할 수 있습니다. 해당 콘텐츠의\n목적이나 구조 판별에 사용하므로 접근성과 SEO에 중요합니다.\n\n요소           설명\nblockquote   안쪽의 텍스트가 긴 인용문임을 나타냅니다. 주로 들여쓰기를 한 것으로 그려집니다. 인용문의 출처 URL은\n             cite 속성으로, 출처 텍스트는 cite 요소로 제공할 수 있습니다.\ndd           설명 목록(dl)에서 선행 용어(dt)에 대한 설명, 정의 또는 값을 제공합니다.\ndiv          유동 콘텐츠의 일반 컨테이너입니다. CSS를 사용하여 어떤 식으로든 스타일을 지정할 때까지 콘텐츠나\n             레이아웃에 영향을 미치지 않습니다(예: 스타일이 직접 적용되거나 flexbox와 같은 일종의 레이아웃 모델이\n             적용됨) 부모 요소.\ndl           설명 목록을 나타냅니다. <dl>은 dt로 표기한 용어와 dd 요소로 표기한 설명 그룹의 목록을 감싸서 설명\n             목록을 생성합니다. 주로 용어사전 구현이나 메타데이터(키-값 쌍 목록)를 표시할 때 사용합니다.\ndt           설명 혹은 정의 리스트에서 용어를 나타냅니다. dl 요소 안에 위치해야 합니다. 보통 dd 요소가\n             뒤따르지만, 여러 개의 요소를 연속해 배치하면 바로 다음 dd 요소로 한꺼번에 서술할 수 있습니다.\nfigcaption   부모 figure 요소가 포함하는 다른 콘텐츠에 대한 설명 혹은 범례를 나타냅니다.\nfigure       독립적인 콘텐츠를 표현합니다. figcaption 요소를 사용해 설명을 붙일 수 있습니다. 피규어, 설명,\n             콘텐츠는 하나의 단위로 참조됩니다.\nhr           이야기 장면 전환, 구획 내 주제 변경 등, 문단 레벨 요소에서 주제의 분리를 나타냅니다.\nli           목록의 항목을 나타냅니다. 반드시 정렬 목록(ol), 비정렬 목록 ul, 혹은 메뉴(menu) 안에 위치해야\n             합니다. 메뉴와 비정렬 목록에서는 보통 불릿으로 항목을 나타내고, 정렬 목록에서는 숫자나 문자를 사용한\n             오름차순 카운터로 나타냅니다.\nmenu         사용자가 수행하거나 하는 명령 묶음을 말합니다. 이것은 스크린 위에 나오는 목록 메뉴와 눌려진 버튼 아래에\n             나오는 것과 같은 맥락 메뉴를 포함합니다.\nol           정렬된 목록을 나타냅니다. 보통 숫자 목록으로 표현합니다.\np            하나의 문단을 나타냅니다. 시각적인 매체에서, 문단은 보통 인접 블록과의 여백과 첫 줄의 들여쓰기로\n             구분하지만, HTML에서 문단은 이미지나 입력 폼 등 서로 관련있는 콘텐츠 무엇이나 될 수 있습니다.\npre          미리 서식을 지정한 텍스트를 나타내며, HTML에 작성한 내용 그대로 표현합니다. 텍스트는 보통 고정폭\n             글꼴을 사용해 렌더링하고, 요소 내 공백문자를 그대로 유지합니다.\nul           정렬되지 않은 목록을 나타냅니다. 보통 불릿으로 표현합니다.\n\n\n인라인 텍스트 시멘틱#\n\nHTML 인라인 텍스트 시멘틱을 사용해서 단어, 줄, 혹은 아무 부분의 의미나 구조, 스타일을 정의할 수 있습니다.\n\n요소       설명\na        href 특성을 통해 다른 페이지나 같은 페이지의 어느 위치, 파일, 이메일 주소와 그 외 다른 URL로\n         연결할 수 있는 하이퍼링크를 만듭니다. <a> 안의 콘텐츠는 링크 목적지의 설명을 나타내야 합니다.\nabbr     준말 또는 머리글자를 나타냅니다. 선택 속성인 title을 사용하면 준말의 전체 뜻이나 설명을 제공할 수\n         있습니다. title 속성은 전체 설명만을 가져야 하며 다른건 포함할 수 없습니다.\nb        독자의 주의를 요소의 콘텐츠로 끌기 위한 용도로 사용합니다. 그 외의 다른 특별한 중요도는 주어지지\n         않습니다. 원래는 \"굵은 글씨 요소\"로 불렸으며, 대부분의 브라우저도 여전히 텍스트를 굵은 글씨체로\n         강조합니다. 그러나 <b>를 사용해 텍스트를 꾸미면 안됩니다. 대신 CSS font-weight를 사용해\n         굵은 글씨체를 적용하거나, strong 요소를 사용해 특별히 중요한 텍스트를 나타내세요.\nbdi      포함된 텍스트를 주변 텍스트와 분리하여 처리하도록 브라우저의 양방향 알고리즘에 지시합니다. 웹 사이트가 일부\n         텍스트를 동적으로 삽입하고 삽입되는 텍스트의 방향성을 모를 때 특히 유용합니다.\nbdo      현재 텍스트의 쓰기 방향을 덮어쓰고 다른 방향으로 렌더링 할 때 사용합니다.\nbr       텍스트 안에 줄바꿈(캐리지 리턴)을 생성합니다. 주소나 시조 등 줄의 구분이 중요한 내용을 작성할 때\n         유용합니다.\ncite     저작물의 출처를 표기할 때 사용하며, 제목을 반드시 포함해야 합니다. 적절한 맥락 아래에서는 출처를 축약해서\n         표기할 수 있습니다.\ncode     짧은 코드 조각을 나타내는 스타일을 사용해 자신의 콘텐츠를 표시합니다. 기본 스타일은 사용자 에이전트의\n         고정폭 글씨체입니다.\ndata     주어진 콘텐츠를 기계가 읽을 수 있는 해석본과 연결합니다. 콘텐츠가 시간 혹은 날짜 관련 정보라면 대신\n         time 요소를 사용하세요.\ndfn      현재 맥락이나 문장에서 정의하고 있는 용어를 나타냅니다. <dfn>에서 가장 가까운 p, dt/dd 쌍,\n         section 조상 요소를 용어 정의로 간주합니다.\nem       텍스트의 강세를 나타냅니다. <em> 요소를 중첩하면 더 큰 강세를 뜻하게 됩니다.\ni        텍스트에서 어떤 이유로 주위와 구분해야 하는 부분을 나타냅니다. 기술 용어, 외국어 구절, 등장인물의 생각\n         등을 예시로 들 수 있습니다. 보통 기울임꼴로 표시합니다.\nkbd      키보드 입력, 음성 입력 등 임의의 장치를 사용한 사용자의 입력을 나타냅니다. 관례에 따라 사용자 에이전트의\n         고정폭 글꼴로 표시하지만, HTML 표준은 그런 점을 강제하지 않습니다.\nmark     현재 맥락에 관련이 깊거나 중요해 표시 또는 하이라이트한 부분을 나타냅니다.\nq        둘러싼 텍스트가 짧은 인라인 인용문이라는것을 나타냅니다. 대부분의 브라우저에서는 앞과 뒤에 따옴표를 붙여\n         표현합니다. <q>는 줄 바꿈이 없는 짧은 경우에 적합합니다. 긴 인용문은 blockquote 요소를\n         사용하세요.\nrp       ruby 요소를 사용한 루비 주석을 지원하지 않는 경우 보여줄 괄호를 제공할 때 사용합니다. rt 요소를\n         감싸는 여는 괄호와 닫는 괄호를 각각의 <rp> 요소로 나타내야 합니다.\nrt       동아시아 문자의 루비 주석에서 발음, 번역 등을 나타내는 텍스트 부분을 지정합니다.\nruby     루비 주석을 나타냅니다. 루비 주석은 동아시아 문자의 발음을 표기할 때 사용합니다.\ns        글자에 취소선, 즉 글자를 가로지르는 선을 그립니다. <s> 요소를 사용해 이제 관계 없거나 더 이상\n         정확하지 않은 부분을 나타내세요. 그러나, <s>는 문서의 편집 기록을 나타내는 용도로는 적합하지 않습니다.\n         상황에 따라 del과 ins 요소를 대신 사용하세요.\nsamp     컴퓨터 프로그램 출력의 예시(혹은 인용문)를 나타냅니다. 보통 브라우저의 기본 고정폭 글씨체(보통\n         Courier, Lucida Console)를 사용해 렌더링합니다.\nsmall    덧붙이는 글이나, 저작권과 법률 표기 등의 작은 텍스트를 나타냅니다. 기본 상태에서 <small>은 자신의\n         콘텐츠를 한 사이즈 작은 글꼴(small에서 x-small 등)로 표시하지만, 스타일을 적용한 후에도 글씨\n         크기가 작을 필요는 없습니다.\nspan     구문 콘텐츠를 위한 통용 인라인 컨테이너로, 본질적으로는 아무것도 나타내지 않습니다. 스타일을 적용하기\n         위해서, 또는 lang 등 어떤 특성의 값을 서로 공유하는 요소를 묶을 때 사용할 수 있습니다. 적절한\n         의미를 가진 다른 요소가 없을 때에만 사용해야 합니다. <span>은 div와 매우 유사하지만, div는\n         블록 레벨 요소인 반면 <span>은 인라인 요소입니다.\nstrong   중대하거나 긴급한 콘텐츠를 나타냅니다. 보통 브라우저는 굵은 글씨로 표시합니다.\nsub      활자 배치를 아래 첨자로 해야 하는 인라인 텍스트를 지정합니다. 아래 첨자는 보통 더 작은 글씨 크기를\n         가지고, 기준선을 아래로 내려 렌더링 합니다.\nsup      활자 배치를 위 첨자로 해야 하는 인라인 텍스트를 지정합니다. 위 첨자는 보통 더 작은 글씨 크기를 가지고,\n         기준선을 위로 올려 렌더링 합니다.\ntime     시간의 특정 지점 또는 구간을 나타냅니다. datetime 특성의 값을 지정해 보다 적절한 검색 결과나,\n         알림 같은 특정 기능을 구현할 때 사용할 수 있습니다.\nu        글자로 표현하지 않는 주석을 가진 것으로 렌더링 해야 하는 텍스트를 나타냅니다. 기본값에서는 단순한 밑줄로\n         표시하지만 CSS를 사용해 바꿀 수 있습니다.\nvar      수학 표현 또는 프로그래밍에서 변수의 이름을 나타냅니다. 보통 현재 글씨체의 기울임꼴로 표시하지만,\n         브라우저마다 다를 수 있습니다.\nwbr      현재 요소의 줄 바꿈 규칙을 무시하고 브라우저가 줄을 바꿀 수 있는 위치를 나타냅니다.\n\n\n이미지 & 멀티미디어#\n\nHTML은 사진, 오디오, 비디오 등 다양한 멀티미디어 리소스를 지원합니다..\n\n요소      설명\narea    이미지의 핫스팟 영역을 정의하고 하이퍼링크를 추가할 수 있습니다. map 요소 안에서만 사용할 수 있습니다.\naudio   문서에 소리 콘텐츠를 포함할 때 사용합니다. src 특성 또는 source 요소를 사용해 한 개 이상의\n        오디오 소스를 지정할 수 있으며, 다수를 지정한 경우 가장 적절한 소스를 브라우저가 고릅니다.\n        MediaStream을 사용하면 미디어 스트림을 바라볼 수도 있습니다.\nimg     문서에 이미지를 넣습니다.\nmap     area 요소와 함께 이미지 맵(클릭 가능한 링크 영역)을 정의할 때 사용합니다.\ntrack   미디어 요소(audio, video)의 자식으로서, 자막 등 시간별 텍스트 트랙(시간 기반 데이터)를 지정할\n        때 사용합니다. 트랙은 WebVTT(Web Video Text Tracks, .vtt 파일) 또는 Timed\n        Text Markup Language(TTML)형식을 사용해야 합니다.\nvideo   비디오 플레이백을 지원하는 미디어 플레이어를 문서에 삽입합니다. 오디오 콘텐츠에도 사용할 수 있으나,\n        audio 요소가 사용자 경험에 좀 더 적합합니다.\n\n\n내장 콘텐츠#\n\nHTML은 일반적인 멀티미디어 콘텐츠 외에도 다양한 종류의 기타 콘텐츠를 포함할 수 있습니다.\n\n요소        설명\nembed     외부 어플리케이션이나 대화형 컨텐츠와의 통합점을 나타냅니다.\niframe    중첩 브라우징 맥락을 나타내는 요소로, 현재 문서 안에 다른 HTML 페이지를 삽입합니다.\nobject    이미지나, 중첩된 브라우저 컨텍스트, 플러그인에 의해 다뤄질수 있는 리소스와 같은 외부 리소스를 나타냅니다.\npicture   0개 이상의 source 요소와 하나의 img 요소를 포함하여 다양한 디스플레이/장치 시나리오에 대한\n          이미지의 대체 버전을 제공합니다.\nportal    새 페이지로의 원활한 탐색을 위해 다른 HTML 페이지를 현재 페이지에 포함할 수 있습니다.\nsource    그림, 오디오 요소 또는 비디오 요소에 대한 여러 미디어 리소스를 지정합니다. 이는 콘텐츠가 없고 닫는\n          태그가 없음을 의미하는 무효 요소입니다. 일반적으로 이미지 파일 형식과 미디어 파일 형식에 대한 서로 다른\n          지원을 제공하는 광범위한 브라우저와의 호환성을 제공하기 위해 여러 파일 형식으로 동일한 미디어 콘텐츠를\n          제공하는 데 사용됩니다.\n\n\nSVG와 MathML#\n\nsvg 및 math 요소를 사용하여 SVG 및 MathML 콘텐츠를 HTML 문서에 직접 삽입할 수 있습니다.\n\n요소     설명\nsvg    새 좌표계 및 뷰포트를 정의하는 컨테이너입니다. SVG 문서의 가장 바깥쪽 요소로 사용되지만 SVG 또는\n       HTML 문서 내부에 SVG 조각을 포함하는 데에도 사용할 수 있습니다.\nmath   MathML의 최상위 요소입니다. 모든 유효한 MathML 인스턴스는 여기에 래핑되어야 합니다. 또한 두\n       번째 <math> 요소를 다른 요소에 중첩해서는 안 되지만 그 안에 임의의 수의 다른 자식 요소를 포함할 수\n       있습니다.\n\n\n스크립트#\n\nHTML은 동적인 콘텐츠와 웹 어플리케이션을 위해 스크립트 언어, 그 중에서도 주로 JavaScript를 지원합니다. 특정 요소가 이런 기능을\n가지고 있습니다.\n\n요소         설명\ncanvas     캔버스 스크립팅 API 또는 WebGL API와 함께 사용해 그래픽과 애니메이션을 그릴 수 있습니다.\nnoscript   페이지의 스크립트 유형을 지원하지 않거나, 브라우저가 스크립트를 비활성화한 경우 보여줄 HTML 구획을\n           정의합니다.\nscript     데이터와 실행 가능한 코드를 문서에 포함할 때 사용하며 보통 JavaScript 코드와 함께 씁니다.\n           WebGL의 GLSL 셰이더 프로그래밍 언어, JSON 등 다른 언어와도 사용할 수 있습니다.\n\n\n수정사항 표시#\n\n텍스트의 특정 부분이 수정됐다는 것을 표시할 수 있습니다.\n\n요소    설명\ndel   문서에서 제거된 텍스트의 범위를 나타냅니다. 문서나 소스 코드의 변경점 추적 등에 사용할 수 있습니다.\n      ins 요소를 추가된 텍스트의 범위를 나타낼 수 있습니다.\nins   문서에 추가된 텍스트의 범위를 나타냅니다. del 요소를 사용하면 삭제된 텍스트의 범위를 나타낼 수\n      있습니다.\n\n\n표 콘텐츠#\n\n표 형식의 데이터를 생성하고 처리할 때 사용합니다.\n\n요소         설명\ncaption    표의 설명 또는 제목을 나타냅니다.\ncol        표의 열을 나타내며, 열에 속하는 칸에 공통된 의미를 부여할 때 사용합니다. colgroup 안에서 찾을 수\n           있습니다.\ncolgroup   표의 열을 묶는 그룹을 정의합니다.\ntable      행과 열로 이루어진 표를 나타냅니다.\ntbody      표의 여러 행(tr)을 묶어서 표 본문을 구성합니다.\ntd         데이터를 포함하는 표의 셀을 정의합니다. 이것은 표 모델에 참여합니다.\ntfoot      테이블의 열을 요약하는 행들의 집합입니다.\nth         테이블 셀 그룹의 헤더로 셀을 정의합니다. 이 그룹의 정확한 특성은 scope 및 headers 속성으로\n           정의됩니다.\nthead      테이블 열의 헤드를 정의하는 일련의 행을 정의합니다.\ntr         테이블의 셀 행을 정의합니다. 그런 다음 td(데이터 셀) 및 th(헤더 셀) 요소를 혼합하여 행의 셀을\n           설정할 수 있습니다.ents.\n\n\n양식#\n\nHTML은 여러가지 입력 가능한 요소를 제공합니다. 이런 요소를 서로 조합하면 사용자가 내용을 채우고, 웹사이트나 어플리케이션에 제출할 수\n있습니다. HTML 폼 안내서에 더욱 다양한 내용이 있습니다.\n\n요소         설명\nbutton     클릭 가능한 버튼을 나타냅니다. 버튼은 양식 내부는 물론 간단한 표준 버튼 기능이 필요한 곳이라면 문서\n           어디에나 배치할 수 있습니다. 기본값의 HTML 버튼은 사용자 에이전트의 호스트 플랫폼과 비슷한 디자인을\n           따라가지만, 외형은 CSS로 변경할 수 있습니다.\ndatalist   다른 컨트롤에서 고를 수 있는 가능한, 혹은 추천하는 선택지를 나타내는 option 요소 여럿을 담습니다.\nfieldset   웹 양식의 여러 컨트롤과 레이블(label)을 묶을 때 사용합니다.\nform       정보를 제출하기 위한 대화형 컨트롤을 포함하는 문서 구획을 나타냅니다.\ninput      웹 기반 양식에서 사용자의 데이터를 받을 수 있는 대화형 컨트롤을 생성합니다. 사용자 에이전트에 따라서\n           다양한 종류의 입력 데이터 유형과 컨트롤 위젯이 존재합니다. 입력 유형과 특성의 다양한 조합 가능성으로\n           인해, <input> 요소는 HTML에서 제일 강력하고 복잡한 요소 중 하나입니다.\nlabel      사용자 인터페이스 항목의 설명을 나타냅니다.\nlegend     부모 fieldset 콘텐츠의 설명을 나타냅니다.\nmeter      특정 범위 내에서의 스칼라 값, 또는 백분율 값을 나타냅니다.\noptgroup   select 요소의 옵션을 묶을 수 있습니다.\noption     select, optgroup, datalist 요소의 항목을 정의합니다. 그러므로, <option>을\n           사용해 팝업 메뉴 등 목록에서 하나의 항목을 나타낼 수 있습니다.\noutput     웹 사이트나 앱에서 계산이나 사용자 행동의 결과를 삽입할 수 있는 컨테이너 요소입니다.\nprogress   어느 작업의 완료 정도를 나타내며, 주로 진행 표시줄의 형태를 띕니다.\nselect     옵션 메뉴를 제공하는 컨트롤을 나타냅니다.\ntextarea   멀티라인 일반 텍스트 편집 컨트롤을 나타냅니다.\n\n\n대화형 요소#\n\nHTML은 상호작용 가능한 사용자 인터페이스 객체를 만들 때 사용할 수 있는 요소를 지원합니다.\n\n요소        설명\ndetails   \"열림\" 상태일 때만 내부 정보를 보여주는 정보 공개 위젯을 생성합니다. 요약이나 레이블은 summary\n          요소를 통해 제공할 수 있습니다.\ndialog    닫을 수 있는 경고, 검사기, 창 등 대화 상자 및 기타 다른 상호작용 가능한 컴포넌트를 나타냅니다.\nsummary   (\"상세\") 요소의 공개 상자에 대한 요약, 캡션 또는 범례를 지정한다. <요약> 요소를 클릭하면 부모\n          <상세> 요소의 상태가 열리거나 닫힌다.\n\n\n웹 컴포넌트#\n\n웹 컴포넌트는 완전히 새로운 형태의 요소를 생성한 후 일반적인 HTML처럼 사용할 수 있는 기술입니다. 또한 표준 HTML 요소의 맞춤 버전을\n만들 수도 있습니다.\n\n요소         설명\nslot       웹 컴포넌트 사용자가 자신만의 마크업으로 채워 별도의 DOM 트리를 생성하고, 컴포넌트와 함께 표현할 수\n           있는 웹 컴포넌트 내부의 플레이스홀더입니다.\ntemplate   페이지를 불러온 순간 즉시 그려지지는 않지만, 이후 JavaScript를 사용해 인스턴스를 생성할 수 있는\n           HTML 코드를 담을 방법을 제공합니다.\n\n\n폐기됐거나 사용하지 않는 요소들#\n\n> 경고: 다음은 더 이상 사용하지 않고, 사용해서도 안되는 오래된 HTML 요소입니다. 새로운 프로젝트에서 절대 사용해서는 안되고, 오래된\n> 프로젝트에서도 가능한 빨리 대체해야 합니다. 아래 목록은 정보성 목적으로만 존재합니다.\n\n요소          설명\nacronym     작성자가 단어의 두문자어 또는 약어를 구성하는 일련의 문자를 명확하게 표시할 수 있습니다.\napplet      문서에 Java 애플릿을 포함합니다. 이 요소는 object를 위해 더 이상 사용되지 않습니다.\nbgsound     페이지가 사용되는 동안 백그라운드에서 재생되도록 사운드 파일을 설정합니다. 대신 audio를 사용하세요.\nbig         포함된 텍스트를 주변 텍스트보다 한 수준 더 큰 글꼴 크기로 렌더링합니다(예: 'medium'은\n            'large'가 됨). 크기는 브라우저의 최대 허용 글꼴 크기로 제한됩니다.\ncenter      포함하는 요소 내에서 수평 중앙에 블록 수준 또는 인라인 콘텐츠를 표시합니다.\ncontent     Web Components 기술 제품군의 구식 부분은 삽입 지점으로 Shadow DOM 내부에서 사용되었으며\n            일반 HTML에서는 사용되지 않았습니다. 이제 slot 요소로 대체되어 Shadow DOM을 삽입할 수 있는\n            DOM의 지점을 생성합니다.\ndir         잠재적으로 사용자 에이전트에 의해 적용된 스타일 및 아이콘이 있는 파일 및/또는 폴더의 디렉토리에 대한\n            컨테이너입니다. 이 오래된 요소를 사용하지 마십시오. 대신 파일 목록을 포함하여 목록에 ul 요소를 사용해야\n            합니다.\nfont        콘텐츠의 글꼴 크기, 색상 및 면을 정의합니다.\nframe       다른 HTML 문서를 표시할 수 있는 특정 영역을 정의합니다. 프레임은 frameset 내에서 사용해야\n            합니다.\nframeset    frame 요소를 포함하는 데 사용됩니다.\nimage       img 요소에 대한 오래되고 제대로 지원되지 않는 전구체입니다. 사용해서는 안됩니다.\nmarquee     텍스트의 스크롤 영역을 삽입하는 데 사용됩니다. 속성을 사용하여 텍스트가 콘텐츠 영역의 가장자리에 도달할 때\n            발생하는 상황을 제어할 수 있습니다.\nmenuitem    사용자가 팝업 메뉴를 통해 호출할 수 있는 명령을 나타냅니다. 여기에는 상황에 맞는 메뉴와 메뉴 버튼에\n            연결될 수 있는 메뉴가 포함됩니다.\nnobr        포함된 텍스트가 여러 줄에 걸쳐 자동으로 줄바꿈되지 않도록 방지하여 잠재적으로 사용자가 텍스트의 전체 너비를\n            보기 위해 가로로 스크롤해야 합니다.\nnoembed     embed 요소를 지원하지 않거나 작성자가 사용하려는 embedded content 유형을 지원하지 않는\n            브라우저에 대한 대안 또는 \"대체\" 콘텐츠를 제공하는 더 이상 사용되지 않는 비표준 방식입니다. 이 요소는\n            object 요소의 여는 태그와 닫는 태그 사이에 대체 콘텐츠를 배치하기 위해 HTML 4.01 이상에서 더\n            이상 사용되지 않습니다.\nnoframes    frame 요소를 지원하지 않거나 지원하지 않는 브라우저에 표시할 콘텐츠를 제공합니다. 가장 일반적으로\n            사용되는 브라우저는 프레임을 지원하지만 텍스트 모드 브라우저뿐만 아니라 일부 모바일 브라우저를 포함한 특정\n            특수 용도 브라우저를 포함하여 예외가 있습니다.\nparam       object 요소에 대한 매개변수를 정의합니다.\nplaintext   object 요소의 매개변수를 정의합니다.\nrb          ruby 주석의 기본 텍스트 구성 요소, 즉 주석이 추가되는 텍스트를 구분하는 데 사용됩니다. 하나의\n            <rb> 요소는 기본 텍스트의 각 개별 원자 세그먼트를 래핑해야 합니다.\nrtc         ruby 표기의 기반 텍스트 구성요소(루비 주석을 적용하려는 글자)를 나눌 때 사용합니다. 하나의 <rb>\n            요소는 기반 텍스트에서의 최소 단위를 하나 감싸야 합니다.\nshadow      rb 요소가 표시하는 문자의 의미에 대한 주석을 나타냅니다. <rb>는 발음(rt)과 의미(<rtc>) 둘\n            다 가질 수 있습니다.\nspacer      페이지에 빈 공간을 삽입할 수 있습니다. 웹 디자이너가 실제로 이미지를 사용하지 않고 웹 페이지에 공백을\n            추가하는 데 사용했던 단일 픽셀 레이아웃 이미지와 동일한 효과를 달성하기 위해 Netscape가\n            고안했습니다. 그러나 <spacer>는 더 이상 주요 브라우저에서 지원되지 않으며 이제 간단한 CSS를\n            사용하여 동일한 효과를 얻을 수 있습니다.\nstrike      텍스트 위에 취소선(수평선)을 그립니다.\ntt          사용자 에이전트 기본 모노스페이스 글꼴을 사용하여 표시되는 인라인 텍스트를 생성합니다. 이 요소는\n            텔레타이프, 텍스트 전용 화면 또는 라인 프린터와 같은 고정 너비 디스플레이에 표시되는 텍스트를 렌더링하기\n            위해 만들어졌습니다.\nxmp         시작 태그와 끝 태그 사이의 HTML을 해석하지 않고 고정 폭 글꼴을 사용하여 텍스트를 렌더링합니다.\n            HTML2 사양에서는 한 줄에 80자를 허용할 만큼 충분히 넓게 렌더링해야 한다고 권장했습니다.","routePath":"/note/html/tag","lang":"","toc":[{"text":"메인 루트","id":"메인-루트","depth":2,"charIndex":143},{"text":"문서 메타데이터","id":"문서-메타데이터","depth":2,"charIndex":247},{"text":"섹션 루트","id":"섹션-루트","depth":2,"charIndex":980},{"text":"콘텐츠 섹션","id":"콘텐츠-섹션","depth":2,"charIndex":1055},{"text":"텍스트 콘텐츠","id":"텍스트-콘텐츠","depth":2,"charIndex":2255},{"text":"인라인 텍스트 시멘틱","id":"인라인-텍스트-시멘틱","depth":2,"charIndex":3896},{"text":"이미지 & 멀티미디어","id":"이미지--멀티미디어","depth":2,"charIndex":7168},{"text":"내장 콘텐츠","id":"내장-콘텐츠","depth":2,"charIndex":7849},{"text":"SVG와 MathML","id":"svg와-mathml","depth":2,"charIndex":8491},{"text":"스크립트","id":"스크립트","depth":2,"charIndex":8841},{"text":"수정사항 표시","id":"수정사항-표시","depth":2,"charIndex":9242},{"text":"표 콘텐츠","id":"표-콘텐츠","depth":2,"charIndex":9474},{"text":"양식","id":"양식","depth":2,"charIndex":10065},{"text":"대화형 요소","id":"대화형-요소","depth":2,"charIndex":11204},{"text":"웹 컴포넌트","id":"웹-컴포넌트","depth":2,"charIndex":11549},{"text":"폐기됐거나 사용하지 않는 요소들","id":"폐기됐거나-사용하지-않는-요소들","depth":2,"charIndex":11878}],"frontmatter":{},"version":""},{"title":"关键性能指标","content":"#\n\n\n连接性能#\n\n\n延迟#\n\n延迟是指 IP 数据包从一个网络端点到另一个网络端点所话费的时间。与之相关的是往返延时(RTT - Rount-Trip Time),\n它是延迟的时间的两倍。延迟是制约 Web 性能的主要瓶颈，尤其对于 HTTP 这样的协议，因为其中包含大量往返于服务器的请求\n\n(一些移动设备为节省电力，可能暂时关闭移动数据信号。如果设备需要临时唤醒移动数据设备，建立新连接时还要增加数秒的延迟)\n\n\n宽带#\n\n只要宽带没有饱和，两个网络端点之间的连接会一次处理尽可能多的数据量。依据 Web 页面饮用资源的大小和网络连接的传输能力，宽带可能会成为性能的瓶颈\n\n\nDNS 查询#\n\n在客户端能够获取 Web 页面钱，它需要通过域名系统把主机名称转换成 IP 地址，DNS 相当于互联网上的电话号码薄。获取的 HTML\n页面中所引用；哦你给的各个不同余名也需要转换；幸运的事，一个域名只需转换一次\n\n\n建立连接时间#\n\n在客户端和服务器之间建立连接需要往返数据应答， 成为‘三次握手’。\n\n\nTLS(Transport Layer Security)协商时间#\n\n如果客户端发起 HTTPS 连接，它需要进行 TLS 协商; TLS 用来取代 SSL(Secure Sockets\nLayer)。除了服务器和客户端的计算处理耗时之外，TLS 还会造成额外的往返传输\n\n\n单点故障(SPOF - Single Point Of Failure)#\n\nWeb 页面上引用的某个资源，如果它出问题，将延迟整个页面的加载(甚至导致页面出错)。\n\n\n服务器或内容#\n\n\nTTFB(Time To First Byte)#\n\n客户端从开始定位到 Web\n页面，直接收到主体页面响应的第一字节所耗费的时间。它包含了之前连接性能各种耗时，还要加上服务器的处理时间。对于主体页面上的资源，TTFB\n测量的是从浏览器发起请求至收到其第一字节之间的耗时。\n\n\nContent Download#\n\n等同于被请求资源的最后字节到达时间。\n\n\n开始渲染时间(Time to First Meaningful Paint)#\n\n客户端的屏幕上什么时候开始现实内容？这个指标测量的是用户看到空白页面的时长\n\n\n文档加载完成时间#\n\n这是客户端浏览器认为页面加载完毕的时间\n\n\n额外考虑#\n\n * 更多的字节\n * 更多的资源\n * 更高的复杂度\n * 更多的域名\n * 更多的 TCP socket\n\n\n网络#\n\n减少 http 请求#\n\n * 合并 js\n\n * 合并 css\n\n * css sprite\n\n * base64\n\n减少资源大小#\n\n * html, css, js minify\n * gzip 压缩\n * image minify\n * 不滥用字体\n\n缓存#\n\n * DNS 缓存\n\n<link rel=\"dns-prefetch\" href=\"//ajax.googleapis.com\" />\n\n\n * http 缓存(Cache-Control, E-tag)\n\n * 部署 CDN\n\n * 使用长缓存\n\n * 避免重定向\n\n * TCP 连接(参考: https://istlsfastyet.com/)\n\n<link rel=\"precontent\" href=\"//fonts.google.com\" crossorigin />\n\n\n * 避免阻塞 CSS/JS\n\n\n浏览器渲染#\n\n\nDOM 优化#\n\n * 避免进行繁琐的 DOM 操作\n * 复杂的 UI 元素, 设置 position 为 absolute 或者 fixed\n * requestAnimationFrame 代替 setTimeout\n * 适当使用 canvas\n * 使用事件代理\n\n\n样式优化#\n\n * 尽量避免内联样式\n * 禁用 css Expression\n * 尽量使用 css 动画\n\n\nhtml 优化#\n\n * css 文件放头部, js 放底部或者异步处理\n\n\n图片优化#\n\n * Lazyload\n\n\n异步#\n\n * 常用数据缓存","routePath":"/note/performance/metric","lang":"","toc":[{"text":"连接性能","id":"连接性能","depth":2,"charIndex":3},{"text":"延迟","id":"延迟","depth":3,"charIndex":11},{"text":"宽带","id":"宽带","depth":3,"charIndex":210},{"text":"DNS 查询","id":"dns-查询","depth":3,"charIndex":291},{"text":"建立连接时间","id":"建立连接时间","depth":3,"charIndex":409},{"text":"TLS(Transport Layer Security)协商时间","id":"tlstransport-layer-security协商时间","depth":3,"charIndex":454},{"text":"单点故障(SPOF - Single Point Of Failure)","id":"单点故障spof---single-point-of-failure","depth":3,"charIndex":593},{"text":"服务器或内容","id":"服务器或内容","depth":2,"charIndex":678},{"text":"TTFB(Time To First Byte)","id":"ttfbtime-to-first-byte","depth":3,"charIndex":688},{"text":"Content Download","id":"content-download","depth":3,"charIndex":827},{"text":"开始渲染时间(Time to First Meaningful Paint)","id":"开始渲染时间time-to-first-meaningful-paint","depth":3,"charIndex":867},{"text":"文档加载完成时间","id":"文档加载完成时间","depth":3,"charIndex":948},{"text":"额外考虑","id":"额外考虑","depth":2,"charIndex":981},{"text":"网络","id":"网络","depth":2,"charIndex":1045},{"text":"减少 http 请求","id":"减少-http-请求","depth":4,"charIndex":1050},{"text":"减少资源大小","id":"减少资源大小","depth":4,"charIndex":1110},{"text":"缓存","id":"缓存","depth":4,"charIndex":1180},{"text":"浏览器渲染","id":"浏览器渲染","depth":2,"charIndex":1445},{"text":"DOM 优化","id":"dom-优化","depth":3,"charIndex":1454},{"text":"样式优化","id":"样式优化","depth":3,"charIndex":1593},{"text":"html 优化","id":"html-优化","depth":3,"charIndex":1650},{"text":"图片优化","id":"图片优化","depth":3,"charIndex":1689},{"text":"异步","id":"异步","depth":3,"charIndex":1710}],"frontmatter":{},"version":""},{"title":"RAIL","content":"#\n\nRAIL(Response Animation Idle Load)의 성능의 핵심은 '사용자에게 초점을 맞추세요. 최종 목표는 사이트가 특정 장치에서\n빠르게 작동하도록 만드는 것이 아니라 사용자를 행복하게 만드는 것'입니다.\n\n\nResponse#\n\n100ms 이내에 사용자 입력을 승인하여 즉시 사용자에게 응답합니다.\n\n\nAnimation#\n\n애니메이션을 적용할 때, 각 프레임을 16ms 미만으로 렌더링하여 일관성을 유지하고 버벅거림을 방지하세요.\n\n\nIdle#\n\n기본 JavaScript 스레드를 사용하는 경우, 50ms 미만의 시간 동안 청크로 작업하여 사용자 상호작용을 위한 스레드를 확보합니다.\n\n\nLoad#\n\n5초 이내에 상호작용 가능한 콘텐츠를 제공합니다.\n\n\n참고#\n\n * https://web.dev/articles/rail?hl=ko#focus_on_the_user","routePath":"/note/performance/rail","lang":"","toc":[{"text":"Response","id":"response","depth":2,"charIndex":127},{"text":"Animation","id":"animation","depth":2,"charIndex":179},{"text":"Idle","id":"idle","depth":2,"charIndex":253},{"text":"Load","id":"load","depth":2,"charIndex":339},{"text":"참고","id":"참고","depth":3,"charIndex":376}],"frontmatter":{},"version":""},{"title":"Hooks","content":"#\n\n\nuseState#\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return <h1 onClick={() => setCount(count + 1)}>{count}</h1>;\n};\n\n\n\nuseReducer#\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n    </>\n  );\n}\n\n\n\nuseContext#\n\n\n\nconst Context = createContext({ theme: \"light\" });\n\nconst Child = () => {\n  const { theme } = useContext(Context);\n  return <>{theme}</>;\n};\n\nconst Parent = () => {\n  return <Child />;\n};\n\nconst App = () => {\n  return (\n    <Context.Provider value={{ theme: \"dark\" }}>\n      <Parent />\n    </Context.Provider>\n  );\n};\n\nexport default App;\n\n\n\neffect관련#\n\n\nuseEffect#\n\nconst App = () => {\n  useEffect(() => {\n    console.log(111);\n  }, []);\n  return <div>title</div>;\n};\n\n\n\nuseLayoutEffect#\n\nconst App = () => {\n  useLayoutEffect(() => {\n    console.log(111);\n  }, []);\n  return <div>title</div>;\n};\n\n\n\nuseInsertionEffect#\n\nconst App = () => {\n  useInsertionEffect(() => {\n    console.log(111);\n  }, []);\n  return <div>title</div>;\n};\n\n\n\nuseEffectEvent#\n\n\n\n\n\nref관련#\n\n\nuseRef#\n\n\n\nconst Child = forwardRef((props: any, ref: any) => {\n  return <input ref={ref} />;\n});\n\nconst Parent = () => {\n  const inputRef = (useRef < HTMLInputElement) | (null > null);\n  const onClick = () => {\n    if (inputRef.current) {\n      inputRef.current.value = \"reset\";\n    }\n  };\n  return (\n    <>\n      <Child ref={inputRef} />\n      <button onClick={onClick}>reset</button>\n    </>\n  );\n};\n\nconst App = () => {\n  return <Parent />;\n};\n\nexport default App;\n\n\n\nuseImperativeHandle#\n\n\n\n\n\n성능관련#\n\n\nuseMemo#\n\nconst App = () => {\n  const title = useMemo(() => \"dao\", []);\n  return <div>{title}</div>;\n};\n\n\n\nuseCallback#\n\nconst App = () => {\n  const setTitle = useCallback(() => {\n    console.log(111);\n  }, []);\n  return (\n    <button\n      type=\"button\"\n      onClick={setTitle}\n    >\n      +\n    </button>\n  );\n};\n\n\n\nuseMemoCache#\n\n\n\n\n\n디버깅관련#\n\n\nuseDebugValue#\n\n\n\n\n\nconcurrent 동시성모드#\n\n\nuseTransition#\n\nconst App = () => {\n  const [value, setValue] = useState(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    // 긴급처리건.\n    setValue(e.target.value);\n    startTransition(() => {\n      // 후순위 처리.\n      setContent(e.target.value);\n    });\n  };\n  return (\n    <>\n      <input\n        value={value}\n        onChange={onChange}\n      />\n      <div>{value.length}</div>\n    </>\n  );\n};\n\n\n\nuseDeferredValue#\n\nconst App = () => {\n  const [value, setValue] = useState(\"\");\n  const lowValue = useDeferredValue(value.length);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <>\n      <input\n        value={value}\n        onChange={onChange}\n      />\n      <div>{lowValue}</div>\n    </>\n  );\n};\n\n\n\nuseSyncExternalStore(useMutableSource)#\n\n// todoStore.js\nlet nextId = 0;\nlet todos = [{ id: nextId++, text: \"Todo #1\" }];\nlet listeners = [];\n\nexport const todosStore = {\n  addTodo() {\n    todos = [...todos, { id: nextId++, text: \"Todo #\" + nextId }];\n    emitChange();\n  },\n  subscribe(listener) {\n    listeners = [...listeners, listener];\n    return () => {\n      listeners = listeners.filter((l) => l !== listener);\n    };\n  },\n  getSnapshot() {\n    return todos;\n  },\n};\n\nfunction emitChange() {\n  for (let listener of listeners) {\n    listener();\n  }\n}\n\n// App.jsx\nconst App = () => {\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n  return (\n    <>\n      <button onClick={todosStore.addTodo}>Add todo</button>\n      <hr />\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\n\n\nRSC(React Server Component)#\n\n\nuseId#\n\n// 여러번 불러오는 컴포넌트일 경우 아래와 같이 필요함.\nconst App = () => {\n  const inputId = useId();\n\n  return (\n    <>\n      <input id={`${inputId}-firstName`} />\n      <input id={`${inputId}-lastName`} />\n    </>\n  );\n};\n// ssr일경우 생성한 id가 다른경우가 있음.\n// 1. 서버단 생성시 id=\"1\" 생성\n// 2. <div id=\"1\"></div>을 client에게 전달\n// 3. csr랭딩시 hydrate를 통해서 id=\"2\" 로 처리.\n\n\n\nuse#\n\n\n\n\n\nuseCacheRefresh#\n\n\n\n\n\nuseOptimistic#\n\n\n\n\n\nuseFormStatus(react-dom)#\n\n\n","routePath":"/note/react/hooks","lang":"","toc":[{"text":"useState","id":"usestate","depth":3,"charIndex":3},{"text":"useReducer","id":"usereducer","depth":3,"charIndex":144},{"text":"useContext","id":"usecontext","depth":3,"charIndex":716},{"text":"effect관련","id":"effect관련","depth":2,"charIndex":1073},{"text":"useEffect","id":"useeffect","depth":3,"charIndex":1085},{"text":"useLayoutEffect","id":"uselayouteffect","depth":3,"charIndex":1202},{"text":"useInsertionEffect","id":"useinsertioneffect","depth":3,"charIndex":1331},{"text":"useEffectEvent","id":"useeffectevent","depth":3,"charIndex":1466},{"text":"ref관련","id":"ref관련","depth":2,"charIndex":1487},{"text":"useRef","id":"useref","depth":3,"charIndex":1496},{"text":"useImperativeHandle","id":"useimperativehandle","depth":3,"charIndex":1968},{"text":"성능관련","id":"성능관련","depth":2,"charIndex":1994},{"text":"useMemo","id":"usememo","depth":3,"charIndex":2002},{"text":"useCallback","id":"usecallback","depth":3,"charIndex":2109},{"text":"useMemoCache","id":"usememocache","depth":3,"charIndex":2321},{"text":"디버깅관련","id":"디버깅관련","depth":2,"charIndex":2340},{"text":"useDebugValue","id":"usedebugvalue","depth":3,"charIndex":2349},{"text":"concurrent 동시성모드","id":"concurrent-동시성모드","depth":2,"charIndex":2369},{"text":"useTransition","id":"usetransition","depth":3,"charIndex":2389},{"text":"useDeferredValue","id":"usedeferredvalue","depth":3,"charIndex":2860},{"text":"useSyncExternalStore(useMutableSource)","id":"usesyncexternalstoreusemutablesource","depth":3,"charIndex":3225},{"text":"RSC(React Server Component)","id":"rscreact-server-component","depth":2,"charIndex":4121},{"text":"useId","id":"useid","depth":3,"charIndex":4152},{"text":"use","id":"use","depth":3,"charIndex":4494},{"text":"useCacheRefresh","id":"usecacherefresh","depth":3,"charIndex":4504},{"text":"useOptimistic","id":"useoptimistic","depth":3,"charIndex":4526},{"text":"useFormStatus(react-dom)","id":"useformstatusreact-dom","depth":3,"charIndex":4546}],"frontmatter":{},"version":""},{"title":"","content":"函数组件 (Function component)#\n\nfunction Greeting(props) {\n  return <div>Hi {props.name}!</div>;\n}\nGreeting.defaultProps = {\n  name: \"Guest\",\n};\n\n\n属性解构 (Destructuring props)#\n\nfunction Greeting({ name = \"dao\" }) {\n  return <div>Hi {props.name}!</div>;\n}\n\n\nJSX 中的属性展开 (JSX spread attributes)#\n\nfunction Greeting({ name, ...restProps }) {\n  return <div {...restProps}>Hi {name}!</div>;\n}\n\n\n合并解构属性和其它值 (Merge destructured props with other values)#\n\nfunction MyButton(props) {\n  return (\n    <button\n      className=\"btn\"\n      {...props}\n    />\n  );\n}\n\n\n条件渲染 (Conditional rendering)#\n\n// 如果\n{\n  condition && <span>Rendered when `truthy`</span>;\n}\n// 除非\n{\n  condition || <span>Rendered when `falsy`</span>;\n}\n// 如果-否则\n{\n  condition ? <span>Rendered when `truthy`</span> : <span>Rendered when `falsy`</span>;\n}\n\n\n渲染属性 (Render prop)#\n\nconst Width = ({ children }) => children(500);\n<Width>{(width) => <div>window is {width}</div>}</Width>;\n\n\n代理组件 (Proxy component)#\n\nconst Button = props => <button type=\"button\" {...props}>\n\n\n样式组件 (Style component)#\n\n\nconst PrimaryBtn = props => <Btn {...props} primary />;\n\nconst Btn = ({ className, primary, ...props }) => (\n  <button\n    type=\"button\"\n    className={classnames(\"btn\", primary && \"btn-primary\", className)}\n    {...props}\n  />\n);\n\n<PrimaryBtn />\n<Btn primary />\n\n\n组织事件 (Event switch)#\n\nhandleEvent({type}) {\n  switch(type) {\n    case \"click\":\n      return require(\"./actions/doStuff\")(/* action dates */)\n    case \"mouseenter\":\n      return this.setState({ hovered: true })\n    case \"mouseleave\":\n      return this.setState({ hovered: false })\n    default:\n      return console.warn(`No case for event type \"${type}\"`)\n  }\n}\n\n\n布局组件 (Layout component)#\n\n<HorizontalSplit\n  leftSide={<SomeSmartComponent />}\n  rightSide={<AnotherSmartComponent />}\n/>;\nconst HorizontalSplit = ({ leftSide, rightSide }) => (\n  <FlexContainer>\n    <div>{leftSide}</div>\n    <div>{rightSide}</div>\n  </FlexContainer>\n);\n\n\n容器组件 (Container component)#\n\n容器用来获取数据然后渲染到子组件上，仅仅如此。 —Jason Bonta\n\nconst CommentList = ({ comments }) => (\n  <ul>\n    {comments.map(comment => (\n      <li>\n        {comment.body}-{comment.author}\n      </li>\n    ))}\n  </ul>\n);\n\nconst CommentListContainer = () => {\n  useEffect(() => {\n    $.ajax({\n      url: \"/my-comments.json\",\n      dataType: 'json',\n      success: comments =>\n        this.setState({comments: comments});\n    })\n  },[])\n\n  return <CommentList comments={this.state.comments} />\n}\n\n\n高阶组件 (Higher-order component)#\n\n * 接受一个或多个组件作为输入\n * 输出一个组件\n\nconst WrapContainer = (Component) => {\n  return () => (\n    <Container>\n      <Component />\n    </Container>\n  );\n};\n\n\n受控组件#\n\ninput 的 value 和 state 同步\n\nsub Components#\n\nconst ListGroup = ({ children }) => <ul>{children}</ul>;\nconst List = () => (\n  <Fragment>\n    <li>1</li>\n    <li>2</li>\n  </Fragment>\n);\n\nList.group = ListGroup;\n\nconst App = () => (\n  <List.group>\n    <List />\n  </List.group>\n);\n\n\ncontext#\n\nconst ContextCounter = React.createContext();\n\nconst App = () => (\n  <ContextCounter.Provider value={0}>\n    <Child />\n  </ContextCounter.Provider>\n);\n\nconst Child = () => {\n  const count = useContext(ContextCounter);\n  return <h1>{count}</h1>;\n};\n\n\ncreatePortal#\n\n\n\nconst Po = ({ children }) => {\n  return createPortal(children, document.getElementById(\"modal\"));\n};\n\nexport default Po;\n\n\nProfiler#\n\n\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const onRender = (id, phase, actualDuration, baseDuration, startTime, commitTime, interactions) => {\n    // id: string - 发生提交的 Profiler 树的 id。 如果有多个 profiler，它能用来分辨树的哪一部分发生了“提交”。\n    // phase: \"mount\" | \"update\" - 判断是组件树的第一次装载引起的重渲染，还是由 props、state 或是 hooks 改变引起的重渲染。\n    // actualDuration: number - 本次更新在渲染 Profiler 和它的子代上花费的时间。 这个数值表明使用 memoization 之后能表现得多好。（例如 React.memo，useMemo，shouldComponentUpdate）。 理想情况下，由于子代只会因特定的 prop 改变而重渲染，因此这个值应该在第一次装载之后显著下降。\n    // baseDuration: number - 在 Profiler 树中最近一次每一个组件 render 的持续时间。 这个值估计了最差的渲染时间。（例如当它是第一次加载或者组件树没有使用 memoization）。\n    // startTime: number - 本次更新中 React 开始渲染的时间戳。\n    // commitTime: number - 本次更新中 React commit 阶段结束的时间戳。 在一次 commit 中这个值在所有的 profiler 之间是共享的，可以将它们按需分组。\n    // interactions: Set - 当更新被制定时，“interactions” 的集合会被追踪。（例如当 render 或者 setState 被调用时）。\n  };\n\n  return (\n    <Profiler\n      id=\"App\"\n      onRender={onRender}\n    >\n      <div>{count}</div>\n      <button onClick={() => setCount(count + 1)}>sc</button>\n    </Profiler>\n  );\n};\n\nexport default App;\n","routePath":"/note/react/pattern","lang":"","toc":[{"text":"函数组件 (Function component)","id":"函数组件-function-component","depth":4,"charIndex":-1},{"text":"属性解构 (Destructuring props)","id":"属性解构-destructuring-props","depth":4,"charIndex":142},{"text":"JSX 中的属性展开 (JSX spread attributes)","id":"jsx-中的属性展开-jsx-spread-attributes","depth":4,"charIndex":251},{"text":"合并解构属性和其它值 (Merge destructured props with other values)","id":"合并解构属性和其它值-merge-destructured-props-with-other-values","depth":4,"charIndex":383},{"text":"条件渲染 (Conditional rendering)","id":"条件渲染-conditional-rendering","depth":4,"charIndex":546},{"text":"渲染属性 (Render prop)","id":"渲染属性-render-prop","depth":4,"charIndex":803},{"text":"代理组件 (Proxy component)","id":"代理组件-proxy-component","depth":4,"charIndex":931},{"text":"样式组件 (Style component)","id":"样式组件-style-component","depth":4,"charIndex":1016},{"text":"组织事件 (Event switch)","id":"组织事件-event-switch","depth":4,"charIndex":1307},{"text":"布局组件 (Layout component)","id":"布局组件-layout-component","depth":4,"charIndex":1670},{"text":"容器组件 (Container component)","id":"容器组件-container-component","depth":4,"charIndex":1943},{"text":"高阶组件 (Higher-order component)","id":"高阶组件-higher-order-component","depth":4,"charIndex":2445},{"text":"受控组件","id":"受控组件","depth":4,"charIndex":2624},{"text":"sub Components","id":"sub-components","depth":4,"charIndex":2657},{"text":"context","id":"context","depth":4,"charIndex":2907},{"text":"createPortal","id":"createportal","depth":4,"charIndex":3167},{"text":"Profiler","id":"profiler","depth":4,"charIndex":3307}],"frontmatter":{},"version":""},{"title":"React성능 최적화","content":"#\n\n\nDiff Algorithm (VDOM)#\n\n1. Tree diff 동일레벨(depth) 요소끼리 비교#\n\n// 전부 교체\n<section>\n\t<div className=\"content\">hello</div>\n</section>\n<div className=\"content\">hello</div>\n\n\n2. component 비교#\n\n// 전부 교체\nconst About = () => <div>About</div>;\nconst Main = () => <div>About</div>;\n\nvisible ? <About /> : <Main />;\n\n\n3. Element Type 비교#\n\n// 전부 교체\n<section>\n\t<div className=\"content\">hello</div>\n</section>\n<div>\n\t<div className=\"content\">hello</div>\n</div>\n\n// Element가 동일하니 다음 단계로 pass\n<div>\n\t<section className=\"content\">hello</section>\n</div>\n<div>\n\t<div className=\"content\">hello</div>\n</div>\n\n\n\n4. Element Props 비교#\n\n// Element가 동일할 경우 props 변경된 부분만 교체, 순서 중요하지 않음. 스타일 obj도 마찬가지.\n<div style={{width: 40}} id=\"a\">\n\t<div className=\"content\">hello</div>\n</div>\n<div style={{width: 70, height: 30}} id=\"b\">\n\t<div className=\"content\">hello</div>\n</div>\n\n// style값이 동일하더라도 변경은 없지만 내부적으로 변화를 비교함\n<div style={{width: 40}}>\n\t<div className=\"content\">hello</div>\n</div>\n<div style={{width: 40}}>\n\t<div className=\"content\">hello</div>\n</div>\n\n\n5. key(우선순위 제일 높음.)#\n\n// key설정 하지 않으면 null로 처리.\n<div></div>\n<div id=\"a\"></div>\n\n// key 다르면 판단하지 않고 교체.\n<div key=\"1\">123</div>\n<div key=\"2\">123</div>\n\n// key & type(component, element포함)이 동일한 경우 vdom(fiber) 노드를 그대로 사용. (업데이트와 생성의 차이))\n// 전부 교체.\n<div key=\"1\">123</div>\n<p key=\"1\">123</p>\n\n\n6. 멀티노드 비교#\n\n 1. 1단계(비교)\n\n// newChildNode, oldChildNode 동시 끝나는 경우(Update 처리)\n// old\n<ul>\n<li key=\"0\" className=\"normal\">0</li>\n<li key=\"1\" className=\"normal\">1</li>\n<li key=\"2\" className=\"normal\">2</li>\n</ul>\n// new\n<ul>\n<li key=\"0\" className=\"bold\">0</li>\n<li key=\"1\" className=\"bold\">1</li>\n<li key=\"2\" className=\"bold\">2</li>\n</ul>\n//\n// newChildNode 순회가 먼저 끝나는 경우(Vdom Delection 처리)\n// old\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li>\n<li key=\"2\">2</li> <!-- Delection 처리 -->\n</ul>\n// new\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li>\n</ul>\n//\n// oldChildNode 순회가 먼저 끝나는 경우(Vdom Placement 처리)\n// old\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li>\n</ul>\n// new\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li>\n<li key=\"2\">2</li> <!-- Placement 처리 -->\n</ul>\n//\n// key가 동일하고 type이 다를 경우 oldChildNode Deletion처리.\n// old\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li> <!-- Delection 처리 -->\n<li key=\"2\">2</li>\n</ul>\n// new\n<ul>\n<li key=\"0\">0</li>\n<div key=\"1\">1</div>\n<li key=\"2\">2</li>\n</ul>\n//\n// oldChildNode, newChildNode모두 남아 있는 경우(key가 다른 부분이 있으면 바로 다음단계.)\n// old\n<ul>\n<li key=\"0\">0</li>\n<li key=\"1\">1</li>\n<li key=\"2\">2</li>\n</ul>\n// new\n<ul>\n<li key=\"0\">0</li>\n<li key=\"2\">2</li>\n<li key=\"1\">1</li>\n</ul>\n\n\n 2. 2단계(교체)\n\n- 빠른 처리를 위해서 남아있는 oldChildNode를 map객체에 [key]: fiber(vdom) 추가한다.\n- placeChild 실행\n    1. lastPlacedIndex = 0\n    2. oldIndex ≥ lastPlaceIndex 일때 이동하지 않고 lastPlaceIndex = oldIndex로 설정.\n    3. oldIndex < lastPlaceIndex 일때 맨 뒤로 이동.\n    4. map객체에 관련된 데이터가 없을 경우 Placement\n    5. oldChildNode순회후 newChildNode랑 매핑되지 않는 부분은 Deletion 처리\n\n// old\n<ul>\n<li key=\"a\">a</li>\n<li key=\"b\">b</li>\n<li key=\"c\">c</li>\n<li key=\"d\">d</li>\n</ul>\n// new\n<ul>\n<li key=\"d\">d</li>\n<li key=\"a\">a</li>\n<li key=\"b\">b</li>\n<li key=\"c\">c</li>\n</ul>\n// lastPlacedIndex = 0;\n// D가 oldChildNode에서의 index가 3임\n// 3 >= lastPlaceIndex 이므로 이동이 필요 없음. lastPlaceIndex = 3으로 지정\n// A가 oldChildNode에서의 index가 0임\n// 1 < 3(lastPlaceIndex) 이므로 맨뒤로 이동.\n// B가 oldChildNode에서의 index가 1임\n// 2 < 3(lastPlaceIndex) 이므로 맨뒤로 이동.\n// C가 oldChildNode에서의 index가 2임\n// 2 < 3(lastPlaceIndex) 이므로 맨뒤로 이동.\n\n\n\nReact render하는 조건(bailout조건)#\n\n * oldProps === newProps\n * context 값의 변화가 있는지?\n * workInProgress.type === current.type (only Dev mode, live-reload)\n * state변화가 있는지 ?? 업데이트 EffectTag가 존재한지, 존재하면 이번 priority 업데이트 task에 포함 되는건지 ?\n\n\n최적화 유형#\n\n 1. PureComponent,shouldComponentUpdate\n 2. React.memo로 캐시(PureComponent로 만들고 싶을때 사용.)\n\n// React는 기본적으로 state변경시 해당 컴포넌트 및 자식 컴포넌트 전부 rerender한다.\n// bailout로직중 newProps === oldProps 여야만 컴포넌트를 랜딩하지 않는다.\n// 하위 컴포넌트에 React.memo 적용시 알고리즘을 실행해서 랭딩한다.\n// 자주 변하는 값은 필요없지만 업데이트가 적거나 static한 컴포넌트는 필요하다.\n// 컴포넌트 자체에서 props, state, context변화가 없고 부모의 부모의 .....  key값이 변화가 없는데 rerender된다.\n\n\n\nconst EffectComponent = () => {\n  console.log(\"render effect Component\");\n  return <>effect Component</>;\n};\n\n// const a = <EffectComponent />\n\n// const diff = (prevProps, nextProps) => {\n//   console.log(prevProps === nextProps);\n//   return prevProps === nextProps;\n// }\n\n// const MemoEffectComponent = React.memo(EffectComponent, diff);\n\nconst App = () => {\n  const [count, setCount] = useState(0); // state또는 context를 건드렸기 때문.\n  const onChange = (e) => {\n    setCount(count + 1);\n  };\n\n  // const b = useMemo(() => <EffectComponent />, [])\n\n  return (\n    <>\n      <h2>Register</h2>\n      <input onChange={onChange} />\n      <p>{count}</p>\n      <EffectComponent />\n      {/* {a} */}\n      {/* <MemoEffectComponent /> */}\n    </>\n  );\n};\n\nexport default App;\n\n\n 3. useMemo, useCallback로 캐시\n\n\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  const handleCount = useCallback(() => {\n    setCount((count) => count + 1);\n  }, []);\n\n  const handleCount2 = useCallback(() => {\n    setCount(count + 1);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>{count}</h1>\n      <button onClick={handleCount}>+1</button>\n      <button onClick={handleCount2}>+1</button>\n    </div>\n  );\n}\n\n\n 4. inlineObject 사용금지\n\n// bad\n<div style={{width: 200}}></div>\n// good\nconst style = {width:200}\n<div style={style}></div>\n\n\n 5. 익명함수 사용금지.\n\n// bad\n<button onClick={() => {...}}>123</button>\n\n// good\nconst onClick = () => {...};\n<button onClick={onClick}>123</button>\n\n\n 6. key활용\n 7. React.Fragment사용\n\n// bad\n<div>\n  <p>1</p>\n  <p>2</p>\n</div>\n\n// good\n<React.Fragment>\n  <p>1</p>\n  <p>2</p>\n<React.Fragment/>\n\n\n 8.  lazyload(suspense) with webpack\n 9.  transtion(react18)\n 10. immer 사용(구조공유)\n 11. useLayoutEffect, useInsertionEffect에 오래 실행되는 스크립트 사용하지 말것.(useEffect와 달리\n     sync로 실행됨.)\n\n\nReact Design#\n\n * 변화(props, state, context)랑 불변을 분리해서 처리.\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      {/* Title 컴포넌트 분리 */}\n      <h1>h1</h1>\n\n      {/* 이부분 분리 필요 */}\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      {/* 이부분 분리 필요 */}\n    </>\n  );\n};\n\n\n * 자주 랜더되는 컴포넌트를 찾고 그 parent노드를 찾아 가면서 최적화.\n\n\n시험단계#\n\n * React forget(React without memo)\n * Offscreen API\n   https://vuejs.org/guide/built-ins/keep-alive.html#include-exclude\n\n\n참고링크#\n\n * https://ko.reactjs.org/docs/reconciliation.html#the-diffing-algorithm\n * https://github.com/facebook/react/blob/bd081376665f5f081dcf4bf72f06b7e563c804\n   6d/packages/react-reconciler/src/ReactChildFiber.old.js#L736\n * https://zhuanlan.zhihu.com/p/20346379\n * https://react.iamkasong.com/diff/multi.html","routePath":"/note/react/performance","lang":"","toc":[{"text":"Diff Algorithm (VDOM)","id":"diff-algorithm-vdom","depth":2,"charIndex":3},{"text":"1. Tree diff 동일레벨(depth) 요소끼리 비교","id":"1-tree-diff-동일레벨depth-요소끼리-비교","depth":4,"charIndex":27},{"text":"2. component 비교","id":"2-component-비교","depth":4,"charIndex":169},{"text":"3. Element Type 비교","id":"3-element-type-비교","depth":4,"charIndex":306},{"text":"4. Element Props 비교","id":"4-element-props-비교","depth":4,"charIndex":589},{"text":"5. key(우선순위 제일 높음.)","id":"5-key우선순위-제일-높음","depth":4,"charIndex":1028},{"text":"6. 멀티노드 비교","id":"6-멀티노드-비교","depth":4,"charIndex":1316},{"text":"React render하는 조건(bailout조건)","id":"react-render하는-조건bailout조건","depth":2,"charIndex":3367},{"text":"최적화 유형","id":"최적화-유형","depth":2,"charIndex":3596},{"text":"React Design","id":"react-design","depth":2,"charIndex":5791},{"text":"시험단계","id":"시험단계","depth":3,"charIndex":6171},{"text":"참고링크","id":"참고링크","depth":3,"charIndex":6302}],"frontmatter":{},"version":""},{"title":"리액트 특징","content":"#\n\n\nReact강점?#\n\n지속가능한 인터랙티브(consistently interactive), 즉 time slice(concurent)\n\n프레임워크 비교에서 리액트가 후순위로 밀려나는 이유는 consistently interactive가 성능에서 제외되었기 때문이다.(링크참고)\n\nreact legacy\n\n\n\nreact concurrent\n\n\n\n\n\n\nAOT(A Head Of Time) vs JIT(Just In Time)#\n\n * AOT\n   * 소스코드를 미리 컴파일\n   * 정적이다\n   * svelte\n * JIT\n   * 런타임 환경에 필요한 부분만 컴파일\n   * 유연하다\n   * react(jsx, react render fn은 완전 동적이여서 최적화가 어려움.)\n\n\nAlgebraic Effect(OCaml)#\n\n * functional programing중 개념.\n * 부작용(effect)을 함수 내부에서 분리\n * React 개발시 useState 같은 경우 내부적으로 어떻게 처리하는지 신경쓰지 않아도 되고 어떤 데이터를 반환하는지 만 알고 코드\n   작성하면 된다.\n\nconst getTotal = () => {\n  const a = getPrice1(); // effect\n  const b = getPrice2(); // effect\n  return a + b;\n};\n// getTotal실행시 바로 결과 가져오게 처리.\n\nconst Total = () => {\n  const a = usePrice(1); // async\n  const b = usePrice(2); // async\n  return <div>{a + b}</div>;\n};\n// <Total />\n\n\n\n참고#\n\n * https://yeoulcoding.me/124\n * https://overreacted.io/algebraic-effects-for-the-rest-of-us/\n * https://github.com/halfnelson/svelte-it-will-scale\n * https://krausest.github.io/js-framework-benchmark/2022/table_chrome_103.0.506\n   0.53_osx.html\n * https://web.dev/i18n/ko/interactive/\n * https://maxkim-j.github.io/posts/suspense-argibraic-effect\n * https://codesandbox.io/s/frosty-hermann-bztrp?file=/src/index.js:152-160","routePath":"/note/react/sources/01","lang":"","toc":[{"text":"React강점?","id":"react강점","depth":3,"charIndex":3},{"text":"AOT(A Head Of Time) vs JIT(Just In Time)","id":"aota-head-of-time-vs-jitjust-in-time","depth":3,"charIndex":197},{"text":"Algebraic Effect(OCaml)","id":"algebraic-effectocaml","depth":3,"charIndex":384},{"text":"참고","id":"참고","depth":3,"charIndex":841}],"frontmatter":{},"version":""},{"title":"Fiber","content":"#\n\n\n용어#\n\nFiber Architecture\n\nFiber Node, Fiber Tree, FiberRoot, rootFiber\n\nFiber Reconciler는 Fiber Node 기반으로 실현\n\n\nVdom에 대한 이해?#\n\n 1. Fiber 객체 자체가 Vdom이다.\n 2. vitrual DOM은 React.createElement()로 return된 객체. fiber는 vdom 을 realdom으로 실현하는\n    일부분.\n\n\nFiber 아키텍처의 의미#\n\nfiber는 node단위를 한개 workUnit으로 비동기 이고 중단 가능한 업데이트를 실현(concurrent 모드, timeSlice실현.)\n\n\n데이터 구조#\n\n// https://github.com/facebook/react/blob/16.8.6/packages/react-reconciler/src/ReactFiber.js\nfunction FiberNode(tag: WorkTag, pendingProps: mixed, key: null | string, mode: TypeOfMode) {\n  this.tag = tag; // fiber 대응하는 컴포넌트 유형 Function/Class/Host\n  this.key = key;\n  this.elementType = null; // type이랑 동일 하지만 일부 제외(예: React.memo사용시 제외)\n  this.type = null; // FC=>함수자체, CC=>클래스, HostComponent=>tagName\n  this.stateNode = null;\n\n  // 다른 fiber 연결용\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n\n  this.index = 0; // fiber관련 dom insert할때 인덱스.\n  this.ref = null;\n\n  // update 관련된 상태 관련 정보 저장.\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // 부작용에 대한 내용 저장.\n  this.effectTag = NoEffect;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  // 우선순위 관련 처리\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  // 해당 fiber 업데이트시 연관된 작업의 fiber(workInProgressFiber => currentFiber)\n  this.alternate = null;\n}\n\n\n\nFiber DoubleBuffer#\n\n예를들어 canvas에서 화면을 그릴때 매프레임마다 ctx.clearRect로 이전 화면을 지운다.\n\n새로 그리는 화면 컴퓨팅 시간이 많이 필요할 경우 흰색 화면만 보여주는 경우(Flickering)가 있다.\n\n해당문제를 해결하기 위해서 메모리(cpu, gpu)에서 다음화면을 그릴때 까지 이전화면을 보여주고 화면이 완성된 후에 ctx.clearRect로\n이전화면을 지우고 새화면을 교체해준다.\n\n이와같이 메모리에서 구성하고 바로 교체 해주는 방식을 DoubleBuffer라고 한다.\n\ncurrent fiber ⇒ workInProgress fiber(alternate)\n\n\nRoot#\n\nfiberRoot(변하지 않음.) > rootFiber > App > div\n\n\n\n\nJSX to Fiber#\n\nJSX ⇒ BABEL ⇒ React.createElement ⇒ ReactElement ⇒ ReactDom.render ⇒\nReactDOM.legacyCreateRootFromDOMContainer ⇒ createFiberRoot\n\n\nfiber 생성순서#\n\n\n\n*React 자식요소가 only textNode일 경우 별도 fiber생성 하지 않는다. (isDirectTextChild)\n\n<div><!-- 1 -->\n  <header/><!-- 2 -->\n    <h1><!-- 3 -->\n      page Title<!-- 4 -->\n      <span></span><!-- 5 -->\n    </h1>\n    <input /><!-- 6 -->\n  </header>\n  <div>contents</div><!-- 7 -->\n  <footer><!-- 8 -->\n    <div><!-- 9 -->\n      <p>copyright</p><!-- 10 -->\n      <p>email: aa@bb.com</p><!-- 11 -->\n    </div>\n    <p>footer</p><!-- 12 -->\n  </footer>\n</div>\n\n\n\n참고#\n\n * https://github.com/acdlite/react-fiber-architecture\n * https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reco\n   nciliation-algorithm-in-react\n * https://www.youtube.com/watch?v=ZCuYPiUIONs","routePath":"/note/react/sources/02","lang":"","toc":[{"text":"용어","id":"용어","depth":3,"charIndex":3},{"text":"Vdom에 대한 이해?","id":"vdom에-대한-이해","depth":3,"charIndex":113},{"text":"Fiber 아키텍처의 의미","id":"fiber-아키텍처의-의미","depth":3,"charIndex":245},{"text":"데이터 구조","id":"데이터-구조","depth":3,"charIndex":345},{"text":"Fiber **DoubleBuffer**","id":"fiber-doublebuffer","depth":3,"charIndex":-1},{"text":"Root","id":"root","depth":3,"charIndex":1777},{"text":"JSX to Fiber","id":"jsx-to-fiber","depth":3,"charIndex":1831},{"text":"fiber 생성순서","id":"fiber-생성순서","depth":3,"charIndex":1977},{"text":"참고","id":"참고","depth":3,"charIndex":2433}],"frontmatter":{},"version":""},{"title":"Reconciler","content":"#\n\n\n역할#\n\n * Function또는 class컴포넌트의 render 함수를 실행해서 jsx를 vdom으로 변경\n * 새로운 vdom과 기존 vdom을 비교한다.\n * diff통해서 변화한 부분을 체크한다.\n * renderer를 통해서 DOM을 화면에 뿌려준다.\n\n\nfiber관련 태그 설명.#\n\n * type\n   * FunctionComponent ⇒ 함수자체\n   * ClassComponent ⇒ 클래스\n   * HostComponent ⇒ tagName\n * tag\n   * FunctionComponent\n   * ClassComponent\n   * HostComponent\n * effectTag\n   * Placement\n   * Update\n   * PlacementAndUpdate\n   * Deletion\n   * Passive\n * effectList(firstEffect, nextEffect, lastEffect)\n * stateNode => DOM객체 저장.\n\n\n과정#\n\n * render\n   * beginWork\n   * completeWork\n * commit\n   * before Mutation\n   * mutation\n   * layout\n\n\nrender단계#\n\n\nbeginWork#\n\n * (mount)fiber.tag에 따라 서로 다른 Fiber노드 생성.\n * (update) 만약 current가 최적화 될수 있다면 current를 그대로 사용(Diff)\n * fiber에 EffectTag생성\n\n\ncompleteWork#\n\n * (mount)fiber.stateNode에 관련된 DOM노드 생성\n * (mount)children DOM노드를 생성된 fiber.stateNode DOM노드에 insert\n * (mount) props 처리\n * (update) fiber.updateQueue처리\n * (update) props diff 처리후 fiber.pendingProps에 저장.\n * effectTag 생성된 fiber에 대해서 effectList에 추가.\n\n\ncommit#\n\n\ncommit start#\n\neffectList중 Passive 태그가 존재할 경우 flushPassiveEffects(Immediate) 실행.\n\n\nbefore mutation (commitBeforeMutationEffects)#\n\n * DOM노드 랜더/삭제후 focus, blur 관련 로직처리.\n * getSnapshotBeforeUpdate(ClassComponent)\n * flashPassiveEffects (Normal)\n\n\nmutation (commitMutationEffects)#\n\n * effectTag에 따라 처리\n   * Placement\n   * Update\n     * FunctionComponent\n       * effectList에서 모든 useLayoutEffect의 destory 함수 실행.\n     * HostComponent\n       * fiber.updateQueue중 대응하는 내용 화면에 랜딩.\n       * fiber.pendingProps내용 화면에 랜딩\n   * Deletion\n\n\nlayout (commitLayoutEffects)#\n\n * 라이프사이클 및 hook 실행\n   * FunctionComponent\n     * useLayoutEffect 콜백 함수 실행.(sync)\n     * useEffect destor 함수와 콜백함수 초기화(async)\n   * classComponent\n     * componentDidMount, componentDidUpdate\n     * this.setState의 콜백함수 실행.\n   * HostRoot\n     * render fn 콜백함수 실행.\n * DOM Instance에 따라 ref업데이트\n * current Fiber 트리 변환\n\n\nlayout After#\n\n * fushPassiveEffects 실행(useEffect destor 및 useEffect callback)\n * flushSyncCallbackQueue 실행(예: useLayoutEffect 내부에 사용한 setState)\n\n\nhostConfig 외부 API(react-dom 빌드시 해당 부분 함께 빌드)#\n\n\n\nconst hostConfig = {\n  now: Date.now,\n  getRootHostContext: () => {},\n  clearContainer: () => {},\n  prepareForCommit: () => {},\n  resetAfterCommit: () => {},\n  getChildHostContext: () => {},\n  shouldSetTextContent: () => {},\n  createInstance: () => {},\n  createTextInstance: () => {},\n  appendInitialChild: () => {},\n  appendChild: () => {},\n  finalizeInitialChildren: () => {},\n  supportsMutation: true,\n  appendChildToContainer: () => {},\n  prepareUpdate = () => {},\n  commitUpdate = () => {},\n  commitTextUpdate = () => {},\n  removeChild = () => {},\n}\nconst ReactReconcilerInst = ReactReconciler(hostConfig);\n\nexport const render = (reactElement, domElement, callback) => {\n\n  if (!domElement._rootContainer) {\n    console.log(ReactReconcilerInst);\n    domElement._rootContainer = ReactReconcilerInst.createContainer(domElement);\n  }\n  // 컨테이너 업데이트\n  return ReactReconcilerInst.updateContainer(reactElement, domElement._rootContainer, null, callback);\n}\n\nexport default {\n  render\n}\n// \"react-reconciler\": \"0.26.2\",\n// \"react\": \"17.0.2\",\n\n\n\neffectList => subtreeFlags#\n\n * effectList인 경우\n\n\n\n * subtreeFlags\n\n\n\n * B의 effect는 Passive이고 bubble을 통해서 A로 이동, A.subtreeFlags에 Passive포함.\n * E의 effect는 Placement이고 bubble통해서 D로 이동, D.subtreeFlags에 Placement포함.\n * D.subtreeFlags에 Placement가 bubble통해서 C로 이동\n * C의 effect는 Update이고, C.subtreeFlags의 Placement가 bubble통해서 A로\n * A.subtreeFlags는 Passive、Placement、Update를 포함.\n * commit단계에서 모든 tree를 순회하면서 처리.\n\nhttps://gist.github.com/jl917/059c3c47a521914cb8ed8fa2b5ff8569\n\n\n참고#\n\n * https://velog.io/@dev-mish-mash/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-%EC%A1%B\n   0%ED%99%94Reconciliation-%EA%B3%BC%EC%A0%95-%EC%A0%95%EB%A6%AC\n * https://beta-reactjs-org-git-effects-fbopensource.vercel.app/learn/render-and\n   -commit\n * https://agent-hunt.medium.com/hello-world-custom-react-renderer-9a95b7cd04bc","routePath":"/note/react/sources/03","lang":"","toc":[{"text":"역할","id":"역할","depth":3,"charIndex":3},{"text":"fiber관련 태그 설명.","id":"fiber관련-태그-설명","depth":3,"charIndex":151},{"text":"과정","id":"과정","depth":3,"charIndex":500},{"text":"render단계","id":"render단계","depth":2,"charIndex":607},{"text":"beginWork","id":"beginwork","depth":3,"charIndex":619},{"text":"completeWork","id":"completework","depth":3,"charIndex":754},{"text":"commit","id":"commit","depth":2,"charIndex":1018},{"text":"commit start","id":"commit-start","depth":3,"charIndex":1028},{"text":"before mutation (commitBeforeMutationEffects)","id":"before-mutation-commitbeforemutationeffects","depth":3,"charIndex":1111},{"text":"mutation (commitMutationEffects)","id":"mutation-commitmutationeffects","depth":3,"charIndex":1273},{"text":"layout (commitLayoutEffects)","id":"layout-commitlayouteffects","depth":3,"charIndex":1555},{"text":"layout After","id":"layout-after","depth":3,"charIndex":1901},{"text":"hostConfig 외부 API(react-dom 빌드시 해당 부분 함께 빌드)","id":"hostconfig-외부-apireact-dom-빌드시-해당-부분-함께-빌드","depth":2,"charIndex":2048},{"text":"effectList => subtreeFlags","id":"effectlist--subtreeflags","depth":3,"charIndex":3141},{"text":"참고","id":"참고","depth":3,"charIndex":3610}],"frontmatter":{},"version":""},{"title":"Update","content":"#\n\n\nUpdate 활성화#\n\n * ReactDOM.render\n * this.setState\n * this.forceUpdate\n * useState\n * useReducer\n\n\nUpdate 프로세스#\n\nthis.update.enqueueSetState 통해서 Update를 생성하고 실행한다.\n\nUpdate 활성화\n    |\n    v\nshared.pending 생성\n    |\n    v\n....\n    |\n    v\nupdateQueue 처리(completeWork)\n    |\n    v\n...\n\n\n\nUpdate객체#\n\n// ClassComponent, HostRoot\nconst update = {\n  eventTime: \"\",\n  lane: \"\",\n  suspenseConfig: \"\",\n  tag: UpdateState, // CaptureUpdate, ForceUpdate, ReplaceState, UpdateState\n  payload: null, // ClassComponent this.setState args[0], HostRoot ReactDOM.render args[0]\n  callback: null, // ClassComponent this.setState args[1], HostRoot ReactDOM.render args[2]\n  next: null,\n};\n\n// FunctionComponent\nconst update = {\n  eventTime: \"\",\n  lane: \"\",\n  suspenseConfig: \"\",\n  action: \"\", // ????\n  eagerReducer: null, // useState는 basicStateReducer사용.\n  eagerState: null, // 리듀서를 통해 action의 결과값을 얻는다. basicStateReducer(baseState, action)\n  next: null,\n};\n\nfunction basicStateReducer(state, action) {\n  return typeof action === \"function\" ? action(state) : action;\n}\n\n\n\nUpdate Queue#\n\n * baseState: 메모리에 임시 저장되는 값.\n * memoizedState: 화면에 노출되는 값\n * shared.pending: 업데이트 활성화시 임시 저장하고 우선순위에 적합한 Update만 firstBaseUpdate뒤에 추가.\n\n// ClassComponent\nconst Fiber = {\n  updateQueue: {\n    baseState: '',\n    firstBaseUpdate: Update,\n    lastBaseUpdate: Update,\n    shared: {\n      pending: Updates\n    }\n    effects: [] // update.callback 이 존재하는 경우만 배열에 추가\n  }\n  memoizedState: stateValue\n}\n\n// FunctionComponent\nconst Fiber = {\n  memoizedState: { // Hook\n    memoizedState: stateValue,\n    baseState: '',\n    baseQueue: Update,\n    queue: Updates,\n    next, // Hook list\n  }\n}\n\n\n\nupdate 종류별#\n\n\n단일 Task#\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => setCount(count + 1);\n  return <div onClick={onClick}>{count}</div>;\n};\n\n\n\nbatchUpdate#\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick1 = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n  const onClick2 = () => {\n    setCount((baseState) => baseState + 1);\n    setCount((baseState) => baseState + 1);\n    setCount(count + 1);\n    setCount((baseState) => baseState + 1);\n  };\n  const onClick3 = () => {\n    setTimeout(() => {\n      // concurrent mode일 경우 배치됨, legacy mode일 경우 3번 랜딩됨.\n      setCount(count + 1);\n      setCount(count + 1);\n      setCount(count + 1);\n    }, 0);\n  };\n  return (\n    <>\n      <h1>{count}</h1>\n      <div onClick={onClick1}>click1</div>\n      <div onClick={onClick2}>click2</div>\n      <div onClick={onClick3}>click3</div>\n    </>\n  );\n};\n\n\n\nhigh priority task#\n\nconst arr = [];\narr.length = 6000;\narr.fill(0);\n\nconst App = () => {\n  const btnRef = useRef(null);\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount((count) => count + 1);\n  };\n\n  useEffect(() => {\n    // 레거시 모드에서는 10, 11로 화면에 노출\n    // 동시성 모드에서는 1, 11로 화면에 노출(1차 우선순위 높은거 실행, 2차 순차적으로 실행.)\n    // [10_2, x+1_1]\n    setTimeout(() => {\n      setCount(count + 10);\n    }, 2000);\n    setTimeout(() => {\n      btnRef.current.click();\n    }, 2000);\n  }, []);\n  return (\n    <>\n      <h1>{count}</h1>\n      <div\n        onClick={onClick}\n        ref={btnRef}\n      >\n        click1\n      </div>\n      {arr.map(() => (\n        <div>{count}</div>\n      ))}\n    </>\n  );\n};\n\n\n\n복합적인 경우#\n\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n\n\n\n참고#\n\n * https://wonism.github.io/react-updater/\n * https://github.com/facebook/react/blob/main/packages/react-reconciler/src/Rea\n   ctFiberClassUpdateQueue.old.js","routePath":"/note/react/sources/04","lang":"","toc":[{"text":"Update 활성화","id":"update-활성화","depth":3,"charIndex":3},{"text":"Update 프로세스","id":"update-프로세스","depth":3,"charIndex":100},{"text":"Update객체","id":"update객체","depth":3,"charIndex":284},{"text":"Update Queue","id":"update-queue","depth":3,"charIndex":1053},{"text":"update 종류별","id":"update-종류별","depth":2,"charIndex":1652},{"text":"단일 Task","id":"단일-task","depth":3,"charIndex":1666},{"text":"batchUpdate","id":"batchupdate","depth":3,"charIndex":1835},{"text":"high priority task","id":"high-priority-task","depth":3,"charIndex":2600},{"text":"복합적인 경우","id":"복합적인-경우","depth":3,"charIndex":3320},{"text":"참고","id":"참고","depth":3,"charIndex":4045}],"frontmatter":{},"version":""},{"title":"기초문법","content":"#\n\n\n요약#\n\nhello world#\n\nfn main() {\n    let s = \"hello world\";\n    println!(\"{}\", s); // println! macro   标准输出macro 可以完成编译器格式检查， 更加安全\n}\n\n\n타입지정#\n\nfn Foo(input1: i32, input2: u32) -> i32 {\n  ...\n}\n\n\nuse#\n\nuse std::prelude::*; // std rust에서 제공하는 standard 유틸\n\n\nFormat#\n\nfn main() {\n    println!(\"{}\", 1); // default\n    println!(\"{:o}\", 9); // 八进制\n    println!(\"{:x}\", 255); // 十六进制 小写\n    println!(\"{:X}\", 255); // 十六进制 大写\n    println!(\"{:p}\", &0); // pointer\n    println!(\"{:b}\", 15); // 二进制\n    println!(\"{:e}\", 10000f32); // 科学计数 小写\n    println!(\"{:E}\", 10000f32); // 科学计数 大写\n    println!(\"{:?}\", \"test\"); // debug\n    println!(\"{:#?}\", (\"test1\", \"test2\")); // 带换行和缩进的debug\n    println!(\"{a} {b} {b}\", a = \"x\", b = \"y\"); // 命名参数\n}\n\n\n변수선언#\n\nlet num: i32 = 100;\nlet num = 100i32;\n\nlet x = 5;\nx = 10; // error\n\nlet mut x = 5;\nx = 10;\n\nlet x:i32;\nx = 1;\n\nlet (mut a, mut b) = (1,2);\nlet Point {x: ref a, y: ref b} = p;\n\nstatic GLOBAL:i32 = 0;\n\n\n기본 데이터 유형#\n\nlet empty: () = (); // unit type\nlet boolean: bool = true;\nlet t1: char = 'x';\n// u8 ~ u128\nlet i1: i8 = -128; // -128~127\nlet i2: u8 = 255; // 0~255\n// f32, f64\nlet f1: f32 = 123.0;\nlet f2 = 123.0f32;\n\n\n복합 데이 유형#\n\n// tuple\nlet a = (1i32, false);\nlet b = (a, (1i32, 2i32));\nlet a = (0,);\nlet b: i32 = (0); // 표현식, tuple 아님\n\n// struct\nstruct Point {\n  x: i32,\n  y: i32,\n}\nlet p = Point {x: 0, y: 0};\nprintln!(\"point is at {} {}\",p.x, p.y);\n\n// struct: 생략 가능\nlet x = 10;\nlet y = 20;\nlet p = Point {x, y};\n\n// struct: px, py alias로 바인딩 가능\nlet p = Point { x: 0, y: 1 };\nlet Point { x: px, y: py } = p;\n\n// struct: destruct도 가능\nlet Point {x, y} = p;\n\n// struct: 语法糖, default 지정 가능\nstruct Point3d {\n  x: i32,\n  y: i32,\n  z: i32,\n}\nfn default() -> Point3d {\n  Point3d { x: 0, y: 0, z: 0 }\n}\nlet origin = Point3d { x: 4, ..default() };\n\n// tuple struct\nstruct T(i32);\nlet v1 = T(1);\nlet v2 = T{0: 1};\n\n// enum\nenum Number {\n    Int(i32),\n    Float(f32),\n}\n// Number::Int로 enum구성원에 접근\nfn read_num(num: &Number) {\n    match num {\n        &Number::Int(value) => println!(\"integer {}\", value),\n        &Number::Float(value) => println!(\"float {}\", value),\n    }\n}\nfn main() {\n    let n: Number = Number::Int(10);\n    read_num(&n);\n}\n// index\nenum Animal {\n    dog = 1, // 선언하지 않으면 0\n    cat = 200,\n    tiger,\n}\n\nlet x = Animal::tiger as isize;\nprintln!(\"{}\", x) // 201\n\n\nExpression#\n\nlet x = 100;\nlet y = 10;\nlet t = true;\nlet f = false;\n\nprintln!(\"{}\", x + y);\nprintln!(\"{}\", x - y);\nprintln!(\"{}\", x * y);\nprintln!(\"{}\", x / y);\nprintln!(\"{}\", x % y);\nprintln!(\"{}\", x == y);\nprintln!(\"{}\", x != y);\nprintln!(\"{}\", x < y);\nprintln!(\"{}\", x > y);\nprintln!(\"{}\", x >= y);\nprintln!(\"{}\", x <= y);\nprintln!(\"{}\", t && f);\nprintln!(\"{}\", t || f);\nprintln!(\"{}\", !t);\n\nlet mut y1 = 40;\nlet mut y2 = 40;\nlet mut y3 = 40;\nlet mut y4 = 40;\nlet mut y5 = 40;\ny1 += 10;\ny2 -= 10;\ny3 *= 10;\ny4 /= 10;\ny5 %= 10;\nprintln!(\"{}\", y1);\nprintln!(\"{}\", y2);\nprintln!(\"{}\", y3);\nprintln!(\"{}\", y4);\nprintln!(\"{}\", y5);\n\n\nlet x: () = {\n    println!(\"hello x\");\n};\nx;\nlet y: i32 = {\n    println!(\"hello y\");\n    30\n};\nprintln!(\"{}\", y);\n\n\nif else#\n\nfn func(n: i32) -> bool {\n    if n < 0 {\n        println!(\"{} is negative\", n);\n    } else if n > 0 {\n        println!(\"{} is positive\", n);\n    } else {\n        println!(\"{} is zero\", n);\n    }\n    return n > 0;\n}\nlet x = func(-3);\nprintln!(\"{}\", x)\n\n\nloop#\n\nlet mut count = 0u32;\n\nloop {\n    count += 1;\n    if count == 3 {\n        println!(\"three\");\n        continue;\n    }\n\n    println!(\"{}\", count);\n    if count >= 5 {\n        println!(\"OK\");\n        break;\n    }\n}\n\n\nwhile#\n\nlet mut count = 0u32;\n\nwhile count < 101 {\n    if count % 15 == 0 {\n        println!(\"fizzbuzz\");\n    } else if count % 3 == 0 {\n        println!(\"fizz\");\n    } else if count % 5 == 0 {\n        println!(\"buzz\");\n    } else {\n        println!(\"{}\", count);\n    }\n    count += 1;\n}\n\n\nfor#\n\nlet array = &[1, 2, 3, 4, 5];\nfor i in array {\n    println!(\"is {}\", i);\n}\n\n\n함수#\n\n// 일반\nfn add(t: (i32, i32)) -> i32 {\n    t.0 + t.1\n}\nfn add2((a, b): (i32, i32)) -> i32 {\n    a + b\n}\nprintln!(\"{}\", add((1, 2)));\nprintln!(\"{}\", add2((3, 4)))\n\n// return이 없는 경우 unit ()\nfn empty(a: i32) -> () {\n    a+a;\n}\n\n// 함수에 값을 할당해서 사용(타입이 동일할 때에만 할당 가능)\n// let mut f = add as fn((i32, i32)) -> i32;\nlet mut f: fn((i32, i32)) -> i32 = add;\nf = add2;\n\nprintln!(\"{}\", f((1, 3)))\n\n// main함수 args\nfn main() {\n    for arg in std::env::args() {\n        println!(\"{}\", arg);\n    }\n    std::process::exit(0);\n}\n// ./004 test1 opt2\n// ./004\n// test1\n// opt2\n\n// const 함수 컴파일 단계에서 실행하는 함수라서 제한이 많음,\n// 제한이 있을수 있으니 조심해서 사용\nconst fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\nlet total: i32 = add(1, 2);\nlet total2: i32 = add(3, 4);\nprintln!(\"{}\", total);\nprintln!(\"{}\", total2);\n\n// 재귀 함수\n// 函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n// rust1.19 버전까지 trail call 최적화가 되지 않음.\nfn fib(index: u32) -> u64 {\n    if index == 1 || index == 2 { 1 } else { fib(index - 1) + fib(index - 2) }\n}\n\nlet f8 = fib(8);\nprintln!(\"{}\", f8)\n\n\ntrait#\n\n// method\ntrait Shape {\n    fn area(&self) -> f64;\n}\nstruct Circle {\n    radius: f64,\n}\n\nimpl Shape for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * self.radius * self.radius\n    }\n}\n\nlet c = Circle { radius: 2f64 };\nprintln!(\"{}\", c.area());\n\n// static method\nstruct T(i32);\nimpl T {\n    fn func(this: &Self) {\n        println!(\"{}\", this.0)\n    }\n}\n\nlet x = T(42);\nT::func(&x);\n\n// extend method\ntrait Double {\n    fn double(&self) -> Self;\n}\nimpl Double for i32 {\n    fn double(&self) -> i32 {\n        *self * 2\n    }\n}\n\nlet x: i32 = (10).double();\nprintln!(\"{}\", x)\n\n// fully qualified syntax(universal function call syntax)\ntrait Cook {\n    fn start(&self);\n}\ntrait Wash {\n    fn start(&self);\n}\nstruct Chef;\nimpl Cook for Chef {\n    fn start(&self) {\n        println!(\"Cook::start\");\n    }\n}\nimpl Wash for Chef {\n    fn start(&self) {\n        println!(\"Wash::start\");\n    }\n}\n\nlet me = Chef;\n<Cook>::start(&me);\n<Chef as Wash>::start(&me);\n\n// alias\npub trait Service {\n    type Request;\n    type Response;\n    type Error;\n    type Future: Future<Item=Self::Response, Error=Self::Error>;\n    fn call(&self, req: Self::Request) -> Self::Future;\n}\n\ntrait HttpService = Service<Request = http::Request, Response = http::Response, Error = http::Error>;\n\n\narray#\n\nlet v = [1,2,3];\n// 크기 반드시 지정, 가변 크기는 std Vec/LinkedList 사용\nlet xs: [i32; 5] = [1, 2, 3, 4, 5];\nprintln!(\"{:?}\", xs)\n\n// 기본값 으로 fill처리\nlet xs: [i32; 5] = [0; 5];\nprintln!(\"{:?}\", xs)\n\n// 2depth\nlet v: [[i32;2];3 ] = [[0,0],[0,0],[0,0]]\n\n// range\nlet r = 1..10;\nfor i in r {\n    println!(\"{}\", i);\n}\n\n\nstring#\n\nlet greeting: &str = \"Hello\";\nlet substr: &str = &greeting[2..];\nprintln!(\"{}\", greeting);\nprintln!(\"{}\", substr);\n\nlet mut s = String::from(\"Hello\");\ns.push(' ');\ns.push_str(\"World\");\nprintln!(\"{}\", s)\n\n\nmatch#\n\nenum Direction {\n    East,\n    West,\n    South,\n    North,\n}\n\nfn print(x: Direction) {\n    match x {\n        Direction::East => {\n            println!(\"East\");\n        }\n        Direction::West => {\n            println!(\"West\");\n        }\n        Direction::South => {\n            println!(\"South\");\n        }\n        Direction::North => {\n            println!(\"North\");\n        }\n    }\n}\n\nfn print2(y: Direction) {\n    match y {\n        Direction::East => {\n            println!(\"East\");\n        }\n        _ => {\n            println!(\"Other\");\n        }\n    }\n}\n\nfn print3(x: Direction) {\n    match x {\n        Direction::East => 10\n        Direction::West => 20\n        Direction::South => 30\n        Direction::North => 40\n    }\n}\n\nlet x = Direction::East;\nlet y = Direction::West;\nprint(x);\nprint2(y);\nprint3(x);\n\n\n_#\n\nstruct P(i32, i32, i32);\nfn calc(P(x, _, y): P) -> i32 {\n    x * x + y * y\n}\nlet t = P(1, 2, 3);\nprintln!(\"{}\", calc(t));\n","routePath":"/note/rust/001","lang":"","toc":[{"text":"요약","id":"요약","depth":2,"charIndex":3},{"text":"hello world","id":"hello-world","depth":4,"charIndex":8},{"text":"타입지정","id":"타입지정","depth":4,"charIndex":136},{"text":"use","id":"use","depth":4,"charIndex":195},{"text":"Format","id":"format","depth":4,"charIndex":255},{"text":"변수선언","id":"변수선언","depth":4,"charIndex":731},{"text":"기본 데이터 유형","id":"기본-데이터-유형","depth":4,"charIndex":939},{"text":"복합 데이 유형","id":"복합-데이-유형","depth":4,"charIndex":1155},{"text":"Expression","id":"expression","depth":4,"charIndex":2310},{"text":"if else","id":"if-else","depth":4,"charIndex":3057},{"text":"loop","id":"loop","depth":4,"charIndex":3320},{"text":"while","id":"while","depth":4,"charIndex":3541},{"text":"for","id":"for","depth":4,"charIndex":3831},{"text":"함수","id":"함수","depth":4,"charIndex":3914},{"text":"trait","id":"trait","depth":4,"charIndex":4920},{"text":"array","id":"array","depth":4,"charIndex":6208},{"text":"string","id":"string","depth":4,"charIndex":6517},{"text":"match","id":"match","depth":4,"charIndex":6731},{"text":"_","id":"_","depth":4,"charIndex":7558}],"frontmatter":{},"version":""},{"title":"개념","content":"#\n\n&str String차이점#\n\nString유형은 메모리공간 관리가 가능하다.","routePath":"/note/rust/002","lang":"","toc":[{"text":"&str String차이점","id":"str-string차이점","depth":4,"charIndex":2}],"frontmatter":{},"version":""},{"title":"유틸/팁","content":"#\n\n\nplugin#\n\n * vscode plugin(rust-analyzer)\n\n\n주의사항#\n\n * 시도해 보는 사고방식을 피하라\n * 완전히 새로운 언어여서 어려움에 부딛힐 준비를 해라\n * 책을 보고 깊게 공부하라\n * Linked List, Graph로 연습하지 말아라\n * 컴파일 오류를 잘 읽어보라\n * 다른언어의 bp를 rust에 적용하지 말라\n\n// str[n]으로 n번째 텍스트 가져오기\ns.chars().nth(n);\n","routePath":"/note/rust/003","lang":"","toc":[{"text":"plugin","id":"plugin","depth":3,"charIndex":3},{"text":"주의사항","id":"주의사항","depth":3,"charIndex":46}],"frontmatter":{},"version":""},{"title":"SEO","content":"#\n\n\nHTML부분#\n\n * Meta Title 태그 최적화\n * Meta description최적화\n * Semantic 마크업\n   * Heading 태그 구조 최적화\n   * image alt 속성\n   * anchor 텍스트를 작성\n     * 외부링크일 경우 rel=\"nofollow\" 추가\n * 절대 경로 사용\n * 불필요한 내용 제거.\n\n\nURL#\n\n * 최대한 짧고 간단하게\n * 키워드 포함\n * 소문자 사용\n * 특수문자 및 공백 사용 금지 또는 인코딩 처리\n * https사용\n\n\n기타#\n\n * sitemap.xml 사이트맵 작성\n * robots.txt에 의한 크롤링제어\n * 검색엔진 수동 등록\n * 사이트 랜더링 최적화","routePath":"/note/seo/","lang":"","toc":[{"text":"HTML부분","id":"html부분","depth":2,"charIndex":3},{"text":"URL","id":"url","depth":2,"charIndex":196},{"text":"기타","id":"기타","depth":2,"charIndex":279}],"frontmatter":{},"version":""},{"title":"基础","content":"#\n\n// Text.svelte\n<p>\n  this is Text Component\n</p>\n\n// App.svelte\n<script>\n  \n  const name = 'google'\n  const src = 'https://www.google.com/logos/doodles/2020/december-holidays-days-2-30-6753651837108830.3-law.gif'\n  const htmlText = '<strong>html</strong> parsing sample'\n</script>\n<div>\n  <h1 class=\"heading\">\n    hello {name}\n  </h1>\n  <div>\n    <img src={src} alt=\"{name} logo\" />\n  </div>\n  <p>\n    {@html htmlText}\n  </p>\n  <Text />\n</div>\n\n<style>\n  .heading{color:#ff0000}\n</style>\n\n\n// index.js\n\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\t// we'll learn about props later\n\t\tanswer: 42\n\t}\n});\n\n\n交互#\n\n<script>\n\tlet count = 0;\n  $: doubled = count * 2;\n\tconst handleClick = () => count += 1;\n</script>\n<button on:click={handleClick}>\n\tClick\n</button>\n<!-- 推荐， 重复使用该组建时很友好 -->\n<p>\n\t{count} {doubled}\n</p>\n<!-- 不使用也可以 -->\n<p>\n\t{count} {count * 2}\n</p>\n\n\n<script>\n\tlet count = 0;\n\tlet count2 = 0;\n  // 监听count更改时执行, 有声明就监听\n\t$: console.log(`the count is ${count}`);\n  // 可以大括号打包\n  $: {\n    console.log(`the count is ${count}`);\n  }\n  // 也可以添加条件\n  $: if(count > 10){\n    console.log('count max')\n    count = 9\n  }\n\n\tfunction handleClick() {\n\t\tcount += 1;\n\t}\n\tfunction handleClick2() {\n\t\tcount2 += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tClicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n\n<button on:click={handleClick2}>\n\tClicked {count2} {count2 === 1 ? 'time' : 'times'}\n</button>\n\n\n<script>\n\tlet numbers = [1,2,3,4];\n  $: length = numbers.length;\n  const addNumber = () => {\n    numbers = [...numbers, numbers.length + 1]\n    // 直接push 他不会导致组建更新\n    // nums.push(numbers.length + 1)\n  }\n</script>\n<button @on:click={addNumber}>\n  click {length}\n</button>\n\n\nProps#\n\n<!-- App.svelte -->\n<script>\n\t\n  const p1 = {\n    name: 'dao',\n    age: 20,\n  }\n</script>\n<People name=\"dao\" age={20} />\n<People {...p1} />\n\n<!-- People.svelte -->\n<script>\n  export const name = 'lang'; // default value\n  export const age;\n</script>\n<p>\n  name: {name}<br/>\n  age: {age}\n</p>\n\n\nLogic#\n\n<script>\nlet isLogined = false;\nconst toggle = () => {\n\tisLogined = !isLogined;\n}\nconst list = [\n  {\n    id: 'un01', name: 'dao', age: 12,\n  },\n  {\n    id: 'un02', name: 'lang', age: 22,\n  },\n]\n</script>\n<button on:click={toggle}>\n\t{#if !isLogined}login{/if}\n\t{#if isLogined}logout{/if}\n</button>\n<button on:click={toggle}>\n\t{#if !isLogined}login\n\t{:else}logout{/if}\n</button>\n<ul>\n  {#each list as item, i (item.id)} <!-- 相当于react key -->\n  \t<li>{i} - {item.name}, {item.age}</li>\n  {/each}\n</ul>\n\n\nPromise#\n\n<script>\n\tconst getUser = async () => {\n\t\tconst response = await fetch('https://randomuser.me/api/');\n\t\tif(response.status === 200){\n\t\t\treturn response.json()\n\t\t}\n\t}\n</script>\n\n{#await getUser()}\n\t<div>loading...</div>\n\t{:then data}\n\t<div>\n\t\t{data.results[0].gender} - {data.results[0].name.first}, {data.results[0].name.last}\n\t</div>\n\t{:catch error}\n\t<div>\n\t\t{error.message}\n\t</div>\n{/await}\n\n\nEvent#\n\n<script>\n\tlet count = 0;\n\tconst setCount = () => {\n\t\tcount += 1;\n\t}\n</script>\n<h1>\n\t{count}\n</h1>\n<button on:click|once={setCount}>\n\tclick\n</button>\n<!-- 在某些框架中，出于性能原因，您可能会看到一些避免内联事件处理程序的建议，尤其是在循环内部。 该建议不适用于Svelte，无论您选择哪种形式，编译器都将始终做正确的事情。 -->\n<button on:click={() => count += 1}>\n\tclick\n</button>\n\n\nEvent Modifiers#\n\n                  \npreventDefault    运行处理程序之前调用event.preventDefault（）。 例如，对客户端表单处理有用。\nstopPropagation   调用event.stopPropagation（），以防止事件到达下一个元素\npassive           改进了触摸/滚轮事件的滚动性能（Svelte会在安全的地方自动添加它）\nnonpassive        显式设置为passive：false\ncapture           在捕获阶段而不是冒泡阶段（）触发处理程序\nonce              首次运行处理程序后将其删除\nself              仅当event.target是元素本身时才触发处理程序\n\nComponent Event#\n\n与DOM事件不同，组件事件不会冒泡。 如果要在某个深度嵌套的组件上侦听事件，则中间组件必须转发该事件。\n\n<!-- App.svelte -->\n<script>\n\t\n\tlet name = 'lang';\n\tlet age = 5;\n\tconst getName = (event) => {\n\t\tname = event.detail.name;\n\t\tage = event.detail.age;\n\t}\n</script>\n<People on:getName={getName} />\n<PeopleOuter on:getName={getName} />\n<div>\n\t{name} {age}\n</div>\n\n<!-- People.svelte -->\n<script>\n\t\n\tconst dispatch = createEventDispatcher();\n\tconst setName = () => {\n\t\tdispatch('getName', {\n\t\t\tname: 'daolang',\n\t\t\tage: 12\n\t\t})\n\t}\n</script>\n<button on:click={setName}>\nclick\n</button>\n\n<!-- PeopleOuter.svelte -->\n<script>\n  \n</script>\n<People on:getName />\n\n\n\nForm binding#\n\n<script>\n\tlet formObj = {\n\t\tusername: '',\n\t\tage: 10,\n\t\tagree: false,\n\t\tgender: 'male',\n\t\tcountry: 'korea',\n\t\tmessage: '',\n\t}\n</script>\n\n<form>\n\t<h3>Input</h3>\n\t<label>username <input bind:value={formObj.username} /></label>\n\t<h3>Range</h3>\n\t<label>age <input bind:value={formObj.age} type=\"range\" min={0} max={99} />{formObj.age}</label>\n\t<h3>Radio</h3>\n\t<label>male <input type=\"radio\" bind:group={formObj.gender} value=\"male\" /></label>\n\t<label>famale <input type=\"radio\" bind:group={formObj.gender} value=\"female\" /></label>\n\t<h3>Radio</h3>\n\t<select bind:value={formObj.country}>\n\t\t<option value=\"china\">china</option>\n\t\t<option value=\"japan\">japan</option>\n\t\t<option value=\"korea\">korea</option>\n\t</select>\n\t<h3>Textarea</h3>\n\t<textarea bind:value={formObj.message} />\n</form>\n\n\nComponent binding#\n\n<!-- App.svelte -->\n<script>\n\t\n  let pin = ''\n  $: view = pin || 'enter pin'\n\t\n  const handleSubmit = () => {\n    alert(`submit ${pin}`)\n  }\n</script>\n<h1>{view}\n</h1>\n<Pad bind:value={pin} on:submit={handleSubmit} />\n<!-- Pad.svelte -->\n<script>\n\t\n\texport let value = ''\n\tconst dispatch = createEventDispatcher();\n\tconst clickNum = (e) => value += e.target.innerText;\n\tconst clickClear = () => value = '';\n\tconst clickSubmit = () => dispatch('submit')\n</script>\n\n<div>\n\t<button on:click={clickNum}>1</button>\n\t<button on:click={clickNum}>2</button>\n\t<button on:click={clickNum}>3</button>\n\t<button on:click={clickNum}>4</button>\n\t<button on:click={clickNum}>5</button>\n\t<button on:click={clickNum}>6</button>\n\t<button on:click={clickNum}>7</button>\n\t<button on:click={clickNum}>8</button>\n\t<button on:click={clickNum}>9</button>\n\t<button on:click={clickClear}>clear</button>\n\t<button on:click={clickNum}>0</button>\n\t<button on:click={clickSubmit}>submit</button>\n</div>\n\n\nLifecycle#\n\n 1. beforeUpdate\n 2. render\n 3. onMount\n 4. afterUpdate\n 5. onDestroy\n 6. unMount(onMount return function)\n\n<!-- App.svelte -->\n<script>\n\t\n\tlet isShow = true\n\tconst toggle = () => isShow = !isShow;\n</script>\n<button on:click={toggle}>\n\tclick\n</button>\n{#if isShow}\n<Sub />\n{/if}\n\n<!-- Sub.svelte -->\n<script>\n\t\n\tlet status = 'sub page'\n\tonMount(() => {\n\t\tconsole.log('mount')\n\t\treturn () => {\n\t\t\tconsole.log('unmount')\n\t\t}\n\t})\n\t// 销毁时运行 unmount 之前\n\tonDestroy(() => {\t\n\t\tconsole.log('destroy')\n\t})\n\t// 数据更新前\n\tbeforeUpdate(() => {\n\t\tconsole.log('before update')\n\t})\n\t// 数据更新后\n\tafterUpdate(() => {\n\t\tconsole.log('after update')\n\t})\n\t\n\tconst setContents = () => {\n\t\tstatus = `sub page ${+new Date()}`\n\t}\n</script>\n\n<p>\n\t<span style=\"display: none\">{console.log('render')}</span>\n\t{status}\n</p>\n<button on:click={setContents}>\n\tupdate page contents\n</button>\n\n\n在Svelte中更新组件状态时，它不会立即更新DOM。 而是等到下一个微任务，看是否还有其他需要应用的更改，包括其他组件。\n这样做避免了不必要的工作，并使浏览器可以更有效地对事物进行批处理。","routePath":"/note/svelte/01","lang":"","toc":[{"text":"交互","id":"交互","depth":4,"charIndex":619},{"text":"Props","id":"props","depth":4,"charIndex":1696},{"text":"Logic","id":"logic","depth":4,"charIndex":1998},{"text":"Promise","id":"promise","depth":4,"charIndex":2506},{"text":"Event","id":"event","depth":4,"charIndex":2911},{"text":"Event Modifiers","id":"event-modifiers","depth":4,"charIndex":3218},{"text":"Component Event","id":"component-event","depth":4,"charIndex":3588},{"text":"Form binding","id":"form-binding","depth":4,"charIndex":4213},{"text":"Component binding","id":"component-binding","depth":4,"charIndex":5011},{"text":"Lifecycle","id":"lifecycle","depth":4,"charIndex":6004}],"frontmatter":{},"version":""},{"title":"Stores","content":"#\n\n<!-- App.svelte -->\n<script>\n\n\nconst increment = () => {\n  count.update((v) => v + 1);\n};\nconst reset = () => {\n  count.set(0);\n};\n</script>\n\n<p>\n\t{$count} * 2 = {$count2}\n</p>\n\n<button on:click=\"{increment}\">\n\tincrement\n</button>\n<button on:click=\"{reset}\">\n\treset\n</button>\n\n\n// store.js\n\n\nexport const count = writable(0);\nexport const count2 = derived(count, (value) => value * 2);\n\n\nCustom#\n\n<!-- App.svelte -->\n<script>\n\n</script>\n\n<p>\n\t{$count}\n</p>\n\n<button on:click=\"{count.increment}\">\n\tincrement\n</button>\n<button on:click=\"{count.decrement}\">\n\tincrement\n</button>\n<button on:click=\"{count.reset}\">\n\treset\n</button>\n\n\n\n\nfunction createCount() {\n  const { subscribe, set, update } = writable(0);\n\n  return {\n    subscribe,\n    increment: () => {},\n    decrement: () => {},\n    reset: () => {},\n  };\n}\n\nexport const count = createCount();\n\n\nSlot#\n\n<!-- App.svelte -->\n<script>\n\n\n</script>\n\n<!-- basic -->\n<Box>slot</Box>\n<!-- default -->\n<Box />\n<!-- name -->\n<Box2>\n\t<span slot=\"heading\">title</span>\n</Box2>\n<Box2>\n\t<span slot=\"content\">div balabala</span>\n</Box2>\n\n<!-- Box.svelte -->\n<div>\n\t<slot>\n\t\t<p>default value</p>\n\t</slot>\n</div>\n\n<!-- Box2.svelte -->\n<div>\n\t<h1>\n\t\t<slot name=\"heading\" />\n\t</h1>\n\t<p>\n\t\t<slot name=\"content\" />\n\t</p>\n</div>\n","routePath":"/note/svelte/02","lang":"","toc":[{"text":"Custom","id":"custom","depth":4,"charIndex":390},{"text":"Slot","id":"slot","depth":4,"charIndex":852}],"frontmatter":{},"version":""},{"title":"测试","content":"#\n\n\n测试种类#\n\n * 单元测试(Unit Test)\n   \n   每个模块或者函数进行测试\n\n * 集成测试(Integration Testing)\n   \n   验证每个单元之间传递的正确性和实现性\n\n * 用户验收测试(User Acceptance Test)\n   \n   根据环境来进行功能以及性能的测试\n\n * 系统测试(System Testing)\n   \n   用户自己来测试是否达到需求\n\n * 黑盒测试(数据驱动测试)\n   \n   不需要知道软件的具体代码， 数据的输入和输出\n\n * 白盒测试(单元测试)\n   \n   程序员自己根据代码来写实现\n\n\n测试工具#\n\n\nClient/Server 自动化#\n\n * qtp\n * winrunner(IBM)\n * autoit\n\n\n功能测试#\n\n * jest(vitest)\n * Coverage\n * Unit Test\n * Integration Test (Module Integration Test)\n\n\n界面测试#\n\n * cypress\n * pupptter\n\n\n兼容性#\n\n * 跨浏览器(包括手机端) https://www.browserstack.com/\n * 软件环境(版本环境)\n * 硬件环境\n * 系统环境\n\n\n性能测试#\n\n * loadrunner\n * lighthouse https://developers.google.com/web/tools/lighthouse/\n * pagespeed https://developers.google.com/speed/pagespeed/insights/\n\nbrew install wrk\nwrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\nnpm install -g loadtest\nloadtest http://localhost:8054/test -t 20 -c 100\n\n\n\n接口测试#\n\n * Jmeter\n * postman\n * SoapUI\n\n\n网络测试#\n\n * lxia\n * wireshark\n * tc\n * iperf\n * tcpping\n\n\nweb 安全测试#\n\n * appscan\n * Netsparker community Edition\n * Websecurify\n * Wapiti\n * N-Stalker Free Version\n * Scrawlr\n * Watcher\n * WebScrab\n * 授权测试\n\n\n抓包#\n\n * fiddler\n\n * burpsuite\n\n * reqable\n\n\n其他#\n\n\n提升产品质量#\n\n * 编写测试用例并且加强对应的一个评审\n * 加强对需求的理解\n * 加强对问题的跟进\n * 交叉测试\n\n\nMock 的好处#\n\n 1. 由于其他系统模块出错引起本模块的测试错误，我们可以采用 mock 隔离，避免干预；\n 2. 开发过程中，只要交互双方定义好接口，团队之间可以并行工作，进程互不影响；\n 3. 依赖系统无法响应，或者响应异常时，可以用 mock Object 代替，快速反应，不会影响测试进度；\n 4. 提前接入测试，提供测试效率，当接口定义好后，测试人员就可以创建 Mock，把接口添加到自动化测试环境，提前开始测试，起到测试驱动开发效果；\n 5. 可以有效的增加覆盖，接口涉及入参，或者业务逻辑复杂的情况，某些场景无法通过正常手段进行操作，可以通过 mock 虚拟模拟；\n\n\n易用性 - Easy of Use#\n\n * 符合标准和规范\n * 直观\n * 一致\n * 灵活\n * 舒适\n * 正确\n * 实用","routePath":"/note/test/","lang":"","toc":[{"text":"测试种类","id":"测试种类","depth":2,"charIndex":3},{"text":"测试工具","id":"测试工具","depth":2,"charIndex":293},{"text":"Client/Server 自动化","id":"clientserver-自动化","depth":3,"charIndex":301},{"text":"功能测试","id":"功能测试","depth":3,"charIndex":358},{"text":"界面测试","id":"界面测试","depth":3,"charIndex":454},{"text":"兼容性","id":"兼容性","depth":3,"charIndex":486},{"text":"性能测试","id":"性能测试","depth":3,"charIndex":569},{"text":"接口测试","id":"接口测试","depth":3,"charIndex":874},{"text":"网络测试","id":"网络测试","depth":3,"charIndex":914},{"text":"web 安全测试","id":"web-安全测试","depth":3,"charIndex":970},{"text":"抓包","id":"抓包","depth":3,"charIndex":1119},{"text":"其他","id":"其他","depth":2,"charIndex":1163},{"text":"提升产品质量","id":"提升产品质量","depth":3,"charIndex":1169},{"text":"Mock 的好处","id":"mock-的好处","depth":3,"charIndex":1233},{"text":"易用性 - Easy of Use","id":"易用性---easy-of-use","depth":3,"charIndex":1528}],"frontmatter":{},"version":""},{"title":"Jest","content":"#\n\n\nInstall#\n\nnpm i --save-dev jest\n# 如果你在代码中使用了新的语法特性，而当前 Node 版本不支持，则需要使用 Babel 进行转义。\nnpm i --save-dev babel-jest @babel/core @babel/preset-env\nnpm i --save-dev identity-obj-proxy\nnpm i --save-dev react-test-renderer\nnpm i --save-dev enzyme enzyme-adapter-react-16 enzyme-to-json\nnpm i --save-dev @testing-library/react\n\n\n\n.babelrc.js#\n\nconst config = {\n  presets: [\"@babel/preset-env\", \"@babel/preset-react\"],\n  plugins: [],\n};\nif (process.env.NODE_ENV === \"production\") {\n  config.presets.push([\n    \"minify\",\n    {\n      removeConsole: true,\n    },\n  ]);\n}\nmodule.exports = config;\n\n\n\njest.config.js#\n\nmodule.exports = {\n  testEnvironment: \"node\",\n  transform: {\n    \"^.+\\\\.jsx?$\": \"babel-jest\",\n  },\n  moduleNameMapper: {\n    \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"./mocks/fileMock.js\",\n    \"\\\\.(css|less|styl)$\": \"identity-obj-proxy\",\n  },\n  snapshotSerializers: [\"enzyme-to-json/serializer\"],\n  setupFiles: [\"./setupTest.js\"],\n};\n\n\nVScode - https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest\n\nts-jest - https://github.com/kulshekhar/ts-jest\n\n\nmocks/fileMock.js#\n\nmodule.exports = '';\n\n\n\nsetupTest.js#\n\n\n\nconfigure({ adapter: new Adapter() });\n\n\n\n基本用法#\n\n\ndescribe(\"测试描述\", () => {\n  test(\"dao\", () => {\n    expect(fn(\"dao\")).toEqual(\"daodao\");\n  });\n  test(\"lang\", () => {\n    expect(fn(\"lang\")).toEqual(\"langdao\");\n  });\n});\n\n// 异步\n// .resolves\ntest(\"resolves to lemon\", () => {\n  // make sure to add a return statement\n  return expect(Promise.resolve(\"lemon\")).resolves.toBe(\"lemon\");\n});\n// .rejects\ntest(\"rejects to octopus\", () => {\n  // make sure to add a return statement\n  return expect(Promise.reject(new Error(\"octopus\"))).rejects.toThrow(\"octopus\");\n});\n\n\n\n比较#\n\ntoBe 使用 Object.is 判断是否严格相等。\n\ntoEqual 递归检查对象或数组的每个字段。\n\ntoBeNull 只匹配 null。\n\ntoBeUndefined 只匹配 undefined。\n\ntoBeDefined 只匹配非 undefined。\n\ntoBeTruthy 只匹配真。\n\ntoBeFalsy 只匹配假。\n\ntoBeGreaterThan 实际值大于期望。\n\ntoBeGreaterThanOrEqual 实际值大于或等于期望值\n\ntoBeLessThan 实际值小于期望值。\n\ntoBeLessThanOrEqual 实际值小于或等于期望值。\n\ntoBeCloseTo 比较浮点数的值，避免误差。\n\ntoMatch 正则匹配。\n\ntoContain 判断数组中是否包含指定项。\n\n.toHaveProperty(keyPath, value) 判断对象中是否包含指定属性。\n\ntoThrow 判断是否抛出指定的异常。\n\ntoBeInstanceOf 判断对象是否是某个类的实例，底层使用 instanceof。\n\n\nextends sample#\n\nconst expect = require(\"expect\");\n\nconst toMatchAllText = (props, textList) => {\n  let isMatchText = true;\n  let noMatchtextList = [];\n  for (const text of textList) {\n    try {\n      props.getByText(text);\n    } catch {\n      isMatchText = false;\n      noMatchtextList.push(text);\n    }\n  }\n  if (isMatchText) {\n    return {\n      message: () => \"success\",\n      pass: true,\n    };\n  }\n  return {\n    message: () => `not match some text \"${noMatchtextList.join(\", \")}\"`,\n    pass: false,\n  };\n};\n\nexpect.extend({ toMatchAllText: toMatchAllText });\n\n// expect(props.getByTestId('01').innerHTML).toMatchAllText('헤딩 타이틀');\n","routePath":"/note/test/jest","lang":"","toc":[{"text":"Install","id":"install","depth":3,"charIndex":3},{"text":".babelrc.js","id":"babelrcjs","depth":3,"charIndex":324},{"text":"jest.config.js","id":"jestconfigjs","depth":3,"charIndex":589},{"text":"mocks/fileMock.js","id":"mocksfilemockjs","depth":3,"charIndex":1117},{"text":"setupTest.js","id":"setuptestjs","depth":3,"charIndex":1161},{"text":"基本用法","id":"基本用法","depth":3,"charIndex":1220},{"text":"比较","id":"比较","depth":3,"charIndex":1740},{"text":"extends sample","id":"extends-sample","depth":3,"charIndex":2218}],"frontmatter":{},"version":""},{"title":"React Test Sample","content":"#\n\n\nbasic#\n\n// Button.jsx\n\n\n\nconst Button = ({ text = \"버튼\" }) => {\n  const [isActive, setActive] = useState(false);\n  return (\n    <button\n      type=\"button\"\n      className={isActive ? s.active : \"\"}\n      onClick={() => setActive(!isActive)}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n\n// Button.test.js\n\n\n\n\ndescribe(\"测试组件\", () => {\n  const component = shallow(<Button text=\"확인\" />);\n\n  test(\"default componet\", () => {\n    expect(component).toMatchSnapshot();\n    expect(component.props().className).toEqual(\"\");\n  });\n  test(\"component clicked\", () => {\n    expect(component).toMatchSnapshot();\n    component.find(\"button\").at(0).simulate(\"click\");\n    expect(component.props().className).toEqual(\"active\");\n  });\n});\n\n\n\nredux#\n\n// page1/redux.jsx\nexport const NEXT_COUNT = \"NEXT_COUNT\";\nexport const PREV_COUNT = \"PREV_COUNT\";\n\nexport const setCount = (type) => ({\n  type: type === \"next\" ? NEXT_COUNT : PREV_COUNT,\n});\n\nexport const countReducer = (state = 0, action) => {\n  if (action.type === NEXT_COUNT) {\n    return state + 1;\n  }\n  if (action.type === PREV_COUNT) {\n    return state - 1;\n  }\n  return state;\n};\n\n// page1/redux.test.js\n\n\ndescribe(\"PAGE1 测试redux\", () => {\n  test(\"action creator test\", () => {\n    expect(setCount(\"next\")).toEqual({ type: NEXT_COUNT });\n    expect(setCount(\"prev\")).toEqual({ type: PREV_COUNT });\n  });\n\n  test(\"reducer test\", () => {\n    expect(countReducer(0, { type: NEXT_COUNT })).toEqual(1);\n    expect(countReducer(10, { type: NEXT_COUNT })).toEqual(11);\n    expect(countReducer(-10, { type: NEXT_COUNT })).toEqual(-9);\n\n    expect(countReducer(0, { type: PREV_COUNT })).toEqual(-1);\n    expect(countReducer(10, { type: PREV_COUNT })).toEqual(9);\n    expect(countReducer(-10, { type: PREV_COUNT })).toEqual(-11);\n  });\n});\n","routePath":"/note/test/react","lang":"","toc":[{"text":"basic","id":"basic","depth":3,"charIndex":3},{"text":"redux","id":"redux","depth":3,"charIndex":747}],"frontmatter":{},"version":""},{"title":"测试最佳实践(中文)","content":"#\n\n一段测试代码需要做到让人一眼就能看出其目的。\n\n\n方法#\n\n * 3 个部分(测试什么/什么环境/期望结果)\n * AAA 模式构造内容(Arrange/Act/Assert 准备/执行/断言)\n * 描述期望(Bdd 形式断言) https://jestjs.io/docs/expect#expectextendmatchers\n * TDD\n * UI 与功能分离(AAA)\n * 测试用例标签(npx jest -t=#dao)\n\n\nmock#\n\n * 优先使用真实数据， 特定情况下使用 mock\n * mock 尽量与真实数据同步\n * 工具\n   * sinon\n   * test double\n   * https://www.npmjs.com/package/faker\n\n\ntype#\n\n * 基于属性的测试， 测试输入的多种组合\n\n\nDOM Tip#\n\n * 使用不太容易改变的属性去查询 HTML 元素\n\n\n避免#\n\n * 坚持 public 方法, 减少 private 方法\n * 尽量使用最短的 Snapshot\n * 尽量避免全局的 fixtures 和 seeds(每条测试需要在它自己的 DB 行中运行避免互相污染)\n * 不要 catch 错误而是 expect\n * 不要 sleep，使用框架内置的对 async\n   事件的支持。并且尝试提效。(https://testing-library.com/docs/guide-disappearance/)\n\n\n手动道具#\n\n * lighthouse https://developers.google.com/web/tools/lighthouse/\n * pagespeed https://developers.google.com/speed/pagespeed/insights/\n\n\nE2E (https://github.com/puppeteer/puppeteer)#\n\n * 写几个跨越整个系统的端到端测试\n * 通过复用登录凭证提速 E2E 测试\n * 创建一个 E2E 冒烟测试，仅仅走一遍网站地图\n\n\n测试报告#\n\n * 将测试以实时协作文档的形式公开(Storybook)\n   https://storybook.js.org/addons/@storybook/addon-jest\n * 检查覆盖率报告，以发现未覆盖的区域和其他奇怪的地方(coverage)\n * 使用「变异测试」度量逻辑覆盖率????\n * 使用 Test linter 防止测试代码问题\n\n\nCI 以及其他#\n\n * 丰富你的 linter 并丢弃有 lint 问题的构建\n * 通过本地的开发 CI 来缩短反馈循环(husky)\n * 在真实的生产环境镜像中执行端到端测试\n * 并行测试工作\n * 使用许可证和抄袭检查避免法务问题 (https://www.npmjs.com/package/license-checker)\n * 持续检查有漏洞的依赖\n * 自动升级依赖????\n * 使用多个 Node 版本执行同一个 CI 流程(质量检查是用于发现意外，你覆盖的部分越多，你就越可能尽早地发现问题。 在开发包或运行具有各种配置和\n   Node 版本的多客户生产环境时，CI 必须在所有配置的组合上运行测试管道。)","routePath":"/note/test/test","lang":"","toc":[{"text":"方法","id":"方法","depth":2,"charIndex":27},{"text":"mock","id":"mock","depth":2,"charIndex":223},{"text":"type","id":"type","depth":2,"charIndex":351},{"text":"DOM Tip","id":"dom-tip","depth":2,"charIndex":382},{"text":"避免","id":"避免","depth":2,"charIndex":420},{"text":"手动道具","id":"手动道具","depth":2,"charIndex":656},{"text":"E2E (https://github.com/puppeteer/puppeteer)","id":"e2e-httpsgithubcompuppeteerpuppeteer","depth":2,"charIndex":800},{"text":"测试报告","id":"测试报告","depth":2,"charIndex":916},{"text":"CI 以及其他","id":"ci-以及其他","depth":2,"charIndex":1101}],"frontmatter":{},"version":""},{"title":"테스트 베스트 프래틱스","content":"#\n\n한구간 테스트 코드로 한눈에 목적을 이해할수 있게 해야한다.\n\n\n방법#\n\n * 3개부분(무엇을 테스트 할것인가?/어떤 환경에서 진행되는가?/기대하는 결과는?)\n * AAA구조로 내용 구성(Arrange/Act/Assert 준비/실행/주장)\n * except 요약하기 (Bdd 형식의 expect)\n   https://jestjs.io/docs/expect#expectextendmatchers\n * TDD\n * UI와 기능 분리(AAA)\n * 테스트 케이스 태그(npx jest -t=#dao)\n\n\nmock#\n\n * 우선 real데이터를 사용, 특정경우에만 mock사용\n * mock데이터는 real데이터와 일치\n * 도구\n   * sinon\n   * test double\n   * https://www.npmjs.com/package/faker\n\n\ntype#\n\n * 속성 기반 테스트, 여러조합 입력\n\n\nDOM Tip#\n\n * static한 속성을 활용해서 HTML 요소에 접근\n\n\n주의사항#\n\n * public fn에 대해서만 테스트 하고 private fn은 최소한 으로 진행\n * Snapshot 요소는 작을수록 좋음.\n * 전역에 사용되는 fixtures와seeds는 피하자(매개 테스트는 독립적인 환경에서 실행)\n * 에러를 expect 권장, catch금지\n * no sleep, 프레임워크내 async\n   적극활용,(https://testing-library.com/docs/guide-disappearance/)\n\n\n수동도구#\n\n * lighthouse https://developers.google.com/web/tools/lighthouse/\n * pagespeed https://developers.google.com/speed/pagespeed/insights/\n\n\nE2E (https://github.com/puppeteer/puppeteer)#\n\n * 몇개 크로스시스템 테스트 케이스 작성.\n * 로그인 token을 중복 활용해서 E2E 진행\n * E2E Smoke Test를 통해서 사이트맵 한번씩 접근.\n\n\n테스트 보고서#\n\n * 테스트 결과를 실시간으로 확인할수 있는 시스템 구축(Storybook)\n   https://storybook.js.org/addons/@storybook/addon-jest\n * Coverage 결과를 기준으로 미확인 부분 및 이상한 부분 찾기\n * 使用「变异测试」度量逻辑覆盖率???? 4.3\n * test코드도 lint를 통해서 코드 품질 향상.","routePath":"/note/test/test_kr","lang":"","toc":[{"text":"방법","id":"방법","depth":2,"charIndex":38},{"text":"mock","id":"mock","depth":2,"charIndex":281},{"text":"type","id":"type","depth":2,"charIndex":422},{"text":"DOM Tip","id":"dom-tip","depth":2,"charIndex":453},{"text":"주의사항","id":"주의사항","depth":2,"charIndex":497},{"text":"수동도구","id":"수동도구","depth":2,"charIndex":749},{"text":"E2E (https://github.com/puppeteer/puppeteer)","id":"e2e-httpsgithubcompuppeteerpuppeteer","depth":2,"charIndex":893},{"text":"테스트 보고서","id":"테스트-보고서","depth":2,"charIndex":1032}],"frontmatter":{},"version":""},{"title":"vitest","content":"#\n\nvite.config.js#\n\n\n\n\n\nexport default defineConfig({\n  root: \"./src\",\n  build: {\n    outDir: \"../dist\",\n    emptyOutDir: true,\n  },\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: \"jsdom\",\n    setupFiles: \"./test/setup.ts\",\n    css: true,\n  },\n});\n\n\n\npackage.json#\n\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"coverage\": \"vitest run --coverage\"\n  },\n  \"devDependencies\": {\n    \"@testing-library/react\": \"^13.3.0\",\n    \"@vitejs/plugin-react\": \"^1.1.4\",\n    \"jsdom\": \"^20.0.0\",\n    \"vite\": \"^2.7.13\",\n    \"vitest\": \"^0.22.1\"\n  }\n}\n\n\n\nsrc/test/setup.ts#\n\n\n\nconst toMatchAllText = (props, textList) => {\n  let isMatchText = true;\n  let noMatchtextList = [];\n\n  for (const text of textList) {\n    if (!props.innerHTML.includes(text)) {\n      isMatchText = false;\n      noMatchtextList.push(text);\n    }\n  }\n  if (isMatchText) {\n    return {\n      message: () => \"success\",\n      pass: true,\n    };\n  }\n  return {\n    message: () => `not match some text \"${noMatchtextList.join(\", \")}\"`,\n    pass: false,\n  };\n};\n\nexpect.extend({ toMatchAllText });\n","routePath":"/note/test/vitest","lang":"","toc":[{"text":"vite.config.js","id":"viteconfigjs","depth":4,"charIndex":2},{"text":"package.json","id":"packagejson","depth":3,"charIndex":354},{"text":"src/test/setup.ts","id":"srctestsetupts","depth":3,"charIndex":635}],"frontmatter":{},"version":""},{"title":"Git","content":"#\n\n\nrevert#\n\ngit revert OLDER_COMMIT^..NEWER_COMMIT\ngit revert -n xxx^..yyy -m 1\n\ngit revert --quit\n\n\n\n커밋 취소#\n\ngit reset --soft HEAD^\n\n\n\n대소문자 이슈#\n\ngit config core.ignorecase false\n\n\n\n커밋 날짜 변경#\n\n# 최근 커밋을 어제의 현재 시간으로 변경하기\ngit commit --amend --date \"1 day ago\" -m \"커밋 메시지\"\n\n\n\nconmit rule#\n\nhttps://github.com/conventional-changelog/conventional-changelog/tree/master/pac\nkages\n\n * angular\n * atom\n * codemirror\n * ember\n * eslint\n * express\n * jquery\n * jshint\n * conventionalcommits","routePath":"/tools/git","lang":"","toc":[{"text":"revert","id":"revert","depth":3,"charIndex":3},{"text":"커밋 취소","id":"커밋-취소","depth":3,"charIndex":102},{"text":"대소문자 이슈","id":"대소문자-이슈","depth":3,"charIndex":136},{"text":"커밋 날짜 변경","id":"커밋-날짜-변경","depth":3,"charIndex":182},{"text":"conmit rule","id":"conmit-rule","depth":3,"charIndex":272}],"frontmatter":{},"version":""},{"title":"Npm","content":"#\n\n\ninstall 팁#\n\ninstall 시 https://registry.npmjs.org/jnpkg 여기서 다운로드\n\n\n동일패키지 여러 버전 공존#\n\nnpm install --save lodash-v1@npm:lodash@1.0.0\n\n\n\n\n\n\n기본설치된 package 리스트#\n\nnpm list --depth=0\nnpm list --depth=0 -global\n\n\n\n배포된 패키지 제거하기#\n\nnpm unpublish dzmtest@1.0.1 --force # 특정 버정만 제거\nnpm unpublish dzmtest --force # 패지지 제거\nnpm unpublish --force # package.json에 지정된 패키지 제거\n\n\n\npnpm 명령어#\n\n카테고리     명령어                                  설명\n기본       pnpm --version                       버전 확인\n         pnpm init                            프로젝트 초기화\n설치       pnpm install (pnpm i)                의존성 설치\n         pnpm add <패키지>                       패키지 설치\n         pnpm add <패키지> -D                    개발 의존성 설치\n         pnpm add <패키지> -g                    전역 설치\n         pnpm update                          의존성 업데이트\n제거       pnpm remove <패키지>                    패키지 삭제\n실행       pnpm run <script>                    스크립트 실행\n         pnpm exec <명령어>                      로컬 바이너리 실행\n관리       pnpm list (pnpm ls)                  패키지 목록\n         pnpm outdated                        업데이트 확인\n         pnpm prune                           불필요한 패키지 제거\n         pnpm audit                           보안 점검\n         pnpm why <패키지>                       설치 이유 확인\n워크스페이스   pnpm init -w                         워크스페이스 초기화\n         pnpm add <패키지> -w                    전체 워크스페이스에 추가\n         pnpm recursive install (pnpm i -r)   모든 워크스페이스 설치\n         pnpm recursive run <script>          모든 워크스페이스 스크립트 실행\n전역       pnpm add -g <패키지>                    전역 설치\n         pnpm remove -g <패키지>                 전역 제거\n         pnpm list -g                         전역 패키지 목록\n캐시/설정    pnpm store path                      캐시 저장소 경로\n         pnpm store prune                     캐시 정리\n         pnpm config get <key>                설정 값 확인\n         pnpm config set <key> <value>        설정 값 변경\n\n\nyarn 명령어#\n\n카테고리     명령어                        설명\n기본       yarn --version             버전 확인\n         yarn init                  새 프로젝트 초기화\n         yarn init -y               기본 설정으로 초기화\n설치       yarn install (yarn)        의존성 설치\n         yarn add <패키지>             패키지 설치\n         yarn add <패키지> --dev       개발 의존성 설치\n         yarn global add <패키지>      전역 설치\n         yarn upgrade               의존성 업데이트\n제거       yarn remove <패키지>          패키지 삭제\n실행       yarn run <script>          스크립트 실행\n         yarn <script> (단축)         run 생략 가능\n관리       yarn list                  설치된 패키지 목록\n         yarn outdated              업데이트 가능 패키지 확인\n         yarn cache clean           캐시 삭제\n         yarn why <패키지>             특정 패키지 설치 이유 확인\n워크스페이스   yarn workspaces info       워크스페이스 정보 출력\n         yarn workspace <이름> <명령>   특정 워크스페이스에서 명령 실행\n전역       yarn global add <패키지>      전역 설치\n         yarn global remove <패키지>   전역 제거\n         yarn global list           전역 패키지 목록","routePath":"/tools/npm","lang":"","toc":[{"text":"install 팁","id":"install-팁","depth":3,"charIndex":3},{"text":"동일패키지 여러 버전 공존","id":"동일패키지-여러-버전-공존","depth":3,"charIndex":69},{"text":"기본설치된 package 리스트","id":"기본설치된-package-리스트","depth":3,"charIndex":138},{"text":"배포된 패키지 제거하기","id":"배포된-패키지-제거하기","depth":3,"charIndex":207},{"text":"pnpm 명령어","id":"pnpm-명령어","depth":3,"charIndex":361},{"text":"yarn 명령어","id":"yarn-명령어","depth":3,"charIndex":1851}],"frontmatter":{},"version":""},{"title":"babel","content":"#\n\nsample code#\n\nexport default `function square(n) {\n  return n * n;\n}`;\n\n\n\nparser#\n\nbabel-parser(旧 Babylon) 是 Babel 的解析器。最初是 从 Acorn 项目 fork 出来的。Acorn\n非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。\n\n\n\n\nconst ast = parse(code);\nconsole.log(JSON.stringify(ast, null, 2));\n\n\n\ntraverse#\n\nBabel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。\n\n\n\n\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (path.node.type === \"Identifier\" && path.node.name === \"n\") {\n      path.node.name = \"x\";\n    }\n  },\n});\n\nconsole.log(JSON.stringify(ast, null, 2));\n\n\n\ntypes#\n\nBabel Types 模块是一个用于 AST 节点的 Lodash 式工具库（译注：Lodash 是一个 JavaScript\n函数工具库，提供了基于函数式编程风格的众多工具函数）， 它包含了构造、验证以及变换 AST 节点的方法。 该工具库包含考虑周到的工具方法，对编写处理 AST\n逻辑非常有用。\n\n\n\n\n\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (t.isIdentifier(path.node, { name: \"n\" })) {\n      path.node.name = \"x\";\n    }\n  },\n});\nconsole.log(JSON.stringify(ast, null, 2));\n\n\n\ngenerator#\n\nBabel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。\n\n\n\n\n\n\n\nconst ast = parse(code);\ntraverse(ast, {\n  enter(path) {\n    if (t.isIdentifier(path.node, { name: \"n\" })) {\n      path.node.name = \"x\";\n    }\n  },\n});\nconsole.log(generate(ast).code);\n\n\n\ntemplate#\n\n它能让你编写字符串形式且带有占位符的代码来代替手动编码， 尤其是生成的大规模 AST 的时候。 在计算机科学中，这种能力被称为准引用（quasiquotes）。\n\n\n\n\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\"),\n});\nconsole.log(generate(ast).code);\n\n\n\ntypes-vistor#\n\n// types\nconst EXPRESSION_TYPES = [];\nconst BINARY_TYPES = [];\nconst SCOPABLE_TYPES = [];\nconst BLOCKPARENT_TYPES = [];\nconst BLOCK_TYPES = [];\nconst STATEMENT_TYPES = [];\nconst TERMINATORLESS_TYPES = [];\nconst COMPLETIONSTATEMENT_TYPES = [];\nconst CONDITIONAL_TYPES = [];\nconst LOOP_TYPES = [];\nconst WHILE_TYPES = [];\nconst EXPRESSIONWRAPPER_TYPES = [];\nconst FOR_TYPES = [];\nconst FORXSTATEMENT_TYPES = [];\nconst FUNCTION_TYPES = [];\nconst FUNCTIONPARENT_TYPES = [];\nconst PUREISH_TYPES = [];\nconst DECLARATION_TYPES = [];\nconst PATTERNLIKE_TYPES = [];\nconst LVAL_TYPES = [];\nconst TSENTITYNAME_TYPES = [];\nconst LITERAL_TYPES = [];\nconst IMMUTABLE_TYPES = [];\nconst USERWHITESPACABLE_TYPES = [];\nconst METHOD_TYPES = [];\nconst OBJECTMEMBER_TYPES = [];\nconst PROPERTY_TYPES = [];\nconst UNARYLIKE_TYPES = [];\nconst PATTERN_TYPES = [];\nconst CLASS_TYPES = [];\nconst MODULEDECLARATION_TYPES = [];\nconst EXPORTDECLARATION_TYPES = [];\nconst MODULESPECIFIER_TYPES = [];\nconst PRIVATE_TYPES = [];\nconst FLOW_TYPES = [];\nconst FLOWTYPE_TYPES = [];\nconst FLOWBASEANNOTATION_TYPES = [];\nconst FLOWDECLARATION_TYPES = [];\nconst FLOWPREDICATE_TYPES = [];\nconst ENUMBODY_TYPES = [];\nconst ENUMMEMBER_TYPES = [];\nconst JSX_TYPES = [];\nconst TSTYPEELEMENT_TYPES = [];\nconst TSTYPE_TYPES = [];\nconst TSBASETYPE_TYPES = [];\n\n// operator\nconst LOGICAL_OPERATORS = [];\nconst UPDATE_OPERATORS = [];\nconst BOOLEAN_NUMBER_BINARY_OPERATORS = [];\nconst EQUALITY_BINARY_OPERATORS = [];\nconst COMPARISON_BINARY_OPERATORS = [];\nconst BOOLEAN_BINARY_OPERATORS = [];\nconst NUMBER_BINARY_OPERATORS = [];\nconst BINARY_OPERATORS = [];\nconst ASSIGNMENT_OPERATORS = [];\nconst BOOLEAN_UNARY_OPERATORS = [];\nconst NUMBER_UNARY_OPERATORS = [];\nconst STRING_UNARY_OPERATORS = [];\nconst UNARY_OPERATORS = [];\n","routePath":"/tools/plugins/babel","lang":"","toc":[{"text":"sample code","id":"sample-code","depth":4,"charIndex":2},{"text":"parser","id":"parser","depth":3,"charIndex":76},{"text":"traverse","id":"traverse","depth":3,"charIndex":273},{"text":"types","id":"types","depth":3,"charIndex":551},{"text":"generator","id":"generator","depth":3,"charIndex":915},{"text":"template","id":"template","depth":3,"charIndex":1168},{"text":"types-vistor","id":"types-vistor","depth":3,"charIndex":1486}],"frontmatter":{},"version":""},{"title":"eslint","content":"#\n\n 1. code\n 2. parser(esprima, @babel/eslint-parser, @typescript-eslint/parser)\n 3. AST\n 4. plugin(report or fix)\n\n\nbuild option#\n\n// build.js\nrequire(\"esbuild\")\n  .build({\n    entryPoints: [\"./src/index.js\"],\n    bundle: true,\n    minify: true,\n    platform: \"node\",\n    outfile: \"./lib/index.js\",\n    watch: true,\n  })\n  .then(() => console.log(\"빌드완료\"))\n  .catch(() => process.exit(1));\n\n\n// ./src/index.js\n// module.exports = {\n//   rules: {......},\n//   configs: {......},\n// }\n\n\nexport const rules = {\n  \"max-params\": maxParams,\n};\n\nexport const configs = {\n  recommended: {\n    plugins: [\"jl\"],\n    rules: {\n      \"jl/max-params\": [\"warn\", { max: 3 }],\n    },\n  },\n};\n\n// ./src/rules/max-params.js\n// https://astexplorer.net/\nexport default {\n  meta: {\n    docs: {\n      description: \"enforce a maximum number of parameters in function definitions\",\n      category: \"Stylistic Issues\", // https://cn.eslint.org/docs/rules/\n      recommended: false,\n    },\n  },\n  create: (context) => {\n    // https://eslint.org/docs/developer-guide/working-with-rules#the-context-object\n    // context: {\n    //   report,\n    //   id, // jl/max-params\n    //   options, // [{max: 3}, ......]\n    //   ......\n    // }\n    const fn = (node) => {\n      if (node.params.length > 3) {\n        // https://eslint.org/docs/developer-guide/working-with-rules\n        context.report({\n          node,\n          message: \"파라미터는 3개 이상 초과 할수 없습니다.\" + context.options[0].max,\n        });\n      }\n    };\n    // https://esprima.readthedocs.io/en/latest/syntax-tree-format.html#expressions-and-patterns\n    return {\n      FunctionDeclaration: fn,\n      ArrowFunctionExpression: fn,\n      FunctionExpression: fn,\n    };\n  },\n};\n\n\n\nuse plugin#\n\n// .eslintrc.json\n{\n  \"plugins\": [\n    \"jl\"\n  ],\n  \"extends\": [\n    \"plugin:jl/recommended\"\n  ],\n  \"rules\": {\n    \"jl/max-params\": \"off\", // off, warn, error, 0, 1,2\n    \"jl/max-params\": [\"warn\", {\"max\": 3}],\n  }\n}\n","routePath":"/tools/plugins/eslint","lang":"","toc":[{"text":"build option","id":"build-option","depth":3,"charIndex":116},{"text":"use plugin","id":"use-plugin","depth":3,"charIndex":1703}],"frontmatter":{},"version":""},{"title":"swc","content":"#\n\n\nVisitor#\n\n// https://swc.rs/docs/usage/core\n\n// https://github.com/swc-project/swc/blob/main/node-swc/src/Visitor.ts\n\n\ninterface ITransformResult {\n  code: string;\n  map?: string;\n}\nclass PluginName extends Visitor {\n  // run visitor\n  visitCallExpression(n: CallExpression) {\n    // any work\n    return super.visitCallExpression(n);\n  }\n}\n\nnew PluginName().visitProgram(program);\n\nconst transform = (src, id) => {\n  // default 값 지정 필요.\n  let result: ITransformResult = { code: src };\n\n  // 코드 변환\n  result = transformSync(src, {\n    plugin,\n    sourceMaps: true,\n    jsc: {\n      parser: {\n        syntax: \"ecmascript\",\n        jsx: true,\n      },\n    },\n  });\n  return result;\n};\n","routePath":"/tools/plugins/swc","lang":"","toc":[{"text":"Visitor","id":"visitor","depth":3,"charIndex":3}],"frontmatter":{},"version":""},{"title":"","content":"https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin","routePath":"/tools/plugins/typescript","lang":"","toc":[],"frontmatter":{},"version":""},{"title":"vite","content":"#\n\n\nsample code#\n\nexport default function myPlugin() {\n  return {\n    name: \"my-plugin\", // 插件名称\n    enforce: \"pre\", //调整插件被执行顺序\n    apply: \"build | serve\", // 指定插件应用情景\n    options(options) {},\n    buildStart(options) {},\n    resolveId(id) {},\n    load(id) {},\n    transform(src, id) {},\n    buildEnd(error) {},\n    closeBundle() {},\n    config(config, env) {},\n    configResolved(config) {},\n    configureServer(server) {},\n    transformIndexHtml(html, ctx) {},\n    handleHotUpdate(ctx) {},\n  };\n}\n","routePath":"/tools/plugins/vite","lang":"","toc":[{"text":"sample code","id":"sample-code","depth":3,"charIndex":3}],"frontmatter":{},"version":""}]